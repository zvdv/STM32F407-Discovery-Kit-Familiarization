
adc_dac_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e8  080040e8  000050e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f0  080040f0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000050f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040f4  080040f4  000050f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000b94  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ba0  20000ba0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd2d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b0  00000000  00000000  00012d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00015320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009dd  00000000  00000000  00016010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223c9  00000000  00000000  000169ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001090e  00000000  00000000  00038db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d34a7  00000000  00000000  000496c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011cb6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035b8  00000000  00000000  0011cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00120168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040b8 	.word	0x080040b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080040b8 	.word	0x080040b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d08:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <MX_ADC1_Init+0xa0>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d38:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d58:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d5a:	f000 fdbf 	bl	80018dc <HAL_ADC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d64:	f000 fc24 	bl	80015b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d70:	2307      	movs	r3, #7
 8000d72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_ADC1_Init+0x9c>)
 8000d7a:	f000 ff0d 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d84:	f000 fc14 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000028 	.word	0x20000028
 8000d94:	40012000 	.word	0x40012000

08000d98 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000daa:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dac:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <MX_ADC2_Init+0xa0>)
 8000dae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db0:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000db2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000db6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000ddc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000de0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfc:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000dfe:	f000 fd6d 	bl	80018dc <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000e08:	f000 fbd2 	bl	80015b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000e14:	2304      	movs	r3, #4
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_ADC2_Init+0x9c>)
 8000e1e:	f000 febb 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000e28:	f000 fbc2 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000070 	.word	0x20000070
 8000e38:	40012100 	.word	0x40012100

08000e3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a51      	ldr	r2, [pc, #324]	@ (8000fa0 <HAL_ADC_MspInit+0x164>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d13e      	bne.n	8000edc <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b50      	ldr	r3, [pc, #320]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000fac <HAL_ADC_MspInit+0x170>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e80:	4b49      	ldr	r3, [pc, #292]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e86:	4b48      	ldr	r3, [pc, #288]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b45      	ldr	r3, [pc, #276]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9a:	4b43      	ldr	r3, [pc, #268]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000e9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea2:	4b41      	ldr	r3, [pc, #260]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000ea4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ebe:	483a      	ldr	r0, [pc, #232]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000ec0:	f001 fc02 	bl	80026c8 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8000eca:	f000 fb71 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a35      	ldr	r2, [pc, #212]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed4:	4a34      	ldr	r2, [pc, #208]	@ (8000fa8 <HAL_ADC_MspInit+0x16c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000eda:	e05d      	b.n	8000f98 <HAL_ADC_MspInit+0x15c>
  else if(adcHandle->Instance==ADC2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a33      	ldr	r2, [pc, #204]	@ (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d158      	bne.n	8000f98 <HAL_ADC_MspInit+0x15c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a26      	ldr	r2, [pc, #152]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <HAL_ADC_MspInit+0x168>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	@ (8000fb4 <HAL_ADC_MspInit+0x178>)
 8000f32:	f001 ff39 	bl	8002da8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	@ (8000fbc <HAL_ADC_MspInit+0x180>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f66:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f6e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f7c:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f7e:	f001 fba3 	bl	80026c8 <HAL_DMA_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_ADC_MspInit+0x150>
      Error_Handler();
 8000f88:	f000 fb12 	bl	80015b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	@ 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	200000b8 	.word	0x200000b8
 8000fac:	40026410 	.word	0x40026410
 8000fb0:	40012100 	.word	0x40012100
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	20000118 	.word	0x20000118
 8000fbc:	40026440 	.word	0x40026440

08000fc0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_DAC_Init+0x4c>)
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <MX_DAC_Init+0x50>)
 8000fd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <MX_DAC_Init+0x4c>)
 8000fd6:	f001 f990 	bl	80022fa <HAL_DAC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fe0:	f000 fae6 	bl	80015b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fe4:	2324      	movs	r3, #36	@ 0x24
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <MX_DAC_Init+0x4c>)
 8000ff4:	f001 fa84 	bl	8002500 <HAL_DAC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ffe:	f000 fad7 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000178 	.word	0x20000178
 8001010:	40007400 	.word	0x40007400

08001014 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_DAC_MspInit+0xdc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d158      	bne.n	80010e8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 8001040:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a26      	ldr	r2, [pc, #152]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <HAL_DAC_MspInit+0xe0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106e:	2310      	movs	r3, #16
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <HAL_DAC_MspInit+0xe4>)
 8001082:	f001 fe91 	bl	8002da8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 8001088:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <HAL_DAC_MspInit+0xec>)
 800108a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 800108e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001092:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010be:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80010cc:	480b      	ldr	r0, [pc, #44]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010ce:	f001 fafb 	bl	80026c8 <HAL_DMA_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80010d8:	f000 fa6a 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_DAC_MspInit+0xe8>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40007400 	.word	0x40007400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	2000018c 	.word	0x2000018c
 8001100:	40026088 	.word	0x40026088

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_DMA_Init+0x78>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a1a      	ldr	r2, [pc, #104]	@ (800117c <MX_DMA_Init+0x78>)
 8001114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_DMA_Init+0x78>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_DMA_Init+0x78>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <MX_DMA_Init+0x78>)
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_DMA_Init+0x78>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2010      	movs	r0, #16
 8001148:	f001 f8a1 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800114c:	2010      	movs	r0, #16
 800114e:	f001 f8ba 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2038      	movs	r0, #56	@ 0x38
 8001158:	f001 f899 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800115c:	2038      	movs	r0, #56	@ 0x38
 800115e:	f001 f8b2 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	203a      	movs	r0, #58	@ 0x3a
 8001168:	f001 f891 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800116c:	203a      	movs	r0, #58	@ 0x3a
 800116e:	f001 f8aa 	bl	80022c6 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_GPIO_Init+0xec>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a33      	ldr	r2, [pc, #204]	@ (800126c <MX_GPIO_Init+0xec>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_GPIO_Init+0xec>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <MX_GPIO_Init+0xec>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a2c      	ldr	r2, [pc, #176]	@ (800126c <MX_GPIO_Init+0xec>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <MX_GPIO_Init+0xec>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_GPIO_Init+0xec>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a25      	ldr	r2, [pc, #148]	@ (800126c <MX_GPIO_Init+0xec>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_GPIO_Init+0xec>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <MX_GPIO_Init+0xec>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <MX_GPIO_Init+0xec>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <MX_GPIO_Init+0xec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_GPIO_Init+0xec>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a17      	ldr	r2, [pc, #92]	@ (800126c <MX_GPIO_Init+0xec>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_GPIO_Init+0xec>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <MX_GPIO_Init+0xf0>)
 800122a:	f001 ff59 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_GPIO_Init+0xf4>)
 8001242:	f001 fdb1 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLED_Pin OrangeLED_Pin RedLED_Pin BlueLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin;
 8001246:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <MX_GPIO_Init+0xf0>)
 8001260:	f001 fda2 	bl	8002da8 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
     if(hadc->Instance == ADC1) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d123      	bne.n	80012d2 <HAL_ADC_ConvHalfCpltCallback+0x5a>
    	 float sum = 0;
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
    	 for (int i = 0; i < HALFBUFFERLENGTH; i++){
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e010      	b.n	80012b8 <HAL_ADC_ConvHalfCpltCallback+0x40>
    		 sum += adc_temp[i];
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	edc7 7a05 	vstr	s15, [r7, #20]
    	 for (int i = 0; i < HALFBUFFERLENGTH; i++){
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b63      	cmp	r3, #99	@ 0x63
 80012bc:	ddeb      	ble.n	8001296 <HAL_ADC_ConvHalfCpltCallback+0x1e>
    	 }
    	 avg_adc_temp = sum/1.0/HALFBUFFERLENGTH;
 80012be:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001314 <HAL_ADC_ConvHalfCpltCallback+0x9c>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
     } else if(hadc->Instance == ADC2){
    	 for (int i = 0; i < HALFBUFFERLENGTH; i++){
			 dac_output[i] = adc_input[i];
		 }
     }
}
 80012d0:	e015      	b.n	80012fe <HAL_ADC_ConvHalfCpltCallback+0x86>
     } else if(hadc->Instance == ADC2){
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a11      	ldr	r2, [pc, #68]	@ (800131c <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d110      	bne.n	80012fe <HAL_ADC_ConvHalfCpltCallback+0x86>
    	 for (int i = 0; i < HALFBUFFERLENGTH; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e00a      	b.n	80012f8 <HAL_ADC_ConvHalfCpltCallback+0x80>
			 dac_output[i] = adc_input[i];
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ea:	490e      	ldr	r1, [pc, #56]	@ (8001324 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	 for (int i = 0; i < HALFBUFFERLENGTH; i++){
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b63      	cmp	r3, #99	@ 0x63
 80012fc:	ddf1      	ble.n	80012e2 <HAL_ADC_ConvHalfCpltCallback+0x6a>
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40012000 	.word	0x40012000
 8001310:	200001ec 	.word	0x200001ec
 8001314:	42c80000 	.word	0x42c80000
 8001318:	20000b4c 	.word	0x20000b4c
 800131c:	40012100 	.word	0x40012100
 8001320:	2000050c 	.word	0x2000050c
 8001324:	2000082c 	.word	0x2000082c

08001328 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
     if(hadc->Instance == ADC1) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <HAL_ADC_ConvCpltCallback+0x94>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d123      	bne.n	8001382 <HAL_ADC_ConvCpltCallback+0x5a>
    	 float sum = 0;
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
		 for (int i = HALFBUFFERLENGTH; i < 2*HALFBUFFERLENGTH; i++){
 8001340:	2364      	movs	r3, #100	@ 0x64
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	e010      	b.n	8001368 <HAL_ADC_ConvCpltCallback+0x40>
			 sum += adc_temp[i];
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ed97 7a05 	vldr	s14, [r7, #20]
 800135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135e:	edc7 7a05 	vstr	s15, [r7, #20]
		 for (int i = HALFBUFFERLENGTH; i < 2*HALFBUFFERLENGTH; i++){
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2bc7      	cmp	r3, #199	@ 0xc7
 800136c:	ddeb      	ble.n	8001346 <HAL_ADC_ConvCpltCallback+0x1e>
		 }
		 avg_adc_temp = sum/1.0/HALFBUFFERLENGTH;
 800136e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001372:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80013c4 <HAL_ADC_ConvCpltCallback+0x9c>
 8001376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
     }else if(hadc->Instance == ADC2){
    	 for (int i = HALFBUFFERLENGTH; i < 2*HALFBUFFERLENGTH; i++){
			 dac_output[i] = adc_input[i];
		 }
     }
}
 8001380:	e015      	b.n	80013ae <HAL_ADC_ConvCpltCallback+0x86>
     }else if(hadc->Instance == ADC2){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d110      	bne.n	80013ae <HAL_ADC_ConvCpltCallback+0x86>
    	 for (int i = HALFBUFFERLENGTH; i < 2*HALFBUFFERLENGTH; i++){
 800138c:	2364      	movs	r3, #100	@ 0x64
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e00a      	b.n	80013a8 <HAL_ADC_ConvCpltCallback+0x80>
			 dac_output[i] = adc_input[i];
 8001392:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800139a:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0xac>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	 for (int i = HALFBUFFERLENGTH; i < 2*HALFBUFFERLENGTH; i++){
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80013ac:	ddf1      	ble.n	8001392 <HAL_ADC_ConvCpltCallback+0x6a>
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40012000 	.word	0x40012000
 80013c0:	200001ec 	.word	0x200001ec
 80013c4:	42c80000 	.word	0x42c80000
 80013c8:	20000b4c 	.word	0x20000b4c
 80013cc:	40012100 	.word	0x40012100
 80013d0:	2000050c 	.word	0x2000050c
 80013d4:	2000082c 	.word	0x2000082c

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fa0b 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f87b 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f7ff fecb 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ea:	f7ff fe8b 	bl	8001104 <MX_DMA_Init>
  MX_ADC1_Init();
 80013ee:	f7ff fc81 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013f2:	f000 f96b 	bl	80016cc <MX_TIM2_Init>
  MX_ADC2_Init();
 80013f6:	f7ff fccf 	bl	8000d98 <MX_ADC2_Init>
  MX_DAC_Init();
 80013fa:	f7ff fde1 	bl	8000fc0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_temp, 2*HALFBUFFERLENGTH);
 80013fe:	22c8      	movs	r2, #200	@ 0xc8
 8001400:	492b      	ldr	r1, [pc, #172]	@ (80014b0 <main+0xd8>)
 8001402:	482c      	ldr	r0, [pc, #176]	@ (80014b4 <main+0xdc>)
 8001404:	f000 faae 	bl	8001964 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_input, 2*HALFBUFFERLENGTH);
 8001408:	22c8      	movs	r2, #200	@ 0xc8
 800140a:	492b      	ldr	r1, [pc, #172]	@ (80014b8 <main+0xe0>)
 800140c:	482b      	ldr	r0, [pc, #172]	@ (80014bc <main+0xe4>)
 800140e:	f000 faa9 	bl	8001964 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *) dac_output, 2*HALFBUFFERLENGTH, DAC_ALIGN_12B_R);
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	23c8      	movs	r3, #200	@ 0xc8
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <main+0xe8>)
 800141a:	2100      	movs	r1, #0
 800141c:	4829      	ldr	r0, [pc, #164]	@ (80014c4 <main+0xec>)
 800141e:	f000 ff8f 	bl	8002340 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001422:	4829      	ldr	r0, [pc, #164]	@ (80014c8 <main+0xf0>)
 8001424:	f002 fb2a 	bl	8003a7c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature = (3.0*avg_adc_temp/4095 - 0.76)/2.5e-3 + 25;
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <main+0xf4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f82f 	bl	8000490 <__aeabi_f2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <main+0xf8>)
 8001438:	f7ff f882 	bl	8000540 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	a314      	add	r3, pc, #80	@ (adr r3, 8001498 <main+0xc0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f9a3 	bl	8000794 <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	a312      	add	r3, pc, #72	@ (adr r3, 80014a0 <main+0xc8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe feb8 	bl	80001d0 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a30f      	add	r3, pc, #60	@ (adr r3, 80014a8 <main+0xd0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f991 	bl	8000794 <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <main+0xfc>)
 8001480:	f7fe fea8 	bl	80001d4 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fa6a 	bl	8000964 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <main+0x100>)
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e7c7      	b.n	8001428 <main+0x50>
 8001498:	00000000 	.word	0x00000000
 800149c:	40affe00 	.word	0x40affe00
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	200001ec 	.word	0x200001ec
 80014b4:	20000028 	.word	0x20000028
 80014b8:	2000050c 	.word	0x2000050c
 80014bc:	20000070 	.word	0x20000070
 80014c0:	2000082c 	.word	0x2000082c
 80014c4:	20000178 	.word	0x20000178
 80014c8:	20000b54 	.word	0x20000b54
 80014cc:	20000b4c 	.word	0x20000b4c
 80014d0:	40080000 	.word	0x40080000
 80014d4:	40390000 	.word	0x40390000
 80014d8:	20000b50 	.word	0x20000b50

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	@ 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fdb8 	bl	8004060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <SystemClock_Config+0xcc>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <SystemClock_Config+0xd0>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800154c:	2308      	movs	r3, #8
 800154e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001550:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800155a:	2307      	movs	r3, #7
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fdd6 	bl	8003114 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800156e:	f000 f81f 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800157e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2105      	movs	r1, #5
 8001590:	4618      	mov	r0, r3
 8001592:	f002 f837 	bl	8003604 <HAL_RCC_ClockConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800159c:	f000 f808 	bl	80015b0 <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3750      	adds	r7, #80	@ 0x50
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <Error_Handler+0x8>

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015fa:	2007      	movs	r0, #7
 80015fc:	f000 fe3c 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f91b 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <DMA1_Stream5_IRQHandler+0x10>)
 8001672:	f001 f92f 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000018c 	.word	0x2000018c

08001680 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <DMA2_Stream0_IRQHandler+0x10>)
 8001686:	f001 f925 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000b8 	.word	0x200000b8

08001694 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA2_Stream2_IRQHandler+0x10>)
 800169a:	f001 f91b 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000118 	.word	0x20000118

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016f2:	2204      	movs	r2, #4
 80016f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1049;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016fe:	f240 4219 	movw	r2, #1049	@ 0x419
 8001702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001712:	f002 f963 	bl	80039dc <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800171c:	f7ff ff48 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM2_Init+0x94>)
 800172e:	f002 fa0d 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001738:	f7ff ff3a 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173c:	2320      	movs	r3, #32
 800173e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM2_Init+0x94>)
 800174a:	f002 fc0d 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff ff2c 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000b54 	.word	0x20000b54

08001764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d10d      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a8:	f7ff ff7e 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 fc4d 	bl	8004070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fdff 	bl	80013d8 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017e8:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 80017ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017f0:	20000ba0 	.word	0x20000ba0

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fd29 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fec6 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fd41 	bl	80022e2 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 fd09 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000b9c 	.word	0x20000b9c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000b9c 	.word	0x20000b9c

080018dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fa9e 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa54 	bl	8001ddc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	e001      	b.n	8001950 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Start_DMA+0x1e>
 800197e:	2302      	movs	r3, #2
 8001980:	e0e9      	b.n	8001b56 <HAL_ADC_Start_DMA+0x1f2>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d018      	beq.n	80019ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001b60 <HAL_ADC_Start_DMA+0x1fc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001b64 <HAL_ADC_Start_DMA+0x200>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9a      	lsrs	r2, r3, #18
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d8:	d107      	bne.n	80019ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 80a1 	bne.w	8001b3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f023 0206 	bic.w	r2, r3, #6
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a46:	e002      	b.n	8001a4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a56:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <HAL_ADC_Start_DMA+0x204>)
 8001a58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5e:	4a43      	ldr	r2, [pc, #268]	@ (8001b6c <HAL_ADC_Start_DMA+0x208>)
 8001a60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	4a42      	ldr	r2, [pc, #264]	@ (8001b70 <HAL_ADC_Start_DMA+0x20c>)
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6e:	4a41      	ldr	r2, [pc, #260]	@ (8001b74 <HAL_ADC_Start_DMA+0x210>)
 8001a70:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a8a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a9a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	334c      	adds	r3, #76	@ 0x4c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f000 feba 	bl	8002824 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12a      	bne.n	8001b12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <HAL_ADC_Start_DMA+0x214>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d015      	beq.n	8001af2 <HAL_ADC_Start_DMA+0x18e>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <HAL_ADC_Start_DMA+0x218>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_Start_DMA+0x178>
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <HAL_ADC_Start_DMA+0x204>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <HAL_ADC_Start_DMA+0x21c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d136      	bne.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_ADC_Start_DMA+0x204>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d130      	bne.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d129      	bne.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e020      	b.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_ADC_Start_DMA+0x214>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d11b      	bne.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d114      	bne.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	e00b      	b.n	8001b54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f043 0210 	orr.w	r2, r3, #16
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000
 8001b64:	431bde83 	.word	0x431bde83
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	08001fd5 	.word	0x08001fd5
 8001b70:	0800208f 	.word	0x0800208f
 8001b74:	080020ab 	.word	0x080020ab
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	40012100 	.word	0x40012100
 8001b80:	40012200 	.word	0x40012200

08001b84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e105      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x228>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d925      	bls.n	8001c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	2207      	movs	r2, #7
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43da      	mvns	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	400a      	ands	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4403      	add	r3, r0
 8001c02:	3b1e      	subs	r3, #30
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	e022      	b.n	8001c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	2207      	movs	r2, #7
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6919      	ldr	r1, [r3, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4403      	add	r3, r0
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d824      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca6:	e04c      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d824      	bhi.n	8001cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b23      	subs	r3, #35	@ 0x23
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	400a      	ands	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b23      	subs	r3, #35	@ 0x23
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf8:	e023      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b41      	subs	r3, #65	@ 0x41
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	400a      	ands	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b41      	subs	r3, #65	@ 0x41
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <HAL_ADC_ConfigChannel+0x234>)
 8001d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x1e6>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d111      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x240>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9a      	lsrs	r2, r3, #18
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40012300 	.word	0x40012300
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <ADC_Init+0x1f0>)
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	021a      	lsls	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <ADC_Init+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6899      	ldr	r1, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	e00f      	b.n	8001eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0202 	bic.w	r2, r2, #2
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	005a      	lsls	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	3b01      	subs	r3, #1
 8001f34:	035a      	lsls	r2, r3, #13
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e007      	b.n	8001f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	051a      	lsls	r2, r3, #20
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f92:	025a      	lsls	r2, r3, #9
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	029a      	lsls	r2, r3, #10
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	0f000001 	.word	0x0f000001

08001fd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d13c      	bne.n	8002068 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d12b      	bne.n	8002060 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800200c:	2b00      	cmp	r3, #0
 800200e:	d127      	bne.n	8002060 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002028:	2b00      	cmp	r3, #0
 800202a:	d119      	bne.n	8002060 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0220 	bic.w	r2, r2, #32
 800203a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d105      	bne.n	8002060 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff f961 	bl	8001328 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002066:	e00e      	b.n	8002086 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fd85 	bl	8001b84 <HAL_ADC_ErrorCallback>
}
 800207a:	e004      	b.n	8002086 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7ff f8eb 	bl	8001278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2240      	movs	r2, #64	@ 0x40
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f043 0204 	orr.w	r2, r3, #4
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff fd5a 	bl	8001b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	@ (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	@ (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff3e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff31 	bl	800213c <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e014      	b.n	8002336 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fe79 	bl	8001014 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0a2      	b.n	80024a2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	795b      	ldrb	r3, [r3, #5]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_DAC_Start_DMA+0x28>
 8002364:	2302      	movs	r3, #2
 8002366:	e09c      	b.n	80024a2 <HAL_DAC_Start_DMA+0x162>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2202      	movs	r2, #2
 8002372:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d129      	bne.n	80023ce <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4a4b      	ldr	r2, [pc, #300]	@ (80024ac <HAL_DAC_Start_DMA+0x16c>)
 8002380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_DAC_Start_DMA+0x170>)
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a49      	ldr	r2, [pc, #292]	@ (80024b4 <HAL_DAC_Start_DMA+0x174>)
 8002390:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023a0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DAC_Start_DMA+0x70>
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d005      	beq.n	80023ba <HAL_DAC_Start_DMA+0x7a>
 80023ae:	e009      	b.n	80023c4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3308      	adds	r3, #8
 80023b6:	613b      	str	r3, [r7, #16]
        break;
 80023b8:	e033      	b.n	8002422 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330c      	adds	r3, #12
 80023c0:	613b      	str	r3, [r7, #16]
        break;
 80023c2:	e02e      	b.n	8002422 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3310      	adds	r3, #16
 80023ca:	613b      	str	r3, [r7, #16]
        break;
 80023cc:	e029      	b.n	8002422 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a39      	ldr	r2, [pc, #228]	@ (80024b8 <HAL_DAC_Start_DMA+0x178>)
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4a38      	ldr	r2, [pc, #224]	@ (80024bc <HAL_DAC_Start_DMA+0x17c>)
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a37      	ldr	r2, [pc, #220]	@ (80024c0 <HAL_DAC_Start_DMA+0x180>)
 80023e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DAC_Start_DMA+0xc4>
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d005      	beq.n	800240e <HAL_DAC_Start_DMA+0xce>
 8002402:	e009      	b.n	8002418 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3314      	adds	r3, #20
 800240a:	613b      	str	r3, [r7, #16]
        break;
 800240c:	e009      	b.n	8002422 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3318      	adds	r3, #24
 8002414:	613b      	str	r3, [r7, #16]
        break;
 8002416:	e004      	b.n	8002422 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	331c      	adds	r3, #28
 800241e:	613b      	str	r3, [r7, #16]
        break;
 8002420:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002436:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6898      	ldr	r0, [r3, #8]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	f000 f9ef 	bl	8002824 <HAL_DMA_Start_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
 800244a:	e010      	b.n	800246e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800245a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68d8      	ldr	r0, [r3, #12]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	f000 f9dd 	bl	8002824 <HAL_DMA_Start_IT>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e005      	b.n	80024a0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	080025b3 	.word	0x080025b3
 80024b0:	080025d5 	.word	0x080025d5
 80024b4:	080025f1 	.word	0x080025f1
 80024b8:	0800265b 	.word	0x0800265b
 80024bc:	0800267d 	.word	0x0800267d
 80024c0:	08002699 	.word	0x08002699

080024c4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_DAC_ConfigChannel+0x1c>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e042      	b.n	80025a6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	795b      	ldrb	r3, [r3, #5]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_DAC_ConfigChannel+0x2c>
 8002528:	2302      	movs	r3, #2
 800252a:	e03c      	b.n	80025a6 <HAL_DAC_ConfigChannel+0xa6>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2202      	movs	r2, #2
 8002536:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	22c0      	movs	r2, #192	@ 0xc0
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff ff7f 	bl	80024c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	711a      	strb	r2, [r3, #4]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff ff78 	bl	80024d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff ff6e 	bl	80024ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	711a      	strb	r2, [r3, #4]
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff ffd8 	bl	800261e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	711a      	strb	r2, [r3, #4]
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff ffd1 	bl	8002632 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ffc7 	bl	8002646 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	711a      	strb	r2, [r3, #4]
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff f8f6 	bl	80018c4 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e099      	b.n	8002818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002704:	e00f      	b.n	8002726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002706:	f7ff f8dd 	bl	80018c4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d908      	bls.n	8002726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e078      	b.n	8002818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e8      	bne.n	8002706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <HAL_DMA_Init+0x158>)
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	2b04      	cmp	r3, #4
 800277e:	d107      	bne.n	8002790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	4313      	orrs	r3, r2
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0307 	bic.w	r3, r3, #7
 80027a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d117      	bne.n	80027ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa6f 	bl	8002cb0 <DMA_CheckFifoParam>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2240      	movs	r2, #64	@ 0x40
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027e6:	2301      	movs	r3, #1
 80027e8:	e016      	b.n	8002818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa26 	bl	8002c44 <DMA_CalcBaseAndBitshift>
 80027f8:	4603      	mov	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	223f      	movs	r2, #63	@ 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	f010803f 	.word	0xf010803f

08002824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_DMA_Start_IT+0x26>
 8002846:	2302      	movs	r3, #2
 8002848:	e040      	b.n	80028cc <HAL_DMA_Start_IT+0xa8>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12f      	bne.n	80028be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f9b8 	bl	8002be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	223f      	movs	r2, #63	@ 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0216 	orr.w	r2, r2, #22
 8002892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0208 	orr.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e005      	b.n	80028ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b1c <HAL_DMA_IRQHandler+0x248>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b20 <HAL_DMA_IRQHandler+0x24c>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	2208      	movs	r2, #8
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2208      	movs	r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	2204      	movs	r2, #4
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2204      	movs	r2, #4
 800299a:	409a      	lsls	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	2210      	movs	r2, #16
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d043      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03c      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	2210      	movs	r2, #16
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d024      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e01f      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
 8002a14:	e016      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0208 	bic.w	r2, r2, #8
 8002a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	2220      	movs	r2, #32
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 808f 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8087 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d136      	bne.n	8002aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0216 	bic.w	r2, r2, #22
 8002a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_DMA_IRQHandler+0x1da>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	223f      	movs	r2, #63	@ 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d07e      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
        }
        return;
 8002aea:	e079      	b.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
 8002b18:	e02c      	b.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e01e      	b.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d032      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d307      	bcc.n	8002bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f2      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x2cc>
 8002bba:	e000      	b.n	8002bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002be0:	bf00      	nop
    }
  }
}
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b40      	cmp	r3, #64	@ 0x40
 8002c14:	d108      	bne.n	8002c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c26:	e007      	b.n	8002c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3b10      	subs	r3, #16
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <DMA_CalcBaseAndBitshift+0x68>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d909      	bls.n	8002c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	1d1a      	adds	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c84:	e007      	b.n	8002c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	aaaaaaab 	.word	0xaaaaaaab
 8002cac:	080040e0 	.word	0x080040e0

08002cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11f      	bne.n	8002d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d856      	bhi.n	8002d7e <DMA_CheckFifoParam+0xce>
 8002cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <DMA_CheckFifoParam+0x28>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002ce9 	.word	0x08002ce9
 8002ce4:	08002d7f 	.word	0x08002d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d046      	beq.n	8002d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf8:	e043      	b.n	8002d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d02:	d140      	bne.n	8002d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e03d      	b.n	8002d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d12:	d121      	bne.n	8002d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d837      	bhi.n	8002d8a <DMA_CheckFifoParam+0xda>
 8002d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <DMA_CheckFifoParam+0x70>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d37 	.word	0x08002d37
 8002d28:	08002d31 	.word	0x08002d31
 8002d2c:	08002d49 	.word	0x08002d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e030      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d025      	beq.n	8002d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d46:	e022      	b.n	8002d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d50:	d11f      	bne.n	8002d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d56:	e01c      	b.n	8002d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d903      	bls.n	8002d66 <DMA_CheckFifoParam+0xb6>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d64:	e018      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6a:	e015      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e00b      	b.n	8002d96 <DMA_CheckFifoParam+0xe6>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e00a      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e008      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e006      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e004      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
    }
  } 
  
  return status; 
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e16b      	b.n	800309c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 815a 	bne.w	8003096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80b4 	beq.w	8003096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b60      	ldr	r3, [pc, #384]	@ (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	4a5f      	ldr	r2, [pc, #380]	@ (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80030b8 <HAL_GPIO_Init+0x310>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a52      	ldr	r2, [pc, #328]	@ (80030bc <HAL_GPIO_Init+0x314>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02b      	beq.n	8002fce <HAL_GPIO_Init+0x226>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a51      	ldr	r2, [pc, #324]	@ (80030c0 <HAL_GPIO_Init+0x318>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d025      	beq.n	8002fca <HAL_GPIO_Init+0x222>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a50      	ldr	r2, [pc, #320]	@ (80030c4 <HAL_GPIO_Init+0x31c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <HAL_GPIO_Init+0x21e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4f      	ldr	r2, [pc, #316]	@ (80030c8 <HAL_GPIO_Init+0x320>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d019      	beq.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4e      	ldr	r2, [pc, #312]	@ (80030cc <HAL_GPIO_Init+0x324>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0x216>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4d      	ldr	r2, [pc, #308]	@ (80030d0 <HAL_GPIO_Init+0x328>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_Init+0x212>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80030d4 <HAL_GPIO_Init+0x32c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80030d8 <HAL_GPIO_Init+0x330>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_Init+0x20a>
 8002fae:	2307      	movs	r3, #7
 8002fb0:	e00e      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	e00c      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e00a      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fba:	2305      	movs	r3, #5
 8002fbc:	e008      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e004      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e002      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f002 0203 	and.w	r2, r2, #3
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	4093      	lsls	r3, r2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe0:	4935      	ldr	r1, [pc, #212]	@ (80030b8 <HAL_GPIO_Init+0x310>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a32      	ldr	r2, [pc, #200]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <HAL_GPIO_Init+0x334>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a27      	ldr	r2, [pc, #156]	@ (80030dc <HAL_GPIO_Init+0x334>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003042:	4b26      	ldr	r3, [pc, #152]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003066:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_GPIO_Init+0x334>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <HAL_GPIO_Init+0x334>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f67f ae90 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e267      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d075      	beq.n	800321e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003132:	4b88      	ldr	r3, [pc, #544]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d00c      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b85      	ldr	r3, [pc, #532]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003146:	2b08      	cmp	r3, #8
 8003148:	d112      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b82      	ldr	r3, [pc, #520]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4b7e      	ldr	r3, [pc, #504]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05b      	beq.n	800321c <HAL_RCC_OscConfig+0x108>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d157      	bne.n	800321c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e242      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x74>
 800317a:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b70      	ldr	r3, [pc, #448]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6f      	ldr	r2, [pc, #444]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b6d      	ldr	r3, [pc, #436]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 80031ac:	4b69      	ldr	r3, [pc, #420]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a68      	ldr	r2, [pc, #416]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b66      	ldr	r3, [pc, #408]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fb7a 	bl	80018c4 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fb76 	bl	80018c4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e207      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fb66 	bl	80018c4 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fb62 	bl	80018c4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1f3      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b51      	ldr	r3, [pc, #324]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0xe8>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800322a:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b44      	ldr	r3, [pc, #272]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1c7      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4937      	ldr	r1, [pc, #220]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <HAL_RCC_OscConfig+0x244>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fb1b 	bl	80018c4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe fb17 	bl	80018c4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1a8      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b28      	ldr	r3, [pc, #160]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4925      	ldr	r1, [pc, #148]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b24      	ldr	r3, [pc, #144]	@ (8003358 <HAL_RCC_OscConfig+0x244>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fafa 	bl	80018c4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe faf6 	bl	80018c4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e187      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d036      	beq.n	800336c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <HAL_RCC_OscConfig+0x248>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fada 	bl	80018c4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003314:	f7fe fad6 	bl	80018c4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e167      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_OscConfig+0x240>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x200>
 8003332:	e01b      	b.n	800336c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003334:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_OscConfig+0x248>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fac3 	bl	80018c4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e00e      	b.n	8003360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fabf 	bl	80018c4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d907      	bls.n	8003360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e150      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
 800335c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b88      	ldr	r3, [pc, #544]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ea      	bne.n	8003342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8097 	beq.w	80034a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b81      	ldr	r3, [pc, #516]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b7d      	ldr	r3, [pc, #500]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a7c      	ldr	r2, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b7a      	ldr	r3, [pc, #488]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b77      	ldr	r3, [pc, #476]	@ (8003588 <HAL_RCC_OscConfig+0x474>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d118      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b74      	ldr	r3, [pc, #464]	@ (8003588 <HAL_RCC_OscConfig+0x474>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a73      	ldr	r2, [pc, #460]	@ (8003588 <HAL_RCC_OscConfig+0x474>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fa7f 	bl	80018c4 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fe fa7b 	bl	80018c4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e10c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCC_OscConfig+0x474>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x2ea>
 80033f0:	4b64      	ldr	r3, [pc, #400]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a63      	ldr	r2, [pc, #396]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fc:	e01c      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x30c>
 8003406:	4b5f      	ldr	r3, [pc, #380]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340a:	4a5e      	ldr	r2, [pc, #376]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	@ 0x70
 8003412:	4b5c      	ldr	r3, [pc, #368]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	4a5b      	ldr	r2, [pc, #364]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	@ 0x70
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 8003420:	4b58      	ldr	r3, [pc, #352]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a57      	ldr	r2, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
 800342c:	4b55      	ldr	r3, [pc, #340]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	4a54      	ldr	r2, [pc, #336]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe fa40 	bl	80018c4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe fa3c 	bl	80018c4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0cb      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ee      	beq.n	8003448 <HAL_RCC_OscConfig+0x334>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7fe fa2a 	bl	80018c4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fa26 	bl	80018c4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0b5      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ee      	bne.n	8003474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	4a38      	ldr	r2, [pc, #224]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a1 	beq.w	80035f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d05c      	beq.n	8003578 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d141      	bne.n	800354a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b31      	ldr	r3, [pc, #196]	@ (800358c <HAL_RCC_OscConfig+0x478>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe f9fa 	bl	80018c4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe f9f6 	bl	80018c4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e087      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	491b      	ldr	r1, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x478>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe f9cf 	bl	80018c4 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe f9cb 	bl	80018c4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e05c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x416>
 8003548:	e054      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_RCC_OscConfig+0x478>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe f9b8 	bl	80018c4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe f9b4 	bl	80018c4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e045      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_OscConfig+0x470>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x444>
 8003576:	e03d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e038      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_RCC_OscConfig+0x4ec>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d028      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0cc      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b68      	ldr	r3, [pc, #416]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d90c      	bls.n	8003640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b65      	ldr	r3, [pc, #404]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a58      	ldr	r2, [pc, #352]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a52      	ldr	r2, [pc, #328]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800367a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d044      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d119      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e067      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b37      	ldr	r3, [pc, #220]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4934      	ldr	r1, [pc, #208]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f8e6 	bl	80018c4 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe f8e2 	bl	80018c4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e04f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d20c      	bcs.n	800374c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f846 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00
 80037c0:	40023800 	.word	0x40023800
 80037c4:	080040d0 	.word	0x080040d0
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b094      	sub	sp, #80	@ 0x50
 80037d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4b79      	ldr	r3, [pc, #484]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	f200 80e1 	bhi.w	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x3a>
 8003802:	e0db      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003808:	e0db      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b73      	ldr	r3, [pc, #460]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800380c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800380e:	e0d8      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b6f      	ldr	r3, [pc, #444]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003818:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b6d      	ldr	r3, [pc, #436]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003830:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
 800383a:	2300      	movs	r3, #0
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
 800383e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003854:	0150      	lsls	r0, r2, #5
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4621      	mov	r1, r4
 800385c:	1a51      	subs	r1, r2, r1
 800385e:	6139      	str	r1, [r7, #16]
 8003860:	4629      	mov	r1, r5
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003874:	4659      	mov	r1, fp
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800387e:	4651      	mov	r1, sl
 8003880:	018a      	lsls	r2, r1, #6
 8003882:	4651      	mov	r1, sl
 8003884:	ebb2 0801 	subs.w	r8, r2, r1
 8003888:	4659      	mov	r1, fp
 800388a:	eb63 0901 	sbc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	eb18 0303 	adds.w	r3, r8, r3
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	462b      	mov	r3, r5
 80038b0:	eb49 0303 	adc.w	r3, r9, r3
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038c2:	4629      	mov	r1, r5
 80038c4:	024b      	lsls	r3, r1, #9
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038cc:	4621      	mov	r1, r4
 80038ce:	024a      	lsls	r2, r1, #9
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e0:	f7fd f890 	bl	8000a04 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ec:	e058      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	4b38      	ldr	r3, [pc, #224]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	2200      	movs	r2, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	4611      	mov	r1, r2
 80038fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
 8003904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	0159      	lsls	r1, r3, #5
 8003916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800391a:	0150      	lsls	r0, r2, #5
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4641      	mov	r1, r8
 8003922:	ebb2 0a01 	subs.w	sl, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb63 0b01 	sbc.w	fp, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800393c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003940:	ebb2 040a 	subs.w	r4, r2, sl
 8003944:	eb63 050b 	sbc.w	r5, r3, fp
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	00eb      	lsls	r3, r5, #3
 8003952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003956:	00e2      	lsls	r2, r4, #3
 8003958:	4614      	mov	r4, r2
 800395a:	461d      	mov	r5, r3
 800395c:	4643      	mov	r3, r8
 800395e:	18e3      	adds	r3, r4, r3
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	464b      	mov	r3, r9
 8003964:	eb45 0303 	adc.w	r3, r5, r3
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003976:	4629      	mov	r1, r5
 8003978:	028b      	lsls	r3, r1, #10
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003980:	4621      	mov	r1, r4
 8003982:	028a      	lsls	r2, r1, #10
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003994:	f7fd f836 	bl	8000a04 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3750      	adds	r7, #80	@ 0x50
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	007a1200 	.word	0x007a1200

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e041      	b.n	8003a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd feae 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f95e 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e046      	b.n	8003b22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <HAL_TIM_Base_Start+0xb4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <HAL_TIM_Base_Start+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <HAL_TIM_Base_Start+0xbc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <HAL_TIM_Base_Start+0xc0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <HAL_TIM_Base_Start+0xc4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_TIM_Base_Start+0xc8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_TIM_Base_Start+0xcc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_ConfigClockSource+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0b4      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x186>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba0:	d03e      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba6:	f200 8087 	bhi.w	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bae:	f000 8086 	beq.w	8003cbe <HAL_TIM_ConfigClockSource+0x172>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	d87f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d01a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bbc:	2b70      	cmp	r3, #112	@ 0x70
 8003bbe:	d87b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d050      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc4:	2b60      	cmp	r3, #96	@ 0x60
 8003bc6:	d877      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d03c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0xfa>
 8003bcc:	2b50      	cmp	r3, #80	@ 0x50
 8003bce:	d873      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d058      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d86f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d064      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b30      	cmp	r3, #48	@ 0x30
 8003bde:	d86b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d060      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d867      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05c      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d05a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	e062      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	f000 f991 	bl	8003f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	609a      	str	r2, [r3, #8]
      break;
 8003c1e:	e04f      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	f000 f97a 	bl	8003f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c42:	609a      	str	r2, [r3, #8]
      break;
 8003c44:	e03c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	461a      	mov	r2, r3
 8003c54:	f000 f8ee 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2150      	movs	r1, #80	@ 0x50
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f947 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c64:	e02c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c72:	461a      	mov	r2, r3
 8003c74:	f000 f90d 	bl	8003e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2160      	movs	r1, #96	@ 0x60
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f937 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c84:	e01c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 f8ce 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2140      	movs	r1, #64	@ 0x40
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f927 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f000 f91e 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a46      	ldr	r2, [pc, #280]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a43      	ldr	r2, [pc, #268]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3c:	d027      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d023      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2e      	ldr	r2, [pc, #184]	@ (8003e1c <TIM_Base_SetConfig+0x140>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	@ (8003e20 <TIM_Base_SetConfig+0x144>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <TIM_Base_SetConfig+0x148>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <TIM_Base_SetConfig+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <TIM_Base_SetConfig+0x150>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <TIM_Base_SetConfig+0x154>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 030a 	bic.w	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 0210 	bic.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 0307 	orr.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e05a      	b.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fcc:	d01d      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10c      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <memset>:
 8004060:	4402      	add	r2, r0
 8004062:	4603      	mov	r3, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <__libc_init_array>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4d0d      	ldr	r5, [pc, #52]	@ (80040a8 <__libc_init_array+0x38>)
 8004074:	4c0d      	ldr	r4, [pc, #52]	@ (80040ac <__libc_init_array+0x3c>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	2600      	movs	r6, #0
 800407c:	42a6      	cmp	r6, r4
 800407e:	d109      	bne.n	8004094 <__libc_init_array+0x24>
 8004080:	4d0b      	ldr	r5, [pc, #44]	@ (80040b0 <__libc_init_array+0x40>)
 8004082:	4c0c      	ldr	r4, [pc, #48]	@ (80040b4 <__libc_init_array+0x44>)
 8004084:	f000 f818 	bl	80040b8 <_init>
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	2600      	movs	r6, #0
 800408e:	42a6      	cmp	r6, r4
 8004090:	d105      	bne.n	800409e <__libc_init_array+0x2e>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	f855 3b04 	ldr.w	r3, [r5], #4
 8004098:	4798      	blx	r3
 800409a:	3601      	adds	r6, #1
 800409c:	e7ee      	b.n	800407c <__libc_init_array+0xc>
 800409e:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a2:	4798      	blx	r3
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7f2      	b.n	800408e <__libc_init_array+0x1e>
 80040a8:	080040f0 	.word	0x080040f0
 80040ac:	080040f0 	.word	0x080040f0
 80040b0:	080040f0 	.word	0x080040f0
 80040b4:	080040f4 	.word	0x080040f4

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
