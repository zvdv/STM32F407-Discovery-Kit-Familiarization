
mic_headphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080070a4  080070a4  000080a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  0000945c  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00008114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  0000945c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000045c  20000000  08007124  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000945c  2**0
                  CONTENTS
 10 .bss          000007d8  2000045c  2000045c  0000945c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c34  20000c34  0000945c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfd4  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284c  00000000  00000000  00015460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00017cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000849  00000000  00000000  000187b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002107d  00000000  00000000  00018ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001146f  00000000  00000000  0003a076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1bfe  00000000  00000000  0004b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0010d0e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e20  00000000  00000000  0010d1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0010ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000045c 	.word	0x2000045c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800708c 	.word	0x0800708c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000460 	.word	0x20000460
 80001c4:	0800708c 	.word	0x0800708c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <write_register>:
extern I2S_HandleTypeDef hi2s3;


// Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004c4:	4a09      	ldr	r2, [pc, #36]	@ (80004ec <write_register+0x34>)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <write_register+0x34>)
 80004d0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004d2:	2364      	movs	r3, #100	@ 0x64
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2302      	movs	r3, #2
 80004d8:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <write_register+0x34>)
 80004da:	2194      	movs	r1, #148	@ 0x94
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <write_register+0x38>)
 80004de:	f001 ff95 	bl	800240c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000478 	.word	0x20000478
 80004f0:	2000047c 	.word	0x2000047c

080004f4 <read_register>:

// Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <read_register+0x3c>)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000506:	2364      	movs	r3, #100	@ 0x64
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <read_register+0x3c>)
 800050e:	2194      	movs	r1, #148	@ 0x94
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <read_register+0x40>)
 8000512:	f001 ff7b 	bl	800240c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000516:	2364      	movs	r3, #100	@ 0x64
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	2194      	movs	r1, #148	@ 0x94
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <read_register+0x40>)
 8000522:	f002 f871 	bl	8002608 <HAL_I2C_Master_Receive>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000478 	.word	0x20000478
 8000534:	2000047c 	.word	0x2000047c

08000538 <CS43_Pin_RST_Init>:

// Reset pin initialization
void CS43_Pin_RST_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIODEN;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <CS43_Pin_RST_Init+0x34>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <CS43_Pin_RST_Init+0x34>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOD->MODER|=GPIO_MODER_MODE4_0;
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <CS43_Pin_RST_Init+0x38>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a08      	ldr	r2, [pc, #32]	@ (8000570 <CS43_Pin_RST_Init+0x38>)
 800054e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000552:	6013      	str	r3, [r2, #0]
	GPIOD->MODER&=~GPIO_MODER_MODE4_1;
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <CS43_Pin_RST_Init+0x38>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <CS43_Pin_RST_Init+0x38>)
 800055a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020c00 	.word	0x40020c00

08000574 <CS43_Init>:

// Initialization
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000574:	b084      	sub	sp, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
 800057a:	f107 0c08 	add.w	ip, r7, #8
 800057e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000582:	4b81      	ldr	r3, [pc, #516]	@ (8000788 <CS43_Init+0x214>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800058a:	4b7f      	ldr	r3, [pc, #508]	@ (8000788 <CS43_Init+0x214>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	4b7d      	ldr	r3, [pc, #500]	@ (8000788 <CS43_Init+0x214>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000598:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2110      	movs	r1, #16
 800059e:	487b      	ldr	r0, [pc, #492]	@ (800078c <CS43_Init+0x218>)
 80005a0:	f001 fdd6 	bl	8002150 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 80005a4:	4b7a      	ldr	r3, [pc, #488]	@ (8000790 <CS43_Init+0x21c>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2254      	movs	r2, #84	@ 0x54
 80005ae:	4619      	mov	r1, r3
 80005b0:	f006 f970 	bl	8006894 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 80005b4:	4b77      	ldr	r3, [pc, #476]	@ (8000794 <CS43_Init+0x220>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 80005ba:	4976      	ldr	r1, [pc, #472]	@ (8000794 <CS43_Init+0x220>)
 80005bc:	2002      	movs	r0, #2
 80005be:	f7ff ff7b 	bl	80004b8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80005c2:	4b74      	ldr	r3, [pc, #464]	@ (8000794 <CS43_Init+0x220>)
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005c8:	4b72      	ldr	r3, [pc, #456]	@ (8000794 <CS43_Init+0x220>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	f043 0320 	orr.w	r3, r3, #32
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b70      	ldr	r3, [pc, #448]	@ (8000794 <CS43_Init+0x220>)
 80005d4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000794 <CS43_Init+0x220>)
 80005d8:	785b      	ldrb	r3, [r3, #1]
 80005da:	f043 030c 	orr.w	r3, r3, #12
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <CS43_Init+0x220>)
 80005e2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005e4:	4b6b      	ldr	r3, [pc, #428]	@ (8000794 <CS43_Init+0x220>)
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	f043 0303 	orr.w	r3, r3, #3
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b69      	ldr	r3, [pc, #420]	@ (8000794 <CS43_Init+0x220>)
 80005f0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005f2:	4969      	ldr	r1, [pc, #420]	@ (8000798 <CS43_Init+0x224>)
 80005f4:	2004      	movs	r0, #4
 80005f6:	f7ff ff5f 	bl	80004b8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005fa:	4b66      	ldr	r3, [pc, #408]	@ (8000794 <CS43_Init+0x220>)
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000600:	4965      	ldr	r1, [pc, #404]	@ (8000798 <CS43_Init+0x224>)
 8000602:	2005      	movs	r0, #5
 8000604:	f7ff ff58 	bl	80004b8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000608:	4962      	ldr	r1, [pc, #392]	@ (8000794 <CS43_Init+0x220>)
 800060a:	2006      	movs	r0, #6
 800060c:	f7ff ff72 	bl	80004f4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000610:	4b60      	ldr	r3, [pc, #384]	@ (8000794 <CS43_Init+0x220>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b5e      	ldr	r3, [pc, #376]	@ (8000794 <CS43_Init+0x220>)
 800061c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 800061e:	4b5d      	ldr	r3, [pc, #372]	@ (8000794 <CS43_Init+0x220>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b5a      	ldr	r3, [pc, #360]	@ (8000794 <CS43_Init+0x220>)
 800062a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 800062c:	4b59      	ldr	r3, [pc, #356]	@ (8000794 <CS43_Init+0x220>)
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b57      	ldr	r3, [pc, #348]	@ (8000794 <CS43_Init+0x220>)
 8000638:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800063a:	4b56      	ldr	r3, [pc, #344]	@ (8000794 <CS43_Init+0x220>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	f023 0310 	bic.w	r3, r3, #16
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b53      	ldr	r3, [pc, #332]	@ (8000794 <CS43_Init+0x220>)
 8000646:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000648:	4b52      	ldr	r3, [pc, #328]	@ (8000794 <CS43_Init+0x220>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f023 0304 	bic.w	r3, r3, #4
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b50      	ldr	r3, [pc, #320]	@ (8000794 <CS43_Init+0x220>)
 8000654:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000656:	4b4f      	ldr	r3, [pc, #316]	@ (8000794 <CS43_Init+0x220>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b4c      	ldr	r3, [pc, #304]	@ (8000794 <CS43_Init+0x220>)
 8000662:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000664:	4b4b      	ldr	r3, [pc, #300]	@ (8000794 <CS43_Init+0x220>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	f043 0303 	orr.w	r3, r3, #3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b49      	ldr	r3, [pc, #292]	@ (8000794 <CS43_Init+0x220>)
 8000670:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000672:	4949      	ldr	r1, [pc, #292]	@ (8000798 <CS43_Init+0x224>)
 8000674:	2006      	movs	r0, #6
 8000676:	f7ff ff1f 	bl	80004b8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800067a:	4947      	ldr	r1, [pc, #284]	@ (8000798 <CS43_Init+0x224>)
 800067c:	2008      	movs	r0, #8
 800067e:	f7ff ff39 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000682:	4b44      	ldr	r3, [pc, #272]	@ (8000794 <CS43_Init+0x220>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b41      	ldr	r3, [pc, #260]	@ (8000794 <CS43_Init+0x220>)
 800068e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000690:	4b40      	ldr	r3, [pc, #256]	@ (8000794 <CS43_Init+0x220>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <CS43_Init+0x220>)
 800069c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800069e:	493e      	ldr	r1, [pc, #248]	@ (8000798 <CS43_Init+0x224>)
 80006a0:	2008      	movs	r0, #8
 80006a2:	f7ff ff09 	bl	80004b8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80006a6:	493c      	ldr	r1, [pc, #240]	@ (8000798 <CS43_Init+0x224>)
 80006a8:	2009      	movs	r0, #9
 80006aa:	f7ff ff23 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006ae:	4b39      	ldr	r3, [pc, #228]	@ (8000794 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f023 030f 	bic.w	r3, r3, #15
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80006bc:	4b35      	ldr	r3, [pc, #212]	@ (8000794 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006ca:	4933      	ldr	r1, [pc, #204]	@ (8000798 <CS43_Init+0x224>)
 80006cc:	2009      	movs	r0, #9
 80006ce:	f7ff fef3 	bl	80004b8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006d2:	4931      	ldr	r1, [pc, #196]	@ (8000798 <CS43_Init+0x224>)
 80006d4:	200e      	movs	r0, #14
 80006d6:	f7ff ff0d 	bl	80004f4 <read_register>
	if(outputMode == MODE_ANLG)
 80006da:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d123      	bne.n	800072a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <CS43_Init+0x220>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <CS43_Init+0x220>)
 80006ee:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <CS43_Init+0x220>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <CS43_Init+0x220>)
 80006fc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <CS43_Init+0x220>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	f023 0320 	bic.w	r3, r3, #32
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <CS43_Init+0x220>)
 800070a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <CS43_Init+0x220>)
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	f023 0310 	bic.w	r3, r3, #16
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <CS43_Init+0x220>)
 8000718:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take effect immediately
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <CS43_Init+0x220>)
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	f023 0308 	bic.w	r3, r3, #8
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <CS43_Init+0x220>)
 8000726:	705a      	strb	r2, [r3, #1]
 8000728:	e006      	b.n	8000738 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 800072a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d102      	bne.n	8000738 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <CS43_Init+0x220>)
 8000734:	2202      	movs	r2, #2
 8000736:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000738:	4917      	ldr	r1, [pc, #92]	@ (8000798 <CS43_Init+0x224>)
 800073a:	200e      	movs	r0, #14
 800073c:	f7ff febc 	bl	80004b8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000740:	4915      	ldr	r1, [pc, #84]	@ (8000798 <CS43_Init+0x224>)
 8000742:	200f      	movs	r0, #15
 8000744:	f7ff fed6 	bl	80004f4 <read_register>
	iData[1] = 0x00;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <CS43_Init+0x220>)
 800074a:	2200      	movs	r2, #0
 800074c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800074e:	4912      	ldr	r1, [pc, #72]	@ (8000798 <CS43_Init+0x224>)
 8000750:	200f      	movs	r0, #15
 8000752:	f7ff feb1 	bl	80004b8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <CS43_Init+0x220>)
 8000758:	2200      	movs	r2, #0
 800075a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800075c:	490e      	ldr	r1, [pc, #56]	@ (8000798 <CS43_Init+0x224>)
 800075e:	2014      	movs	r0, #20
 8000760:	f7ff feaa 	bl	80004b8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000764:	490c      	ldr	r1, [pc, #48]	@ (8000798 <CS43_Init+0x224>)
 8000766:	2015      	movs	r0, #21
 8000768:	f7ff fea6 	bl	80004b8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800076c:	490a      	ldr	r1, [pc, #40]	@ (8000798 <CS43_Init+0x224>)
 800076e:	201a      	movs	r0, #26
 8000770:	f7ff fea2 	bl	80004b8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000774:	4908      	ldr	r1, [pc, #32]	@ (8000798 <CS43_Init+0x224>)
 8000776:	201b      	movs	r0, #27
 8000778:	f7ff fe9e 	bl	80004b8 <write_register>
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr
 8000788:	20000574 	.word	0x20000574
 800078c:	40020c00 	.word	0x40020c00
 8000790:	2000047c 	.word	0x2000047c
 8000794:	20000478 	.word	0x20000478
 8000798:	20000479 	.word	0x20000479

0800079c <CS43_Enable_RightLeft>:

// Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	switch (side)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d837      	bhi.n	800081c <CS43_Enable_RightLeft+0x80>
 80007ac:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <CS43_Enable_RightLeft+0x18>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	08000807 	.word	0x08000807
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007c6:	22c0      	movs	r2, #192	@ 0xc0
 80007c8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007d6:	705a      	strb	r2, [r3, #1]
			break;
 80007d8:	e021      	b.n	800081e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007ec:	705a      	strb	r2, [r3, #1]
			break;
 80007ee:	e016      	b.n	800081e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007f2:	22c0      	movs	r2, #192	@ 0xc0
 80007f4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 8000802:	705a      	strb	r2, [r3, #1]
			break;
 8000804:	e00b      	b.n	800081e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 8000818:	705a      	strb	r2, [r3, #1]
			break;
 800081a:	e000      	b.n	800081e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800081c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	f043 030c 	orr.w	r3, r3, #12
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 800082a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	f043 0303 	orr.w	r3, r3, #3
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	@ (800084c <CS43_Enable_RightLeft+0xb0>)
 8000838:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800083a:	4905      	ldr	r1, [pc, #20]	@ (8000850 <CS43_Enable_RightLeft+0xb4>)
 800083c:	2004      	movs	r0, #4
 800083e:	f7ff fe3b 	bl	80004b8 <write_register>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000478 	.word	0x20000478
 8000850:	20000479 	.word	0x20000479

08000854 <CS43_SetVolume>:

// Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3b32      	subs	r3, #50	@ 0x32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <CS43_SetVolume+0x78>)
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000878:	4915      	ldr	r1, [pc, #84]	@ (80008d0 <CS43_SetVolume+0x7c>)
 800087a:	2014      	movs	r0, #20
 800087c:	f7ff fe1c 	bl	80004b8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000880:	4913      	ldr	r1, [pc, #76]	@ (80008d0 <CS43_SetVolume+0x7c>)
 8000882:	2015      	movs	r0, #21
 8000884:	f7ff fe18 	bl	80004b8 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b64      	cmp	r3, #100	@ 0x64
 800088c:	d80e      	bhi.n	80008ac <CS43_SetVolume+0x58>
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <CS43_SetVolume+0x80>)
 800089a:	fb82 1203 	smull	r1, r2, r2, r3
 800089e:	1152      	asrs	r2, r2, #5
 80008a0:	17db      	asrs	r3, r3, #31
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3b18      	subs	r3, #24
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	e000      	b.n	80008ae <CS43_SetVolume+0x5a>
 80008ac:	2318      	movs	r3, #24
 80008ae:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <CS43_SetVolume+0x78>)
 80008b0:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008b2:	4907      	ldr	r1, [pc, #28]	@ (80008d0 <CS43_SetVolume+0x7c>)
 80008b4:	2020      	movs	r0, #32
 80008b6:	f7ff fdff 	bl	80004b8 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008ba:	4905      	ldr	r1, [pc, #20]	@ (80008d0 <CS43_SetVolume+0x7c>)
 80008bc:	2021      	movs	r0, #33	@ 0x21
 80008be:	f7ff fdfb 	bl	80004b8 <write_register>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000478 	.word	0x20000478
 80008d0:	20000479 	.word	0x20000479
 80008d4:	51eb851f 	.word	0x51eb851f

080008d8 <CS43_Start>:

// Start the Audio DAC
void CS43_Start(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <CS43_Start+0x7c>)
 80008de:	2299      	movs	r2, #153	@ 0x99
 80008e0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008e2:	491d      	ldr	r1, [pc, #116]	@ (8000958 <CS43_Start+0x80>)
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fde7 	bl	80004b8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <CS43_Start+0x7c>)
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008f0:	4919      	ldr	r1, [pc, #100]	@ (8000958 <CS43_Start+0x80>)
 80008f2:	2047      	movs	r0, #71	@ 0x47
 80008f4:	f7ff fde0 	bl	80004b8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008f8:	4917      	ldr	r1, [pc, #92]	@ (8000958 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	@ 0x32
 80008fc:	f7ff fdfa 	bl	80004f4 <read_register>
	iData[1] |= 0x80;
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <CS43_Start+0x7c>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <CS43_Start+0x7c>)
 800090c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800090e:	4912      	ldr	r1, [pc, #72]	@ (8000958 <CS43_Start+0x80>)
 8000910:	2032      	movs	r0, #50	@ 0x32
 8000912:	f7ff fdd1 	bl	80004b8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000916:	4910      	ldr	r1, [pc, #64]	@ (8000958 <CS43_Start+0x80>)
 8000918:	2032      	movs	r0, #50	@ 0x32
 800091a:	f7ff fdeb 	bl	80004f4 <read_register>
	iData[1] &= ~(0x80);
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <CS43_Start+0x7c>)
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <CS43_Start+0x7c>)
 800092a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800092c:	490a      	ldr	r1, [pc, #40]	@ (8000958 <CS43_Start+0x80>)
 800092e:	2032      	movs	r0, #50	@ 0x32
 8000930:	f7ff fdc2 	bl	80004b8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <CS43_Start+0x7c>)
 8000936:	2200      	movs	r2, #0
 8000938:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800093a:	4907      	ldr	r1, [pc, #28]	@ (8000958 <CS43_Start+0x80>)
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdbb 	bl	80004b8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000942:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <CS43_Start+0x7c>)
 8000944:	229e      	movs	r2, #158	@ 0x9e
 8000946:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	4903      	ldr	r1, [pc, #12]	@ (8000958 <CS43_Start+0x80>)
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fdb4 	bl	80004b8 <write_register>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000478 	.word	0x20000478
 8000958:	20000479 	.word	0x20000479

0800095c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_CRC_Init+0x20>)
 8000962:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <MX_CRC_Init+0x24>)
 8000964:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_CRC_Init+0x20>)
 8000968:	f000 fec9 	bl	80016fe <HAL_CRC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000972:	f000 fc93 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200004d0 	.word	0x200004d0
 8000980:	40023000 	.word	0x40023000

08000984 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <HAL_CRC_MspInit+0x3c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10d      	bne.n	80009b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_CRC_MspInit+0x40>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a09      	ldr	r2, [pc, #36]	@ (80009c4 <HAL_CRC_MspInit+0x40>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <HAL_CRC_MspInit+0x40>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023000 	.word	0x40023000
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_DMA_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <MX_DMA_Init+0x4c>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <MX_DMA_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200e      	movs	r0, #14
 80009f0:	f000 fe4f 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009f4:	200e      	movs	r0, #14
 80009f6:	f000 fe68 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2010      	movs	r0, #16
 8000a00:	f000 fe47 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a04:	2010      	movs	r0, #16
 8000a06:	f000 fe60 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a2d      	ldr	r2, [pc, #180]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a26      	ldr	r2, [pc, #152]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin
 8000aba:	2200      	movs	r2, #0
 8000abc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <MX_GPIO_Init+0xd8>)
 8000ac2:	f001 fb45 	bl	8002150 <HAL_GPIO_WritePin>
                          |CS43L22_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GreenLED_Pin OrangeLED_Pin RedLED_Pin BlueLED_Pin
                           CS43L22_RESET_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|OrangeLED_Pin|RedLED_Pin|BlueLED_Pin
 8000ac6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aca:	617b      	str	r3, [r7, #20]
                          |CS43L22_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_GPIO_Init+0xd8>)
 8000ae0:	f001 f99a 	bl	8001e18 <HAL_GPIO_Init>

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 fb27 	bl	8002184 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fbae 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200004d8 	.word	0x200004d8
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <HAL_I2C_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b8e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <HAL_I2C_MspInit+0x8c>)
 8000bac:	f001 f934 	bl	8001e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000be6:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <MX_I2S2_Init+0x58>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c06:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c0a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_I2S2_Init+0x54>)
 8000c20:	f002 faaa 	bl	8003178 <HAL_I2S_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c2a:	f000 fb37 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000052c 	.word	0x2000052c
 8000c38:	40003800 	.word	0x40003800

08000c3c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <MX_I2S3_Init+0x58>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c60:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c64:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c68:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_I2S3_Init+0x54>)
 8000c7e:	f002 fa7b 	bl	8003178 <HAL_I2S_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c88:	f000 fb08 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000574 	.word	0x20000574
 8000c94:	40003c00 	.word	0x40003c00

08000c98 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	@ 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a81      	ldr	r2, [pc, #516]	@ (8000ebc <HAL_I2S_MspInit+0x224>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d17b      	bne.n	8000db2 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b80      	ldr	r3, [pc, #512]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a7f      	ldr	r2, [pc, #508]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b7d      	ldr	r3, [pc, #500]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b79      	ldr	r3, [pc, #484]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a78      	ldr	r2, [pc, #480]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b76      	ldr	r3, [pc, #472]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b72      	ldr	r3, [pc, #456]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a71      	ldr	r2, [pc, #452]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4866      	ldr	r0, [pc, #408]	@ (8000ec4 <HAL_I2S_MspInit+0x22c>)
 8000d2a:	f001 f875 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d40:	2305      	movs	r3, #5
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	485f      	ldr	r0, [pc, #380]	@ (8000ec8 <HAL_I2S_MspInit+0x230>)
 8000d4c:	f001 f864 	bl	8001e18 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000d50:	4b5e      	ldr	r3, [pc, #376]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d52:	4a5f      	ldr	r2, [pc, #380]	@ (8000ed0 <HAL_I2S_MspInit+0x238>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d70:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d76:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	4b54      	ldr	r3, [pc, #336]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000d80:	4b52      	ldr	r3, [pc, #328]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b50      	ldr	r3, [pc, #320]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000d94:	484d      	ldr	r0, [pc, #308]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000d96:	f000 fccf 	bl	8001738 <HAL_DMA_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8000da0:	f000 fa7c 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000da8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000daa:	4a48      	ldr	r2, [pc, #288]	@ (8000ecc <HAL_I2S_MspInit+0x234>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000db0:	e07f      	b.n	8000eb2 <HAL_I2S_MspInit+0x21a>
  else if(i2sHandle->Instance==SPI3)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a47      	ldr	r2, [pc, #284]	@ (8000ed4 <HAL_I2S_MspInit+0x23c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d17a      	bne.n	8000eb2 <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4b38      	ldr	r3, [pc, #224]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a37      	ldr	r2, [pc, #220]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de8:	4b35      	ldr	r3, [pc, #212]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a30      	ldr	r2, [pc, #192]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <HAL_I2S_MspInit+0x228>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e10:	2310      	movs	r3, #16
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e20:	2306      	movs	r3, #6
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482b      	ldr	r0, [pc, #172]	@ (8000ed8 <HAL_I2S_MspInit+0x240>)
 8000e2c:	f000 fff4 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000e30:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e42:	2306      	movs	r3, #6
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <HAL_I2S_MspInit+0x22c>)
 8000e4e:	f000 ffe3 	bl	8001e18 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000e52:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e54:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <HAL_I2S_MspInit+0x248>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e60:	2240      	movs	r2, #64	@ 0x40
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e96:	4811      	ldr	r0, [pc, #68]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000e98:	f000 fc4e 	bl	8001738 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 8000ea2:	f000 f9fb 	bl	800129c <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eac:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <HAL_I2S_MspInit+0x244>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	@ 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	200005bc 	.word	0x200005bc
 8000ed0:	40026058 	.word	0x40026058
 8000ed4:	40003c00 	.word	0x40003c00
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	2000061c 	.word	0x2000061c
 8000ee0:	40026088 	.word	0x40026088

08000ee4 <FifoWrite>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void FifoWrite(uint16_t data) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	fifobuf[fifo_w_ptr] = data;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <FifoWrite+0x30>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <FifoWrite+0x34>)
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	fifo_w_ptr++;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <FifoWrite+0x30>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <FifoWrite+0x30>)
 8000f06:	701a      	strb	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000aa0 	.word	0x20000aa0
 8000f18:	200008a0 	.word	0x200008a0

08000f1c <FifoRead>:

uint16_t FifoRead() {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	uint16_t val = fifobuf[fifo_r_ptr];
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <FifoRead+0x30>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <FifoRead+0x34>)
 8000f2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f2e:	80fb      	strh	r3, [r7, #6]
	fifo_r_ptr++;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <FifoRead+0x30>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <FifoRead+0x30>)
 8000f3a:	701a      	strb	r2, [r3, #0]
	return val;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000aa1 	.word	0x20000aa1
 8000f50:	200008a0 	.word	0x200008a0

08000f54 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	txstate = 1;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000089c 	.word	0x2000089c

08000f74 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	txstate = 2;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <HAL_I2S_TxCpltCallback+0x1c>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	701a      	strb	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000089c 	.word	0x2000089c

08000f94 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000089d 	.word	0x2000089d

08000fb4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <HAL_I2S_RxCpltCallback+0x1c>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000089d 	.word	0x2000089d

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b099      	sub	sp, #100	@ 0x64
 8000fd8:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 fa0d 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f8d7 	bl	8001190 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fe2:	f000 f93f 	bl	8001264 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f7ff fd17 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fea:	f7ff fced 	bl	80009c8 <MX_DMA_Init>
  MX_CRC_Init();
 8000fee:	f7ff fcb5 	bl	800095c <MX_CRC_Init>
  MX_I2S2_Init();
 8000ff2:	f7ff fdf5 	bl	8000be0 <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8000ff6:	f003 fcf1 	bl	80049dc <MX_PDM2PCM_Init>
  MX_I2S3_Init();
 8000ffa:	f7ff fe1f 	bl	8000c3c <MX_I2S3_Init>
  MX_I2C1_Init();
 8000ffe:	f7ff fd79 	bl	8000af4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CS43_Pin_RST_Init();
 8001002:	f7ff fa99 	bl	8000538 <CS43_Pin_RST_Init>
  CS43_Init(hi2c1, MODE_I2S);
 8001006:	4c55      	ldr	r4, [pc, #340]	@ (800115c <main+0x188>)
 8001008:	2300      	movs	r3, #0
 800100a:	9311      	str	r3, [sp, #68]	@ 0x44
 800100c:	4668      	mov	r0, sp
 800100e:	f104 0310 	add.w	r3, r4, #16
 8001012:	2244      	movs	r2, #68	@ 0x44
 8001014:	4619      	mov	r1, r3
 8001016:	f005 fc3d 	bl	8006894 <memcpy>
 800101a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800101e:	f7ff faa9 	bl	8000574 <CS43_Init>
  CS43_SetVolume(40); // 0 - 40
 8001022:	2028      	movs	r0, #40	@ 0x28
 8001024:	f7ff fc16 	bl	8000854 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001028:	2003      	movs	r0, #3
 800102a:	f7ff fbb7 	bl	800079c <CS43_Enable_RightLeft>
  CS43_Start();
 800102e:	f7ff fc53 	bl	80008d8 <CS43_Start>

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *) txBuf, 2*N);
 8001032:	2240      	movs	r2, #64	@ 0x40
 8001034:	494a      	ldr	r1, [pc, #296]	@ (8001160 <main+0x18c>)
 8001036:	484b      	ldr	r0, [pc, #300]	@ (8001164 <main+0x190>)
 8001038:	f002 f9de 	bl	80033f8 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) pdmRxBuf, 2*N);
 800103c:	2240      	movs	r2, #64	@ 0x40
 800103e:	494a      	ldr	r1, [pc, #296]	@ (8001168 <main+0x194>)
 8001040:	484a      	ldr	r0, [pc, #296]	@ (800116c <main+0x198>)
 8001042:	f002 fa7d 	bl	8003540 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (rxstate==1) {
 8001046:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <main+0x19c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d122      	bne.n	8001094 <main+0xc0>
		 PDM_Filter(&pdmRxBuf[0],&MidBuffer[0], &PDM1_filter_handler);
 800104e:	4a49      	ldr	r2, [pc, #292]	@ (8001174 <main+0x1a0>)
 8001050:	4949      	ldr	r1, [pc, #292]	@ (8001178 <main+0x1a4>)
 8001052:	4845      	ldr	r0, [pc, #276]	@ (8001168 <main+0x194>)
 8001054:	f005 fbd2 	bl	80067fc <PDM_Filter>
		 for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e009      	b.n	8001072 <main+0x9e>
 800105e:	4a46      	ldr	r2, [pc, #280]	@ (8001178 <main+0x1a4>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff3c 	bl	8000ee4 <FifoWrite>
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	ddf2      	ble.n	800105e <main+0x8a>
		 if (fifo_w_ptr-fifo_r_ptr > 4*N) fifo_read_enabled=1;
 8001078:	4b40      	ldr	r3, [pc, #256]	@ (800117c <main+0x1a8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <main+0x1ac>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b80      	cmp	r3, #128	@ 0x80
 8001086:	dd02      	ble.n	800108e <main+0xba>
 8001088:	4b3e      	ldr	r3, [pc, #248]	@ (8001184 <main+0x1b0>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		 rxstate=0;
 800108e:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <main+0x19c>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
	  }
	  if (rxstate==2) {
 8001094:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <main+0x19c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d117      	bne.n	80010cc <main+0xf8>
		 PDM_Filter(&pdmRxBuf[2*N],&MidBuffer[0], &PDM1_filter_handler);
 800109c:	4a35      	ldr	r2, [pc, #212]	@ (8001174 <main+0x1a0>)
 800109e:	4936      	ldr	r1, [pc, #216]	@ (8001178 <main+0x1a4>)
 80010a0:	4839      	ldr	r0, [pc, #228]	@ (8001188 <main+0x1b4>)
 80010a2:	f005 fbab 	bl	80067fc <PDM_Filter>
		 for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	e009      	b.n	80010c0 <main+0xec>
 80010ac:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <main+0x1a4>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff15 	bl	8000ee4 <FifoWrite>
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3301      	adds	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	ddf2      	ble.n	80010ac <main+0xd8>
		 rxstate=0;
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <main+0x19c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	  }
	  if (txstate==1) {
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <main+0x1b8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d11e      	bne.n	8001112 <main+0x13e>
		 if (fifo_read_enabled==1) {
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <main+0x1b0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d117      	bne.n	800110c <main+0x138>
			for (int i=0; i<2*N;i=i+4) {
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e011      	b.n	8001106 <main+0x132>
				uint16_t data = FifoRead();
 80010e2:	f7ff ff1b 	bl	8000f1c <FifoRead>
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
				txBuf[i] = data;
 80010ea:	491d      	ldr	r1, [pc, #116]	@ (8001160 <main+0x18c>)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	88fa      	ldrh	r2, [r7, #6]
 80010f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				txBuf[i+2] = data;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3302      	adds	r3, #2
 80010f8:	4919      	ldr	r1, [pc, #100]	@ (8001160 <main+0x18c>)
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i=0; i<2*N;i=i+4) {
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3304      	adds	r3, #4
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b3f      	cmp	r3, #63	@ 0x3f
 800110a:	ddea      	ble.n	80010e2 <main+0x10e>
			}
		 }
		 txstate=0;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <main+0x1b8>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	  }
	  if (txstate==2) {
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <main+0x1b8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d195      	bne.n	8001046 <main+0x72>
		 if (fifo_read_enabled==1) {
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <main+0x1b0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d117      	bne.n	8001152 <main+0x17e>
			 for (int i=2*N; i<4*N;i=i+4) {
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e011      	b.n	800114c <main+0x178>
				uint16_t data = FifoRead();
 8001128:	f7ff fef8 	bl	8000f1c <FifoRead>
 800112c:	4603      	mov	r3, r0
 800112e:	80bb      	strh	r3, [r7, #4]
				txBuf[i] = data;
 8001130:	490b      	ldr	r1, [pc, #44]	@ (8001160 <main+0x18c>)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	88ba      	ldrh	r2, [r7, #4]
 8001136:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				txBuf[i+2] = data;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3302      	adds	r3, #2
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <main+0x18c>)
 8001140:	88ba      	ldrh	r2, [r7, #4]
 8001142:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			 for (int i=2*N; i<4*N;i=i+4) {
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	3304      	adds	r3, #4
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001150:	ddea      	ble.n	8001128 <main+0x154>
			 }
		 }
		 txstate=0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <main+0x1b8>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	  if (rxstate==1) {
 8001158:	e775      	b.n	8001046 <main+0x72>
 800115a:	bf00      	nop
 800115c:	200004d8 	.word	0x200004d8
 8001160:	2000067c 	.word	0x2000067c
 8001164:	20000574 	.word	0x20000574
 8001168:	2000077c 	.word	0x2000077c
 800116c:	2000052c 	.word	0x2000052c
 8001170:	2000089d 	.word	0x2000089d
 8001174:	20000aa8 	.word	0x20000aa8
 8001178:	2000087c 	.word	0x2000087c
 800117c:	20000aa0 	.word	0x20000aa0
 8001180:	20000aa1 	.word	0x20000aa1
 8001184:	20000aa2 	.word	0x20000aa2
 8001188:	200007fc 	.word	0x200007fc
 800118c:	2000089c 	.word	0x2000089c

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	@ 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fb46 	bl	8006830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a27      	ldr	r2, [pc, #156]	@ (800125c <SystemClock_Config+0xcc>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <SystemClock_Config+0xd0>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f6:	2302      	movs	r3, #2
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001204:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800120e:	2307      	movs	r3, #7
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fe1a 	bl	8003e50 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001222:	f000 f83b 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001232:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2105      	movs	r1, #5
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f87b 	bl	8004340 <HAL_RCC_ClockConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001250:	f000 f824 	bl	800129c <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3750      	adds	r7, #80	@ 0x50
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001276:	2301      	movs	r3, #1
 8001278:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800127a:	23c0      	movs	r3, #192	@ 0xc0
 800127c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fa67 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001290:	f000 f804 	bl	800129c <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e6:	2007      	movs	r0, #7
 80012e8:	f000 f9c8 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f8a5 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Stream3_IRQHandler+0x10>)
 800135e:	f000 faf1 	bl	8001944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200005bc 	.word	0x200005bc

0800136c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <DMA1_Stream5_IRQHandler+0x10>)
 8001372:	f000 fae7 	bl	8001944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000061c 	.word	0x2000061c

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a8:	f7ff ffea 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f005 fa3b 	bl	800684c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fdfd 	bl	8000fd4 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 80013e8:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 80013ec:	2000045c 	.word	0x2000045c
  ldr r4, =_ebss
 80013f0:	20000c34 	.word	0x20000c34

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f92b 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff ff3c 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f943 	bl	80016e6 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f90b 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000aa4 	.word	0x20000aa4

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000aa4 	.word	0x20000aa4

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	@ (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	@ (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	@ 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00e      	b.n	800172e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	795b      	ldrb	r3, [r3, #5]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f92f 	bl	8000984 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff febe 	bl	80014c4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e099      	b.n	8001888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001774:	e00f      	b.n	8001796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001776:	f7ff fea5 	bl	80014c4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b05      	cmp	r3, #5
 8001782:	d908      	bls.n	8001796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e078      	b.n	8001888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e8      	bne.n	8001776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4b38      	ldr	r3, [pc, #224]	@ (8001890 <HAL_DMA_Init+0x158>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	4313      	orrs	r3, r2
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f023 0307 	bic.w	r3, r3, #7
 8001816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	2b04      	cmp	r3, #4
 8001828:	d117      	bne.n	800185a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fa6f 	bl	8001d20 <DMA_CheckFifoParam>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2240      	movs	r2, #64	@ 0x40
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001856:	2301      	movs	r3, #1
 8001858:	e016      	b.n	8001888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fa26 	bl	8001cb4 <DMA_CalcBaseAndBitshift>
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	223f      	movs	r2, #63	@ 0x3f
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	f010803f 	.word	0xf010803f

08001894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_DMA_Start_IT+0x26>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e040      	b.n	800193c <HAL_DMA_Start_IT+0xa8>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d12f      	bne.n	800192e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f9b8 	bl	8001c58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	223f      	movs	r2, #63	@ 0x3f
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0216 	orr.w	r2, r2, #22
 8001902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0208 	orr.w	r2, r2, #8
 800191a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e005      	b.n	800193a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001950:	4b8e      	ldr	r3, [pc, #568]	@ (8001b8c <HAL_DMA_IRQHandler+0x248>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a8e      	ldr	r2, [pc, #568]	@ (8001b90 <HAL_DMA_IRQHandler+0x24c>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	2208      	movs	r2, #8
 8001970:	409a      	lsls	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01a      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	2208      	movs	r2, #8
 800199e:	409a      	lsls	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b4:	2201      	movs	r2, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	2201      	movs	r2, #1
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	f043 0202 	orr.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2204      	movs	r2, #4
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d012      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00b      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	2204      	movs	r2, #4
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	2210      	movs	r2, #16
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d043      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03c      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	2210      	movs	r2, #16
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d018      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d024      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
 8001a72:	e01f      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
 8001a84:	e016      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0208 	bic.w	r2, r2, #8
 8001aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 808f 	beq.w	8001be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8087 	beq.w	8001be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2220      	movs	r2, #32
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d136      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0216 	bic.w	r2, r2, #22
 8001afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x1da>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0208 	bic.w	r2, r2, #8
 8001b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	223f      	movs	r2, #63	@ 0x3f
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d07e      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
        }
        return;
 8001b5a:	e079      	b.n	8001c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01d      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10d      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d031      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e02c      	b.n	8001be4 <HAL_DMA_IRQHandler+0x2a0>
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d023      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
 8001ba4:	e01e      	b.n	8001be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0210 	bic.w	r2, r2, #16
 8001bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d032      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d022      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d307      	bcc.n	8001c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f2      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x2cc>
 8001c2a:	e000      	b.n	8001c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
 8001c4e:	e000      	b.n	8001c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c50:	bf00      	nop
    }
  }
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b40      	cmp	r3, #64	@ 0x40
 8001c84:	d108      	bne.n	8001c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c96:	e007      	b.n	8001ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3b10      	subs	r3, #16
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <DMA_CalcBaseAndBitshift+0x64>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <DMA_CalcBaseAndBitshift+0x68>)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d909      	bls.n	8001cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cf4:	e007      	b.n	8001d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	aaaaaaab 	.word	0xaaaaaaab
 8001d1c:	080070bc 	.word	0x080070bc

08001d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11f      	bne.n	8001d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d856      	bhi.n	8001dee <DMA_CheckFifoParam+0xce>
 8001d40:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <DMA_CheckFifoParam+0x28>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d6b 	.word	0x08001d6b
 8001d50:	08001d59 	.word	0x08001d59
 8001d54:	08001def 	.word	0x08001def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d046      	beq.n	8001df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d68:	e043      	b.n	8001df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d72:	d140      	bne.n	8001df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d78:	e03d      	b.n	8001df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d82:	d121      	bne.n	8001dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d837      	bhi.n	8001dfa <DMA_CheckFifoParam+0xda>
 8001d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <DMA_CheckFifoParam+0x70>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001da7 	.word	0x08001da7
 8001d98:	08001da1 	.word	0x08001da1
 8001d9c:	08001db9 	.word	0x08001db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      break;
 8001da4:	e030      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d025      	beq.n	8001dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db6:	e022      	b.n	8001dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dc0:	d11f      	bne.n	8001e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dc6:	e01c      	b.n	8001e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d903      	bls.n	8001dd6 <DMA_CheckFifoParam+0xb6>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d003      	beq.n	8001ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dd4:	e018      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dda:	e015      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00e      	beq.n	8001e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      break;
 8001dec:	e00b      	b.n	8001e06 <DMA_CheckFifoParam+0xe6>
      break;
 8001dee:	bf00      	nop
 8001df0:	e00a      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001df2:	bf00      	nop
 8001df4:	e008      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
 8001df8:	e006      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e004      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
    }
  } 
  
  return status; 
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e16b      	b.n	800210c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 815a 	bne.w	8002106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d005      	beq.n	8001e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d130      	bne.n	8001ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d017      	beq.n	8001f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80b4 	beq.w	8002106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <HAL_GPIO_Init+0x30c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002124 <HAL_GPIO_Init+0x30c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <HAL_GPIO_Init+0x30c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a5b      	ldr	r2, [pc, #364]	@ (8002128 <HAL_GPIO_Init+0x310>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_GPIO_Init+0x314>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	@ (8002130 <HAL_GPIO_Init+0x318>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a50      	ldr	r2, [pc, #320]	@ (8002134 <HAL_GPIO_Init+0x31c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8002138 <HAL_GPIO_Init+0x320>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4e      	ldr	r2, [pc, #312]	@ (800213c <HAL_GPIO_Init+0x324>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x216>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4d      	ldr	r2, [pc, #308]	@ (8002140 <HAL_GPIO_Init+0x328>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x212>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4c      	ldr	r2, [pc, #304]	@ (8002144 <HAL_GPIO_Init+0x32c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4b      	ldr	r2, [pc, #300]	@ (8002148 <HAL_GPIO_Init+0x330>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x20a>
 800201e:	2307      	movs	r3, #7
 8002020:	e00e      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002022:	2308      	movs	r3, #8
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002026:	2306      	movs	r3, #6
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203e:	2300      	movs	r3, #0
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002050:	4935      	ldr	r1, [pc, #212]	@ (8002128 <HAL_GPIO_Init+0x310>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_GPIO_Init+0x334>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002082:	4a32      	ldr	r2, [pc, #200]	@ (800214c <HAL_GPIO_Init+0x334>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002088:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_GPIO_Init+0x334>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ac:	4a27      	ldr	r2, [pc, #156]	@ (800214c <HAL_GPIO_Init+0x334>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <HAL_GPIO_Init+0x334>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d6:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_GPIO_Init+0x334>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_GPIO_Init+0x334>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002100:	4a12      	ldr	r2, [pc, #72]	@ (800214c <HAL_GPIO_Init+0x334>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	f67f ae90 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400
 8002134:	40020800 	.word	0x40020800
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021000 	.word	0x40021000
 8002140:	40021400 	.word	0x40021400
 8002144:	40021800 	.word	0x40021800
 8002148:	40021c00 	.word	0x40021c00
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e12b      	b.n	80023ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fcd0 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2224      	movs	r2, #36	@ 0x24
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e8:	f002 faa2 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a81      	ldr	r2, [pc, #516]	@ (80023f8 <HAL_I2C_Init+0x274>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d807      	bhi.n	8002208 <HAL_I2C_Init+0x84>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a80      	ldr	r2, [pc, #512]	@ (80023fc <HAL_I2C_Init+0x278>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e006      	b.n	8002216 <HAL_I2C_Init+0x92>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a7d      	ldr	r2, [pc, #500]	@ (8002400 <HAL_I2C_Init+0x27c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0e7      	b.n	80023ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a78      	ldr	r2, [pc, #480]	@ (8002404 <HAL_I2C_Init+0x280>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a6a      	ldr	r2, [pc, #424]	@ (80023f8 <HAL_I2C_Init+0x274>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d802      	bhi.n	8002258 <HAL_I2C_Init+0xd4>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	e009      	b.n	800226c <HAL_I2C_Init+0xe8>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a69      	ldr	r2, [pc, #420]	@ (8002408 <HAL_I2C_Init+0x284>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	3301      	adds	r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	430b      	orrs	r3, r1
 8002272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800227e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	495c      	ldr	r1, [pc, #368]	@ (80023f8 <HAL_I2C_Init+0x274>)
 8002288:	428b      	cmp	r3, r1
 800228a:	d819      	bhi.n	80022c0 <HAL_I2C_Init+0x13c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e59      	subs	r1, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fbb1 f3f3 	udiv	r3, r1, r3
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_I2C_Init+0x138>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e59      	subs	r1, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	e051      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 80022bc:	2304      	movs	r3, #4
 80022be:	e04f      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_I2C_Init+0x168>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e012      	b.n	8002312 <HAL_I2C_Init+0x18e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x196>
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_I2C_Init+0x1bc>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	fbb0 f3f3 	udiv	r3, r0, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6809      	ldr	r1, [r1, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800238e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6911      	ldr	r1, [r2, #16]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	003d08ff 	.word	0x003d08ff
 8002404:	431bde83 	.word	0x431bde83
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	461a      	mov	r2, r3
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	4613      	mov	r3, r2
 800241e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff f850 	bl	80014c4 <HAL_GetTick>
 8002424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b20      	cmp	r3, #32
 8002430:	f040 80e0 	bne.w	80025f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2319      	movs	r3, #25
 800243a:	2201      	movs	r2, #1
 800243c:	4970      	ldr	r1, [pc, #448]	@ (8002600 <HAL_I2C_Master_Transmit+0x1f4>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fc64 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	e0d3      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2C_Master_Transmit+0x50>
 8002458:	2302      	movs	r3, #2
 800245a:	e0cc      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d007      	beq.n	8002482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2221      	movs	r2, #33	@ 0x21
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2210      	movs	r2, #16
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	893a      	ldrh	r2, [r7, #8]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <HAL_I2C_Master_Transmit+0x1f8>)
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 face 	bl	8002a6c <I2C_MasterRequestWrite>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e08d      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024f0:	e066      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fd22 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b04      	cmp	r3, #4
 8002508:	d107      	bne.n	800251a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11b      	bne.n	8002594 <HAL_I2C_Master_Transmit+0x188>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6a39      	ldr	r1, [r7, #32]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fd19 	bl	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d194      	bne.n	80024f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	00100002 	.word	0x00100002
 8002604:	ffff0000 	.word	0xffff0000

08002608 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	@ 0x30
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	460b      	mov	r3, r1
 8002616:	817b      	strh	r3, [r7, #10]
 8002618:	4613      	mov	r3, r2
 800261a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7fe ff52 	bl	80014c4 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	f040 8217 	bne.w	8002a5e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2319      	movs	r3, #25
 8002636:	2201      	movs	r2, #1
 8002638:	497c      	ldr	r1, [pc, #496]	@ (800282c <HAL_I2C_Master_Receive+0x224>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fb66 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	e20a      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_I2C_Master_Receive+0x50>
 8002654:	2302      	movs	r3, #2
 8002656:	e203      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d007      	beq.n	800267e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2222      	movs	r2, #34	@ 0x22
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2210      	movs	r2, #16
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002830 <HAL_I2C_Master_Receive+0x228>)
 80026be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fa52 	bl	8002b70 <I2C_MasterRequestRead>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1c4      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e198      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	2b01      	cmp	r3, #1
 800270c:	d11b      	bne.n	8002746 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e178      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	2b02      	cmp	r3, #2
 800274c:	d11b      	bne.n	8002786 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800276c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	e158      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027ac:	e144      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	f200 80f1 	bhi.w	800299a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d123      	bne.n	8002808 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fc4b 	bl	8003060 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e145      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002806:	e117      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280c:	2b02      	cmp	r3, #2
 800280e:	d14e      	bne.n	80028ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	2200      	movs	r2, #0
 8002818:	4906      	ldr	r1, [pc, #24]	@ (8002834 <HAL_I2C_Master_Receive+0x22c>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa76 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e11a      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000
 8002834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028ac:	e0c4      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	496c      	ldr	r1, [pc, #432]	@ (8002a68 <HAL_I2C_Master_Receive+0x460>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fa27 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cb      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	4955      	ldr	r1, [pc, #340]	@ (8002a68 <HAL_I2C_Master_Receive+0x460>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f9f9 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e09d      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002998:	e04e      	b.n	8002a38 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fb5e 	bl	8003060 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e058      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d124      	bne.n	8002a38 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f aeb6 	bne.w	80027ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	@ 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010004 	.word	0x00010004

08002a6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d006      	beq.n	8002a96 <I2C_MasterRequestWrite+0x2a>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d003      	beq.n	8002a96 <I2C_MasterRequestWrite+0x2a>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00b      	b.n	8002ac0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	2b12      	cmp	r3, #18
 8002aae:	d107      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002abe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f91d 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00d      	beq.n	8002af4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae6:	d103      	bne.n	8002af0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e035      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	e01b      	b.n	8002b48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b10:	897b      	ldrh	r3, [r7, #10]
 8002b12:	11db      	asrs	r3, r3, #7
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0306 	and.w	r3, r3, #6
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 030f 	orn	r3, r3, #15
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	490e      	ldr	r1, [pc, #56]	@ (8002b68 <I2C_MasterRequestWrite+0xfc>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f966 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e010      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4907      	ldr	r1, [pc, #28]	@ (8002b6c <I2C_MasterRequestWrite+0x100>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f956 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00010008 	.word	0x00010008
 8002b6c:	00010002 	.word	0x00010002

08002b70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d006      	beq.n	8002baa <I2C_MasterRequestRead+0x3a>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d003      	beq.n	8002baa <I2C_MasterRequestRead+0x3a>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ba8:	d108      	bne.n	8002bbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e00b      	b.n	8002bd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	2b11      	cmp	r3, #17
 8002bc2:	d107      	bne.n	8002bd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f893 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfa:	d103      	bne.n	8002c04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e079      	b.n	8002cfc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c10:	d108      	bne.n	8002c24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e05f      	b.n	8002ce4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c24:	897b      	ldrh	r3, [r7, #10]
 8002c26:	11db      	asrs	r3, r3, #7
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0306 	and.w	r3, r3, #6
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f063 030f 	orn	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4930      	ldr	r1, [pc, #192]	@ (8002d04 <I2C_MasterRequestRead+0x194>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8dc 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e054      	b.n	8002cfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4929      	ldr	r1, [pc, #164]	@ (8002d08 <I2C_MasterRequestRead+0x198>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8cc 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e044      	b.n	8002cfc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f831 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cbe:	d103      	bne.n	8002cc8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e017      	b.n	8002cfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ccc:	897b      	ldrh	r3, [r7, #10]
 8002cce:	11db      	asrs	r3, r3, #7
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0306 	and.w	r3, r3, #6
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f063 030e 	orn	r3, r3, #14
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <I2C_MasterRequestRead+0x198>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f888 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	00010008 	.word	0x00010008
 8002d08:	00010002 	.word	0x00010002

08002d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1c:	e048      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d044      	beq.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fbcd 	bl	80014c4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d139      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	e00c      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d116      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e023      	b.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10d      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	e00c      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d093      	beq.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0e:	e071      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1e:	d123      	bne.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e067      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d041      	beq.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e70:	f7fe fb28 	bl	80014c4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d302      	bcc.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d136      	bne.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10c      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e00b      	b.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e021      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10c      	bne.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e00b      	b.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f47f af6d 	bne.w	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8e3 	bl	800311a <I2C_IsAcknowledgeFailed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e034      	b.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d028      	beq.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe faad 	bl	80014c4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11d      	bne.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b80      	cmp	r3, #128	@ 0x80
 8002f88:	d016      	beq.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b80      	cmp	r3, #128	@ 0x80
 8002fc4:	d1c3      	bne.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f89b 	bl	800311a <I2C_IsAcknowledgeFailed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e034      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d028      	beq.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe fa65 	bl	80014c4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d016      	beq.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d1c3      	bne.n	8002fde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800306c:	e049      	b.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d119      	bne.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0210 	mvn.w	r2, #16
 8003084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e030      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fa08 	bl	80014c4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11d      	bne.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d016      	beq.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d1ae      	bne.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003130:	d11b      	bne.n	800316a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800313a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f043 0204 	orr.w	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e128      	b.n	80033dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a90      	ldr	r2, [pc, #576]	@ (80033e4 <HAL_I2S_Init+0x26c>)
 80031a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fd fd77 	bl	8000c98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80031c0:	f023 030f 	bic.w	r3, r3, #15
 80031c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2202      	movs	r2, #2
 80031cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d060      	beq.n	8003298 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031de:	2310      	movs	r3, #16
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e001      	b.n	80031e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d802      	bhi.n	80031f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f001 fb90 	bl	800491c <HAL_RCCEx_GetPeriphCLKFreq>
 80031fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003206:	d125      	bne.n	8003254 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	fbb2 f2f3 	udiv	r2, r2, r3
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	3305      	adds	r3, #5
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e01f      	b.n	8003272 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	3305      	adds	r3, #5
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e00e      	b.n	8003272 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	3305      	adds	r3, #5
 8003270:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4a5c      	ldr	r2, [pc, #368]	@ (80033e8 <HAL_I2S_Init+0x270>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e003      	b.n	80032a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003298:	2302      	movs	r3, #2
 800329a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d902      	bls.n	80032ac <HAL_I2S_Init+0x134>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2bff      	cmp	r3, #255	@ 0xff
 80032aa:	d907      	bls.n	80032bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e08f      	b.n	80033dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032da:	f023 030f 	bic.w	r3, r3, #15
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6851      	ldr	r1, [r2, #4]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68d2      	ldr	r2, [r2, #12]
 80032ec:	4311      	orrs	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6992      	ldr	r2, [r2, #24]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d161      	bne.n	80033cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a38      	ldr	r2, [pc, #224]	@ (80033ec <HAL_I2S_Init+0x274>)
 800330c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a37      	ldr	r2, [pc, #220]	@ (80033f0 <HAL_I2S_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x1a4>
 8003318:	4b36      	ldr	r3, [pc, #216]	@ (80033f4 <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x1a8>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4932      	ldr	r1, [pc, #200]	@ (80033f0 <HAL_I2S_Init+0x278>)
 8003328:	428a      	cmp	r2, r1
 800332a:	d101      	bne.n	8003330 <HAL_I2S_Init+0x1b8>
 800332c:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <HAL_I2S_Init+0x27c>)
 800332e:	e001      	b.n	8003334 <HAL_I2S_Init+0x1bc>
 8003330:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003334:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003338:	f023 030f 	bic.w	r3, r3, #15
 800333c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_I2S_Init+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_I2S_Init+0x1d4>
 8003348:	4b2a      	ldr	r3, [pc, #168]	@ (80033f4 <HAL_I2S_Init+0x27c>)
 800334a:	e001      	b.n	8003350 <HAL_I2S_Init+0x1d8>
 800334c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003350:	2202      	movs	r2, #2
 8003352:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a25      	ldr	r2, [pc, #148]	@ (80033f0 <HAL_I2S_Init+0x278>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_I2S_Init+0x1ea>
 800335e:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <HAL_I2S_Init+0x27c>)
 8003360:	e001      	b.n	8003366 <HAL_I2S_Init+0x1ee>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003372:	d003      	beq.n	800337c <HAL_I2S_Init+0x204>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800337c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e001      	b.n	8003388 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003392:	4313      	orrs	r3, r2
 8003394:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800339c:	4313      	orrs	r3, r2
 800339e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_I2S_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_I2S_Init+0x24c>
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_I2S_Init+0x27c>)
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x250>
 80033c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033c8:	897a      	ldrh	r2, [r7, #10]
 80033ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08003887 	.word	0x08003887
 80033e8:	cccccccd 	.word	0xcccccccd
 80033ec:	0800399d 	.word	0x0800399d
 80033f0:	40003800 	.word	0x40003800
 80033f4:	40003400 	.word	0x40003400

080033f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_I2S_Transmit_DMA+0x1a>
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e08a      	b.n	800352c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	e082      	b.n	800352c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2S_Transmit_DMA+0x3e>
 8003432:	2302      	movs	r3, #2
 8003434:	e07a      	b.n	800352c <HAL_I2S_Transmit_DMA+0x134>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2203      	movs	r2, #3
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d002      	beq.n	800346a <HAL_I2S_Transmit_DMA+0x72>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10a      	bne.n	8003480 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800347e:	e005      	b.n	800348c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	4a28      	ldr	r2, [pc, #160]	@ (8003534 <HAL_I2S_Transmit_DMA+0x13c>)
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <HAL_I2S_Transmit_DMA+0x140>)
 800349a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_I2S_Transmit_DMA+0x144>)
 80034a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034ac:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034b4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80034bc:	f7fe f9ea 	bl	8001894 <HAL_DMA_Start_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00f      	beq.n	80034e6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e022      	b.n	800352c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0202 	orr.w	r2, r2, #2
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d107      	bne.n	800352a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003528:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	08003707 	.word	0x08003707
 8003538:	080036c5 	.word	0x080036c5
 800353c:	08003781 	.word	0x08003781

08003540 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_I2S_Receive_DMA+0x1a>
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e09d      	b.n	800369a <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	e095      	b.n	800369a <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2S_Receive_DMA+0x3e>
 800357a:	2302      	movs	r3, #2
 800357c:	e08d      	b.n	800369a <HAL_I2S_Receive_DMA+0x15a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2204      	movs	r2, #4
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d002      	beq.n	80035b2 <HAL_I2S_Receive_DMA+0x72>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10a      	bne.n	80035c8 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80035c6:	e005      	b.n	80035d4 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	4a32      	ldr	r2, [pc, #200]	@ (80036a4 <HAL_I2S_Receive_DMA+0x164>)
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <HAL_I2S_Receive_DMA+0x168>)
 80035e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <HAL_I2S_Receive_DMA+0x16c>)
 80035ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035fa:	d10a      	bne.n	8003612 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	4619      	mov	r1, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003628:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800362a:	f7fe f933 	bl	8001894 <HAL_DMA_Start_IT>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00f      	beq.n	8003654 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003638:	f043 0208 	orr.w	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e022      	b.n	800369a <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003696:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003765 	.word	0x08003765
 80036a8:	08003723 	.word	0x08003723
 80036ac:	08003781 	.word	0x08003781

080036b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0202 	bic.w	r2, r2, #2
 80036e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fd fc3b 	bl	8000f74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7fd fc1d 	bl	8000f54 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10e      	bne.n	8003756 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7fd fc2c 	bl	8000fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7fd fc0e 	bl	8000f94 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0203 	bic.w	r2, r2, #3
 800379c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f043 0208 	orr.w	r2, r3, #8
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff76 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003810:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fbaa 	bl	8000f74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	b292      	uxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800386e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fb9b 	bl	8000fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d13a      	bne.n	8003918 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d109      	bne.n	80038c0 <I2S_IRQHandler+0x3a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d102      	bne.n	80038c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ffb4 	bl	8003828 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d126      	bne.n	8003918 <I2S_IRQHandler+0x92>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d11f      	bne.n	8003918 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fecc 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b03      	cmp	r3, #3
 8003922:	d136      	bne.n	8003992 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d109      	bne.n	8003942 <I2S_IRQHandler+0xbc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	2b80      	cmp	r3, #128	@ 0x80
 800393a:	d102      	bne.n	8003942 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff45 	bl	80037cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d122      	bne.n	8003992 <I2S_IRQHandler+0x10c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d11b      	bne.n	8003992 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003968:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fe8f 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a92      	ldr	r2, [pc, #584]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039b6:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a8b      	ldr	r2, [pc, #556]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d6:	e001      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e8:	d004      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8099 	bne.w	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f925 	bl	8003c58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9c8 	bl	8003db8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d13a      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d035      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6e      	ldr	r2, [pc, #440]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a46:	4b6e      	ldr	r3, [pc, #440]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a48:	e001      	b.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4969      	ldr	r1, [pc, #420]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a5a:	4b69      	ldr	r3, [pc, #420]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe04 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	f040 80c3 	bne.w	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80bd 	beq.w	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ace:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a49      	ldr	r2, [pc, #292]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ada:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003adc:	e001      	b.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4944      	ldr	r1, [pc, #272]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aea:	428b      	cmp	r3, r1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003aee:	4b44      	ldr	r3, [pc, #272]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003af0:	e001      	b.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003afa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fdc6 	bl	80036b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b24:	e089      	b.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d107      	bne.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8be 	bl	8003cbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8fd 	bl	8003d54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d12f      	bne.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b88:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b8a:	e001      	b.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4919      	ldr	r1, [pc, #100]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b9c:	4b18      	ldr	r3, [pc, #96]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fd76 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d136      	bne.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d031      	beq.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003be2:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be4:	e001      	b.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4902      	ldr	r1, [pc, #8]	@ (8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bf2:	428b      	cmp	r3, r1
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003bf6:	4b02      	ldr	r3, [pc, #8]	@ (8003c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf8:	e006      	b.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003bfa:	bf00      	nop
 8003bfc:	40003800 	.word	0x40003800
 8003c00:	40003400 	.word	0x40003400
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fd3c 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c38:	e000      	b.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c3a:	bf00      	nop
}
 8003c3c:	bf00      	nop
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c99      	adds	r1, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffc9 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	1c99      	adds	r1, r3, #2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003cce:	8819      	ldrh	r1, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <I2SEx_TxISR_I2SExt+0x22>
 8003cda:	4b1d      	ldr	r3, [pc, #116]	@ (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003cdc:	e001      	b.n	8003ce2 <I2SEx_TxISR_I2SExt+0x26>
 8003cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <I2SEx_TxISR_I2SExt+0x50>
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_TxISR_I2SExt+0x54>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490d      	ldr	r1, [pc, #52]	@ (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_TxISR_I2SExt+0x64>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_TxISR_I2SExt+0x68>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff81 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68d8      	ldr	r0, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	1c99      	adds	r1, r3, #2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d6c:	b282      	uxth	r2, r0
 8003d6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff4a 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <I2SEx_RxISR_I2SExt+0x16>
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003dcc:	e001      	b.n	8003dd2 <I2SEx_RxISR_I2SExt+0x1a>
 8003dce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd2:	68d8      	ldr	r0, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	1c99      	adds	r1, r3, #2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003dde:	b282      	uxth	r2, r0
 8003de0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d121      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <I2SEx_RxISR_I2SExt+0x50>
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e06:	e001      	b.n	8003e0c <I2SEx_RxISR_I2SExt+0x54>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	490d      	ldr	r1, [pc, #52]	@ (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d101      	bne.n	8003e1c <I2SEx_RxISR_I2SExt+0x64>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_RxISR_I2SExt+0x68>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff03 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd fadc 	bl	80014c4 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fad8 	bl	80014c4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fac8 	bl	80014c4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fac4 	bl	80014c4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fa7d 	bl	80014c4 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd fa79 	bl	80014c4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fa5c 	bl	80014c4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd fa58 	bl	80014c4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fa3c 	bl	80014c4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd fa38 	bl	80014c4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fd fa25 	bl	80014c4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd fa21 	bl	80014c4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd f9e1 	bl	80014c4 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd f9dd 	bl	80014c4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	@ 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd f9a2 	bl	80014c4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd f99e 	bl	80014c4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fd f98c 	bl	80014c4 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd f988 	bl	80014c4 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd f95c 	bl	80014c4 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd f958 	bl	80014c4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd f931 	bl	80014c4 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd f92d 	bl	80014c4 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd f91a 	bl	80014c4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd f916 	bl	80014c4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fd f848 	bl	80014c4 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fd f844 	bl	80014c4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	@ (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc ffa8 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	080070a4 	.word	0x080070a4
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b094      	sub	sp, #80	@ 0x50
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b79      	ldr	r3, [pc, #484]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80e1 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e0db      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b73      	ldr	r3, [pc, #460]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004544:	e0db      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b73      	ldr	r3, [pc, #460]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x208>)
 8004548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800454a:	e0d8      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	633b      	str	r3, [r7, #48]	@ 0x30
 8004576:	2300      	movs	r3, #0
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	0159      	lsls	r1, r3, #5
 800458c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004590:	0150      	lsls	r0, r2, #5
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4621      	mov	r1, r4
 8004598:	1a51      	subs	r1, r2, r1
 800459a:	6139      	str	r1, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	eb63 0301 	sbc.w	r3, r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ba:	4651      	mov	r1, sl
 80045bc:	018a      	lsls	r2, r1, #6
 80045be:	4651      	mov	r1, sl
 80045c0:	ebb2 0801 	subs.w	r8, r2, r1
 80045c4:	4659      	mov	r1, fp
 80045c6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fe:	4629      	mov	r1, r5
 8004600:	024b      	lsls	r3, r1, #9
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004608:	4621      	mov	r1, r4
 800460a:	024a      	lsls	r2, r1, #9
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461c:	f7fb fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004628:	e058      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b38      	ldr	r3, [pc, #224]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	4611      	mov	r1, r2
 8004636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	f04f 0000 	mov.w	r0, #0
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	0159      	lsls	r1, r3, #5
 8004652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004656:	0150      	lsls	r0, r2, #5
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4641      	mov	r1, r8
 800465e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004662:	4649      	mov	r1, r9
 8004664:	eb63 0b01 	sbc.w	fp, r3, r1
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800467c:	ebb2 040a 	subs.w	r4, r2, sl
 8004680:	eb63 050b 	sbc.w	r5, r3, fp
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	464b      	mov	r3, r9
 80046a0:	eb45 0303 	adc.w	r3, r5, r3
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b2:	4629      	mov	r1, r5
 80046b4:	028b      	lsls	r3, r1, #10
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046bc:	4621      	mov	r1, r4
 80046be:	028a      	lsls	r2, r1, #10
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	f7fb fd7a 	bl	80001c8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004700:	4618      	mov	r0, r3
 8004702:	3750      	adds	r7, #80	@ 0x50
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000000 	.word	0x20000000

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	@ (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	080070b4 	.word	0x080070b4

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d035      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004780:	4b62      	ldr	r3, [pc, #392]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004786:	f7fc fe9d 	bl	80014c4 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478e:	f7fc fe99 	bl	80014c4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0b0      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	019a      	lsls	r2, r3, #6
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	071b      	lsls	r3, r3, #28
 80047b8:	4955      	ldr	r1, [pc, #340]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047c0:	4b52      	ldr	r3, [pc, #328]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047c6:	f7fc fe7d 	bl	80014c4 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ce:	f7fc fe79 	bl	80014c4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e090      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8083 	beq.w	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b44      	ldr	r3, [pc, #272]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	4a43      	ldr	r2, [pc, #268]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	@ 0x40
 800480a:	4b41      	ldr	r3, [pc, #260]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004816:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3e      	ldr	r2, [pc, #248]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004822:	f7fc fe4f 	bl	80014c4 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fc fe4b 	bl	80014c4 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e062      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800483c:	4b35      	ldr	r3, [pc, #212]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004848:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004850:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d028      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004866:	4b2a      	ldr	r3, [pc, #168]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004876:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800487c:	4a24      	ldr	r2, [pc, #144]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d114      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800488e:	f7fc fe19 	bl	80014c4 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fc fe15 	bl	80014c4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e02a      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ac:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ee      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048c4:	d10d      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048c6:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048da:	490d      	ldr	r1, [pc, #52]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	4b08      	ldr	r3, [pc, #32]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fa:	4905      	ldr	r1, [pc, #20]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	42470068 	.word	0x42470068
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	42470e40 	.word	0x42470e40

0800491c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d13f      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800493a:	4b24      	ldr	r3, [pc, #144]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004950:	d12f      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004952:	4b1f      	ldr	r3, [pc, #124]	@ (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004954:	617b      	str	r3, [r7, #20]
          break;
 8004956:	e02f      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004964:	d108      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004966:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496e:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e007      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004980:	4a15      	ldr	r2, [pc, #84]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004988:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a2:	0f1b      	lsrs	r3, r3, #28
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	617b      	str	r3, [r7, #20]
          break;
 80049b0:	e002      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
          break;
 80049b6:	bf00      	nop
        }
      }
      break;
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80049ba:	bf00      	nop
    }
  }
  return frequency;
 80049bc:	697b      	ldr	r3, [r7, #20]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	00bb8000 	.word	0x00bb8000
 80049d4:	007a1200 	.word	0x007a1200
 80049d8:	00f42400 	.word	0x00f42400

080049dc <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80049e0:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80049ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 80049ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004a28 <MX_PDM2PCM_Init+0x4c>)
 80049f0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80049f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80049fe:	4809      	ldr	r0, [pc, #36]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 8004a00:	f001 fd26 	bl	8006450 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <MX_PDM2PCM_Init+0x50>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <MX_PDM2PCM_Init+0x50>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 18;
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <MX_PDM2PCM_Init+0x50>)
 8004a12:	2212      	movs	r2, #18
 8004a14:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8004a16:	4905      	ldr	r1, [pc, #20]	@ (8004a2c <MX_PDM2PCM_Init+0x50>)
 8004a18:	4802      	ldr	r0, [pc, #8]	@ (8004a24 <MX_PDM2PCM_Init+0x48>)
 8004a1a:	f001 fde9 	bl	80065f0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000aa8 	.word	0x20000aa8
 8004a28:	7d70a3d6 	.word	0x7d70a3d6
 8004a2c:	20000af4 	.word	0x20000af4

08004a30 <D16_GENERIC>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8004a38:	b089      	sub	sp, #36	@ 0x24
 8004a3a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004a3c:	6993      	ldr	r3, [r2, #24]
 8004a3e:	9406      	str	r4, [sp, #24]
 8004a40:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004a42:	9307      	str	r3, [sp, #28]
 8004a44:	9402      	str	r4, [sp, #8]
 8004a46:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8004a4a:	69d3      	ldr	r3, [r2, #28]
 8004a4c:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004a4e:	9103      	str	r1, [sp, #12]
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	d066      	beq.n	8004b22 <D16_GENERIC+0xf2>
 8004a54:	f004 0520 	and.w	r5, r4, #32
 8004a58:	f004 0410 	and.w	r4, r4, #16
 8004a5c:	9505      	str	r5, [sp, #20]
 8004a5e:	4937      	ldr	r1, [pc, #220]	@ (8004b3c <D16_GENERIC+0x10c>)
 8004a60:	9404      	str	r4, [sp, #16]
 8004a62:	f04f 0c00 	mov.w	ip, #0
 8004a66:	4635      	mov	r5, r6
 8004a68:	e04f      	b.n	8004b0a <D16_GENERIC+0xda>
 8004a6a:	5d87      	ldrb	r7, [r0, r6]
 8004a6c:	7804      	ldrb	r4, [r0, #0]
 8004a6e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004a72:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004a76:	b2e6      	uxtb	r6, r4
 8004a78:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004a7c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004a80:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004a84:	4433      	add	r3, r6
 8004a86:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004a8a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a92:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004a96:	0aa3      	lsrs	r3, r4, #10
 8004a98:	4c29      	ldr	r4, [pc, #164]	@ (8004b40 <D16_GENERIC+0x110>)
 8004a9a:	fb26 5404 	smlad	r4, r6, r4, r5
 8004a9e:	4d29      	ldr	r5, [pc, #164]	@ (8004b44 <D16_GENERIC+0x114>)
 8004aa0:	fb26 f505 	smuad	r5, r6, r5
 8004aa4:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8004aa8:	eb04 080a 	add.w	r8, r4, sl
 8004aac:	eba8 080b 	sub.w	r8, r8, fp
 8004ab0:	4646      	mov	r6, r8
 8004ab2:	17f7      	asrs	r7, r6, #31
 8004ab4:	e9cd 6700 	strd	r6, r7, [sp]
 8004ab8:	9e04      	ldr	r6, [sp, #16]
 8004aba:	f10c 0e01 	add.w	lr, ip, #1
 8004abe:	b16e      	cbz	r6, 8004adc <D16_GENERIC+0xac>
 8004ac0:	6a16      	ldr	r6, [r2, #32]
 8004ac2:	9f01      	ldr	r7, [sp, #4]
 8004ac4:	fba8 ab06 	umull	sl, fp, r8, r6
 8004ac8:	fb06 bb07 	mla	fp, r6, r7, fp
 8004acc:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8004ad0:	f14b 0900 	adc.w	r9, fp, #0
 8004ad4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004ad8:	46a3      	mov	fp, r4
 8004ada:	4654      	mov	r4, sl
 8004adc:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004ade:	9f02      	ldr	r7, [sp, #8]
 8004ae0:	0424      	lsls	r4, r4, #16
 8004ae2:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004ae6:	f04f 0900 	mov.w	r9, #0
 8004aea:	fb0c fc06 	mul.w	ip, ip, r6
 8004aee:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004af2:	9e03      	ldr	r6, [sp, #12]
 8004af4:	464f      	mov	r7, r9
 8004af6:	10bc      	asrs	r4, r7, #2
 8004af8:	f304 040f 	ssat	r4, #16, r4
 8004afc:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8004b00:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004b02:	fa1f fc8e 	uxth.w	ip, lr
 8004b06:	4564      	cmp	r4, ip
 8004b08:	d90a      	bls.n	8004b20 <D16_GENERIC+0xf0>
 8004b0a:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8004b0c:	2c01      	cmp	r4, #1
 8004b0e:	b2e6      	uxtb	r6, r4
 8004b10:	d1ab      	bne.n	8004a6a <D16_GENERIC+0x3a>
 8004b12:	9e05      	ldr	r6, [sp, #20]
 8004b14:	f850 4b02 	ldr.w	r4, [r0], #2
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	d0ac      	beq.n	8004a76 <D16_GENERIC+0x46>
 8004b1c:	ba64      	rev16	r4, r4
 8004b1e:	e7aa      	b.n	8004a76 <D16_GENERIC+0x46>
 8004b20:	462e      	mov	r6, r5
 8004b22:	9906      	ldr	r1, [sp, #24]
 8004b24:	61d3      	str	r3, [r2, #28]
 8004b26:	9b07      	ldr	r3, [sp, #28]
 8004b28:	6096      	str	r6, [r2, #8]
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	60d1      	str	r1, [r2, #12]
 8004b2e:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 8004b32:	6193      	str	r3, [r2, #24]
 8004b34:	b009      	add	sp, #36	@ 0x24
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	00030001 	.word	0x00030001
 8004b44:	00010003 	.word	0x00010003

08004b48 <D24_GENERIC>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8004b4e:	6993      	ldr	r3, [r2, #24]
 8004b50:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8004b52:	b089      	sub	sp, #36	@ 0x24
 8004b54:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8004b58:	9307      	str	r3, [sp, #28]
 8004b5a:	9503      	str	r5, [sp, #12]
 8004b5c:	69d3      	ldr	r3, [r2, #28]
 8004b5e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004b60:	9104      	str	r1, [sp, #16]
 8004b62:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	f000 808f 	beq.w	8004c8a <D24_GENERIC+0x142>
 8004b6c:	f005 0620 	and.w	r6, r5, #32
 8004b70:	f005 0510 	and.w	r5, r5, #16
 8004b74:	4953      	ldr	r1, [pc, #332]	@ (8004cc4 <D24_GENERIC+0x17c>)
 8004b76:	9606      	str	r6, [sp, #24]
 8004b78:	9505      	str	r5, [sp, #20]
 8004b7a:	f04f 0c00 	mov.w	ip, #0
 8004b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b82:	e068      	b.n	8004c56 <D24_GENERIC+0x10e>
 8004b84:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004b88:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004b8c:	042d      	lsls	r5, r5, #16
 8004b8e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004b92:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004b96:	44ae      	add	lr, r5
 8004b98:	4438      	add	r0, r7
 8004b9a:	fa5f f68e 	uxtb.w	r6, lr
 8004b9e:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8004ba2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004ba6:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004baa:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004bae:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004bb2:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004bb6:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8004bba:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004bbe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004bc2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004bc6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004bca:	4d3f      	ldr	r5, [pc, #252]	@ (8004cc8 <D24_GENERIC+0x180>)
 8004bcc:	fb26 b705 	smlad	r7, r6, r5, fp
 8004bd0:	4d3e      	ldr	r5, [pc, #248]	@ (8004ccc <D24_GENERIC+0x184>)
 8004bd2:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004bd6:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004bda:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004bde:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004be2:	2401      	movs	r4, #1
 8004be4:	fb26 f604 	smuad	r6, r6, r4
 8004be8:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8004bec:	9f02      	ldr	r7, [sp, #8]
 8004bee:	eb0c 0e04 	add.w	lr, ip, r4
 8004bf2:	eb08 0406 	add.w	r4, r8, r6
 8004bf6:	eb05 060a 	add.w	r6, r5, sl
 8004bfa:	1bf6      	subs	r6, r6, r7
 8004bfc:	4637      	mov	r7, r6
 8004bfe:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004c02:	e9cd 7800 	strd	r7, r8, [sp]
 8004c06:	9f05      	ldr	r7, [sp, #20]
 8004c08:	b177      	cbz	r7, 8004c28 <D24_GENERIC+0xe0>
 8004c0a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004c0e:	9502      	str	r5, [sp, #8]
 8004c10:	fba6 9a08 	umull	r9, sl, r6, r8
 8004c14:	9e01      	ldr	r6, [sp, #4]
 8004c16:	fb08 aa06 	mla	sl, r8, r6, sl
 8004c1a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8004c1e:	f14a 0700 	adc.w	r7, sl, #0
 8004c22:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004c26:	4655      	mov	r5, sl
 8004c28:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004c2a:	9f03      	ldr	r7, [sp, #12]
 8004c2c:	03ad      	lsls	r5, r5, #14
 8004c2e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004c32:	f04f 0900 	mov.w	r9, #0
 8004c36:	fb0c fc06 	mul.w	ip, ip, r6
 8004c3a:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004c3e:	9e04      	ldr	r6, [sp, #16]
 8004c40:	464f      	mov	r7, r9
 8004c42:	10bd      	asrs	r5, r7, #2
 8004c44:	f305 050f 	ssat	r5, #16, r5
 8004c48:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8004c4c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004c4e:	fa1f fc8e 	uxth.w	ip, lr
 8004c52:	4565      	cmp	r5, ip
 8004c54:	d917      	bls.n	8004c86 <D24_GENERIC+0x13e>
 8004c56:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8004c58:	f890 e000 	ldrb.w	lr, [r0]
 8004c5c:	b2ef      	uxtb	r7, r5
 8004c5e:	2d01      	cmp	r5, #1
 8004c60:	b23e      	sxth	r6, r7
 8004c62:	d18f      	bne.n	8004b84 <D24_GENERIC+0x3c>
 8004c64:	9d06      	ldr	r5, [sp, #24]
 8004c66:	b1dd      	cbz	r5, 8004ca0 <D24_GENERIC+0x158>
 8004c68:	78c5      	ldrb	r5, [r0, #3]
 8004c6a:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8004c6e:	f01c 0f01 	tst.w	ip, #1
 8004c72:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8004c76:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8004c7a:	d11b      	bne.n	8004cb4 <D24_GENERIC+0x16c>
 8004c7c:	f890 e001 	ldrb.w	lr, [r0, #1]
 8004c80:	3002      	adds	r0, #2
 8004c82:	44c6      	add	lr, r8
 8004c84:	e789      	b.n	8004b9a <D24_GENERIC+0x52>
 8004c86:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004c8a:	61d3      	str	r3, [r2, #28]
 8004c8c:	9b07      	ldr	r3, [sp, #28]
 8004c8e:	6193      	str	r3, [r2, #24]
 8004c90:	2000      	movs	r0, #0
 8004c92:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8004c96:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8004c9a:	b009      	add	sp, #36	@ 0x24
 8004c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca0:	f890 8001 	ldrb.w	r8, [r0, #1]
 8004ca4:	7885      	ldrb	r5, [r0, #2]
 8004ca6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8004caa:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8004cae:	44c6      	add	lr, r8
 8004cb0:	3003      	adds	r0, #3
 8004cb2:	e772      	b.n	8004b9a <D24_GENERIC+0x52>
 8004cb4:	f890 8002 	ldrb.w	r8, [r0, #2]
 8004cb8:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8004cbc:	44c6      	add	lr, r8
 8004cbe:	3004      	adds	r0, #4
 8004cc0:	e76b      	b.n	8004b9a <D24_GENERIC+0x52>
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c
 8004cc8:	00030001 	.word	0x00030001
 8004ccc:	00060007 	.word	0x00060007

08004cd0 <D32_GENERIC>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004cd6:	6993      	ldr	r3, [r2, #24]
 8004cd8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004cda:	69d6      	ldr	r6, [r2, #28]
 8004cdc:	b089      	sub	sp, #36	@ 0x24
 8004cde:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8004ce2:	9307      	str	r3, [sp, #28]
 8004ce4:	9403      	str	r4, [sp, #12]
 8004ce6:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8004cea:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004cec:	9104      	str	r1, [sp, #16]
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	f000 809a 	beq.w	8004e28 <D32_GENERIC+0x158>
 8004cf4:	f004 0520 	and.w	r5, r4, #32
 8004cf8:	f004 0410 	and.w	r4, r4, #16
 8004cfc:	9506      	str	r5, [sp, #24]
 8004cfe:	4951      	ldr	r1, [pc, #324]	@ (8004e44 <D32_GENERIC+0x174>)
 8004d00:	9405      	str	r4, [sp, #20]
 8004d02:	f04f 0e00 	mov.w	lr, #0
 8004d06:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	4617      	mov	r7, r2
 8004d0e:	e077      	b.n	8004e00 <D32_GENERIC+0x130>
 8004d10:	7823      	ldrb	r3, [r4, #0]
 8004d12:	f810 800c 	ldrb.w	r8, [r0, ip]
 8004d16:	f810 c002 	ldrb.w	ip, [r0, r2]
 8004d1a:	7800      	ldrb	r0, [r0, #0]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004d22:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004d26:	4403      	add	r3, r0
 8004d28:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8004d2c:	b2dc      	uxtb	r4, r3
 8004d2e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004d32:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004d36:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004d3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d3e:	0e1b      	lsrs	r3, r3, #24
 8004d40:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004d44:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d4c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004d50:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8004d54:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8004d58:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8004d5c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004d60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d64:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004d68:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8004d6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004d70:	4b35      	ldr	r3, [pc, #212]	@ (8004e48 <D32_GENERIC+0x178>)
 8004d72:	fb22 b403 	smlad	r4, r2, r3, fp
 8004d76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d7a:	fb2c 4803 	smlad	r8, ip, r3, r4
 8004d7e:	4b33      	ldr	r3, [pc, #204]	@ (8004e4c <D32_GENERIC+0x17c>)
 8004d80:	fb22 5503 	smlad	r5, r2, r3, r5
 8004d84:	4b32      	ldr	r3, [pc, #200]	@ (8004e50 <D32_GENERIC+0x180>)
 8004d86:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	fb22 f203 	smuad	r2, r2, r3
 8004d90:	4b30      	ldr	r3, [pc, #192]	@ (8004e54 <D32_GENERIC+0x184>)
 8004d92:	fb2c 2503 	smlad	r5, ip, r3, r2
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8004d9c:	eb04 080a 	add.w	r8, r4, sl
 8004da0:	eba8 0803 	sub.w	r8, r8, r3
 8004da4:	4642      	mov	r2, r8
 8004da6:	17d3      	asrs	r3, r2, #31
 8004da8:	e9cd 2300 	strd	r2, r3, [sp]
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	f10e 0c01 	add.w	ip, lr, #1
 8004db2:	b173      	cbz	r3, 8004dd2 <D32_GENERIC+0x102>
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	9402      	str	r4, [sp, #8]
 8004dba:	fba8 8902 	umull	r8, r9, r8, r2
 8004dbe:	469a      	mov	sl, r3
 8004dc0:	fb02 930a 	mla	r3, r2, sl, r9
 8004dc4:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8004dc8:	f143 0900 	adc.w	r9, r3, #0
 8004dcc:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004dd0:	4654      	mov	r4, sl
 8004dd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dd4:	9a04      	ldr	r2, [sp, #16]
 8004dd6:	fb0e fe03 	mul.w	lr, lr, r3
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	0364      	lsls	r4, r4, #13
 8004dde:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004de2:	f04f 0900 	mov.w	r9, #0
 8004de6:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004dea:	464b      	mov	r3, r9
 8004dec:	109b      	asrs	r3, r3, #2
 8004dee:	f303 030f 	ssat	r3, #16, r3
 8004df2:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8004df6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004df8:	fa1f fe8c 	uxth.w	lr, ip
 8004dfc:	4573      	cmp	r3, lr
 8004dfe:	d90f      	bls.n	8004e20 <D32_GENERIC+0x150>
 8004e00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8004e0a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8004e0e:	f47f af7f 	bne.w	8004d10 <D32_GENERIC+0x40>
 8004e12:	1d02      	adds	r2, r0, #4
 8004e14:	6803      	ldr	r3, [r0, #0]
 8004e16:	9806      	ldr	r0, [sp, #24]
 8004e18:	b188      	cbz	r0, 8004e3e <D32_GENERIC+0x16e>
 8004e1a:	ba5b      	rev16	r3, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	e785      	b.n	8004d2c <D32_GENERIC+0x5c>
 8004e20:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004e24:	462b      	mov	r3, r5
 8004e26:	463a      	mov	r2, r7
 8004e28:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8004e2c:	9b07      	ldr	r3, [sp, #28]
 8004e2e:	61d6      	str	r6, [r2, #28]
 8004e30:	2000      	movs	r0, #0
 8004e32:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8004e36:	6193      	str	r3, [r2, #24]
 8004e38:	b009      	add	sp, #36	@ 0x24
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	4610      	mov	r0, r2
 8004e40:	e774      	b.n	8004d2c <D32_GENERIC+0x5c>
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	00060003 	.word	0x00060003
 8004e4c:	000a000c 	.word	0x000a000c
 8004e50:	000c000a 	.word	0x000c000a
 8004e54:	00030006 	.word	0x00030006

08004e58 <D48_GENERIC>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8004e60:	b08b      	sub	sp, #44	@ 0x2c
 8004e62:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	6993      	ldr	r3, [r2, #24]
 8004e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e6a:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8004e6e:	9401      	str	r4, [sp, #4]
 8004e70:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004e72:	9405      	str	r4, [sp, #20]
 8004e74:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8004e78:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004e7a:	9106      	str	r1, [sp, #24]
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	f000 80c2 	beq.w	8005006 <D48_GENERIC+0x1ae>
 8004e82:	f004 0520 	and.w	r5, r4, #32
 8004e86:	f04f 0900 	mov.w	r9, #0
 8004e8a:	f004 0410 	and.w	r4, r4, #16
 8004e8e:	9508      	str	r5, [sp, #32]
 8004e90:	4964      	ldr	r1, [pc, #400]	@ (8005024 <D48_GENERIC+0x1cc>)
 8004e92:	9407      	str	r4, [sp, #28]
 8004e94:	464d      	mov	r5, r9
 8004e96:	e09e      	b.n	8004fd6 <D48_GENERIC+0x17e>
 8004e98:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8004e9c:	f810 b008 	ldrb.w	fp, [r0, r8]
 8004ea0:	f819 8008 	ldrb.w	r8, [r9, r8]
 8004ea4:	f810 9006 	ldrb.w	r9, [r0, r6]
 8004ea8:	7800      	ldrb	r0, [r0, #0]
 8004eaa:	0424      	lsls	r4, r4, #16
 8004eac:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8004eb0:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8004eb4:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8004eb8:	44be      	add	lr, r7
 8004eba:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8004ebe:	eb0b 0700 	add.w	r7, fp, r0
 8004ec2:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8004ec6:	fa5f fe87 	uxtb.w	lr, r7
 8004eca:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8004ece:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004ed2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004ed6:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8004eda:	0e3f      	lsrs	r7, r7, #24
 8004edc:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8004ee0:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8004ee4:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8004ee8:	b2e7      	uxtb	r7, r4
 8004eea:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004eee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004ef2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004ef6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8004efa:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8004efe:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8004f02:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8004f06:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8004f0a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f12:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8004f16:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004f1a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004f1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004f22:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8004f26:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8004f2a:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8004f2e:	4c3e      	ldr	r4, [pc, #248]	@ (8005028 <D48_GENERIC+0x1d0>)
 8004f30:	9e01      	ldr	r6, [sp, #4]
 8004f32:	fb29 6404 	smlad	r4, r9, r4, r6
 8004f36:	4e3d      	ldr	r6, [pc, #244]	@ (800502c <D48_GENERIC+0x1d4>)
 8004f38:	fb2e 4406 	smlad	r4, lr, r6, r4
 8004f3c:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8004f40:	fb27 4b06 	smlad	fp, r7, r6, r4
 8004f44:	4c3a      	ldr	r4, [pc, #232]	@ (8005030 <D48_GENERIC+0x1d8>)
 8004f46:	fb29 3304 	smlad	r3, r9, r4, r3
 8004f4a:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8004f4e:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004f52:	4c38      	ldr	r4, [pc, #224]	@ (8005034 <D48_GENERIC+0x1dc>)
 8004f54:	fb27 3304 	smlad	r3, r7, r4, r3
 8004f58:	2601      	movs	r6, #1
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	fb29 f906 	smuad	r9, r9, r6
 8004f60:	4b35      	ldr	r3, [pc, #212]	@ (8005038 <D48_GENERIC+0x1e0>)
 8004f62:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8004f66:	4b35      	ldr	r3, [pc, #212]	@ (800503c <D48_GENERIC+0x1e4>)
 8004f68:	fb27 e303 	smlad	r3, r7, r3, lr
 8004f6c:	9f04      	ldr	r7, [sp, #16]
 8004f6e:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8004f72:	eb05 0e06 	add.w	lr, r5, r6
 8004f76:	eb04 060a 	add.w	r6, r4, sl
 8004f7a:	1bf6      	subs	r6, r6, r7
 8004f7c:	4637      	mov	r7, r6
 8004f7e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004f82:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8004f86:	9f07      	ldr	r7, [sp, #28]
 8004f88:	b177      	cbz	r7, 8004fa8 <D48_GENERIC+0x150>
 8004f8a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004f8e:	9404      	str	r4, [sp, #16]
 8004f90:	fba6 9a08 	umull	r9, sl, r6, r8
 8004f94:	9e03      	ldr	r6, [sp, #12]
 8004f96:	fb08 aa06 	mla	sl, r8, r6, sl
 8004f9a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8004f9e:	f14a 0700 	adc.w	r7, sl, #0
 8004fa2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004fa6:	4654      	mov	r4, sl
 8004fa8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004faa:	fb05 f606 	mul.w	r6, r5, r6
 8004fae:	9d05      	ldr	r5, [sp, #20]
 8004fb0:	02e4      	lsls	r4, r4, #11
 8004fb2:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	fbc5 7804 	smlal	r7, r8, r5, r4
 8004fbe:	4645      	mov	r5, r8
 8004fc0:	10ac      	asrs	r4, r5, #2
 8004fc2:	9d06      	ldr	r5, [sp, #24]
 8004fc4:	f304 040f 	ssat	r4, #16, r4
 8004fc8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8004fcc:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004fce:	fa1f f58e 	uxth.w	r5, lr
 8004fd2:	42ac      	cmp	r4, r5
 8004fd4:	d917      	bls.n	8005006 <D48_GENERIC+0x1ae>
 8004fd6:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8004fd8:	b2e6      	uxtb	r6, r4
 8004fda:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8004fde:	4277      	negs	r7, r6
 8004fe0:	eb00 0b08 	add.w	fp, r0, r8
 8004fe4:	eb0b 0907 	add.w	r9, fp, r7
 8004fe8:	2c01      	cmp	r4, #1
 8004fea:	eb09 0e08 	add.w	lr, r9, r8
 8004fee:	f47f af53 	bne.w	8004e98 <D48_GENERIC+0x40>
 8004ff2:	9e08      	ldr	r6, [sp, #32]
 8004ff4:	e9d0 7400 	ldrd	r7, r4, [r0]
 8004ff8:	3006      	adds	r0, #6
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	f43f af63 	beq.w	8004ec6 <D48_GENERIC+0x6e>
 8005000:	ba7f      	rev16	r7, r7
 8005002:	ba64      	rev16	r4, r4
 8005004:	e75f      	b.n	8004ec6 <D48_GENERIC+0x6e>
 8005006:	6093      	str	r3, [r2, #8]
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	60d3      	str	r3, [r2, #12]
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	6153      	str	r3, [r2, #20]
 8005010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005012:	f8c2 c01c 	str.w	ip, [r2, #28]
 8005016:	2000      	movs	r0, #0
 8005018:	f8c2 a010 	str.w	sl, [r2, #16]
 800501c:	6193      	str	r3, [r2, #24]
 800501e:	b00b      	add	sp, #44	@ 0x2c
 8005020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005024:	2000000c 	.word	0x2000000c
 8005028:	000f000a 	.word	0x000f000a
 800502c:	00060003 	.word	0x00060003
 8005030:	00150019 	.word	0x00150019
 8005034:	00190015 	.word	0x00190015
 8005038:	00030006 	.word	0x00030006
 800503c:	000a000f 	.word	0x000a000f

08005040 <D64_GENERIC>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b089      	sub	sp, #36	@ 0x24
 8005046:	6895      	ldr	r5, [r2, #8]
 8005048:	6913      	ldr	r3, [r2, #16]
 800504a:	9501      	str	r5, [sp, #4]
 800504c:	68d5      	ldr	r5, [r2, #12]
 800504e:	9302      	str	r3, [sp, #8]
 8005050:	9500      	str	r5, [sp, #0]
 8005052:	6953      	ldr	r3, [r2, #20]
 8005054:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8005056:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8005058:	9303      	str	r3, [sp, #12]
 800505a:	6993      	ldr	r3, [r2, #24]
 800505c:	9307      	str	r3, [sp, #28]
 800505e:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8005062:	69d3      	ldr	r3, [r2, #28]
 8005064:	2c00      	cmp	r4, #0
 8005066:	f000 80d7 	beq.w	8005218 <D64_GENERIC+0x1d8>
 800506a:	6a11      	ldr	r1, [r2, #32]
 800506c:	9106      	str	r1, [sp, #24]
 800506e:	f04f 0e00 	mov.w	lr, #0
 8005072:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8005258 <D64_GENERIC+0x218>
 8005076:	4681      	mov	r9, r0
 8005078:	e0bf      	b.n	80051fa <D64_GENERIC+0x1ba>
 800507a:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800507e:	426c      	negs	r4, r5
 8005080:	eb09 0708 	add.w	r7, r9, r8
 8005084:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005088:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 800508c:	5d38      	ldrb	r0, [r7, r4]
 800508e:	5d31      	ldrb	r1, [r6, r4]
 8005090:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005094:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005098:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800509c:	f899 7000 	ldrb.w	r7, [r9]
 80050a0:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 80050a4:	4426      	add	r6, r4
 80050a6:	0409      	lsls	r1, r1, #16
 80050a8:	0400      	lsls	r0, r0, #16
 80050aa:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80050ae:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80050b2:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 80050b6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80050ba:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 80050be:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80050c2:	4459      	add	r1, fp
 80050c4:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 80050c8:	4438      	add	r0, r7
 80050ca:	b2c5      	uxtb	r5, r0
 80050cc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80050d0:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 80050d4:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80050d8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80050dc:	0e00      	lsrs	r0, r0, #24
 80050de:	eb03 0806 	add.w	r8, r3, r6
 80050e2:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80050e6:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 80050ea:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80050ee:	b2c8      	uxtb	r0, r1
 80050f0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80050f4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80050f8:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 80050fc:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8005100:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005104:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005108:	0e09      	lsrs	r1, r1, #24
 800510a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800510e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005112:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005116:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800511a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800511e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005122:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005126:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800512a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800512e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005132:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005136:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800513a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800513e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005142:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005146:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800514a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800514e:	0a8b      	lsrs	r3, r1, #10
 8005150:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005154:	4938      	ldr	r1, [pc, #224]	@ (8005238 <D64_GENERIC+0x1f8>)
 8005156:	9c00      	ldr	r4, [sp, #0]
 8005158:	fb28 4101 	smlad	r1, r8, r1, r4
 800515c:	4c37      	ldr	r4, [pc, #220]	@ (800523c <D64_GENERIC+0x1fc>)
 800515e:	fb27 1104 	smlad	r1, r7, r4, r1
 8005162:	4c37      	ldr	r4, [pc, #220]	@ (8005240 <D64_GENERIC+0x200>)
 8005164:	fb20 1104 	smlad	r1, r0, r4, r1
 8005168:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800516c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8005170:	4d34      	ldr	r5, [pc, #208]	@ (8005244 <D64_GENERIC+0x204>)
 8005172:	9c01      	ldr	r4, [sp, #4]
 8005174:	fb28 4405 	smlad	r4, r8, r5, r4
 8005178:	fb2a 4415 	smladx	r4, sl, r5, r4
 800517c:	4d32      	ldr	r5, [pc, #200]	@ (8005248 <D64_GENERIC+0x208>)
 800517e:	fb27 4405 	smlad	r4, r7, r5, r4
 8005182:	fb20 4415 	smladx	r4, r0, r5, r4
 8005186:	2501      	movs	r5, #1
 8005188:	9400      	str	r4, [sp, #0]
 800518a:	fb28 f805 	smuad	r8, r8, r5
 800518e:	4c2f      	ldr	r4, [pc, #188]	@ (800524c <D64_GENERIC+0x20c>)
 8005190:	fb27 8704 	smlad	r7, r7, r4, r8
 8005194:	4c2e      	ldr	r4, [pc, #184]	@ (8005250 <D64_GENERIC+0x210>)
 8005196:	fb20 7004 	smlad	r0, r0, r4, r7
 800519a:	4c2e      	ldr	r4, [pc, #184]	@ (8005254 <D64_GENERIC+0x214>)
 800519c:	fb2a 0004 	smlad	r0, sl, r4, r0
 80051a0:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 80051a4:	9906      	ldr	r1, [sp, #24]
 80051a6:	9001      	str	r0, [sp, #4]
 80051a8:	b181      	cbz	r1, 80051cc <D64_GENERIC+0x18c>
 80051aa:	9802      	ldr	r0, [sp, #8]
 80051ac:	9c03      	ldr	r4, [sp, #12]
 80051ae:	4430      	add	r0, r6
 80051b0:	1b00      	subs	r0, r0, r4
 80051b2:	fba0 7801 	umull	r7, r8, r0, r1
 80051b6:	17c5      	asrs	r5, r0, #31
 80051b8:	fb01 8805 	mla	r8, r1, r5, r8
 80051bc:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 80051c0:	f148 0100 	adc.w	r1, r8, #0
 80051c4:	0049      	lsls	r1, r1, #1
 80051c6:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80051ca:	460e      	mov	r6, r1
 80051cc:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 80051ce:	9904      	ldr	r1, [sp, #16]
 80051d0:	9805      	ldr	r0, [sp, #20]
 80051d2:	02b6      	lsls	r6, r6, #10
 80051d4:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80051d8:	f04f 0800 	mov.w	r8, #0
 80051dc:	fb0e f404 	mul.w	r4, lr, r4
 80051e0:	fbc1 7806 	smlal	r7, r8, r1, r6
 80051e4:	4641      	mov	r1, r8
 80051e6:	1089      	asrs	r1, r1, #2
 80051e8:	f301 010f 	ssat	r1, #16, r1
 80051ec:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80051f0:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 80051f2:	f10e 0e01 	add.w	lr, lr, #1
 80051f6:	4571      	cmp	r1, lr
 80051f8:	dd0e      	ble.n	8005218 <D64_GENERIC+0x1d8>
 80051fa:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80051fc:	2d01      	cmp	r5, #1
 80051fe:	f47f af3c 	bne.w	800507a <D64_GENERIC+0x3a>
 8005202:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005204:	06ac      	lsls	r4, r5, #26
 8005206:	e9d9 0100 	ldrd	r0, r1, [r9]
 800520a:	f109 0908 	add.w	r9, r9, #8
 800520e:	f57f af5c 	bpl.w	80050ca <D64_GENERIC+0x8a>
 8005212:	ba40      	rev16	r0, r0
 8005214:	ba49      	rev16	r1, r1
 8005216:	e758      	b.n	80050ca <D64_GENERIC+0x8a>
 8005218:	61d3      	str	r3, [r2, #28]
 800521a:	9b02      	ldr	r3, [sp, #8]
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	6113      	str	r3, [r2, #16]
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	6091      	str	r1, [r2, #8]
 8005224:	6153      	str	r3, [r2, #20]
 8005226:	9900      	ldr	r1, [sp, #0]
 8005228:	9b07      	ldr	r3, [sp, #28]
 800522a:	60d1      	str	r1, [r2, #12]
 800522c:	2000      	movs	r0, #0
 800522e:	6193      	str	r3, [r2, #24]
 8005230:	b009      	add	sp, #36	@ 0x24
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	001c0015 	.word	0x001c0015
 800523c:	000f000a 	.word	0x000f000a
 8005240:	00060003 	.word	0x00060003
 8005244:	0024002a 	.word	0x0024002a
 8005248:	002e0030 	.word	0x002e0030
 800524c:	00030006 	.word	0x00030006
 8005250:	000a000f 	.word	0x000a000f
 8005254:	0015001c 	.word	0x0015001c
 8005258:	2000000c 	.word	0x2000000c

0800525c <D80_GENERIC>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	b08b      	sub	sp, #44	@ 0x2c
 8005262:	6914      	ldr	r4, [r2, #16]
 8005264:	9405      	str	r4, [sp, #20]
 8005266:	6954      	ldr	r4, [r2, #20]
 8005268:	9406      	str	r4, [sp, #24]
 800526a:	6994      	ldr	r4, [r2, #24]
 800526c:	9409      	str	r4, [sp, #36]	@ 0x24
 800526e:	6894      	ldr	r4, [r2, #8]
 8005270:	9402      	str	r4, [sp, #8]
 8005272:	68d4      	ldr	r4, [r2, #12]
 8005274:	9401      	str	r4, [sp, #4]
 8005276:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8005278:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800527a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800527e:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 810a 	beq.w	800549c <D80_GENERIC+0x240>
 8005288:	2300      	movs	r3, #0
 800528a:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 80054ec <D80_GENERIC+0x290>
 800528e:	e9cd b303 	strd	fp, r3, [sp, #12]
 8005292:	e0ee      	b.n	8005472 <D80_GENERIC+0x216>
 8005294:	fa5f fe8e 	uxtb.w	lr, lr
 8005298:	fa0f f48e 	sxth.w	r4, lr
 800529c:	0066      	lsls	r6, r4, #1
 800529e:	eb06 0804 	add.w	r8, r6, r4
 80052a2:	f1ce 0500 	rsb	r5, lr, #0
 80052a6:	eb00 0108 	add.w	r1, r0, r8
 80052aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80052ae:	194b      	adds	r3, r1, r5
 80052b0:	5d49      	ldrb	r1, [r1, r5]
 80052b2:	f810 a008 	ldrb.w	sl, [r0, r8]
 80052b6:	f813 b004 	ldrb.w	fp, [r3, r4]
 80052ba:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80052be:	f890 8000 	ldrb.w	r8, [r0]
 80052c2:	eb03 0c04 	add.w	ip, r3, r4
 80052c6:	eb0c 0705 	add.w	r7, ip, r5
 80052ca:	0409      	lsls	r1, r1, #16
 80052cc:	f81c 3005 	ldrb.w	r3, [ip, r5]
 80052d0:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80052d4:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80052d8:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80052dc:	eb0a 0004 	add.w	r0, sl, r4
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	f81a a004 	ldrb.w	sl, [sl, r4]
 80052e6:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80052ea:	5d44      	ldrb	r4, [r0, r5]
 80052ec:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80052f0:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80052f4:	4428      	add	r0, r5
 80052f6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80052fa:	4441      	add	r1, r8
 80052fc:	4430      	add	r0, r6
 80052fe:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005302:	441f      	add	r7, r3
 8005304:	b2cd      	uxtb	r5, r1
 8005306:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800530a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800530e:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005318:	0e09      	lsrs	r1, r1, #24
 800531a:	4433      	add	r3, r6
 800531c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8005320:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005324:	b2fd      	uxtb	r5, r7
 8005326:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 800532a:	469b      	mov	fp, r3
 800532c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005330:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005334:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8005338:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800533c:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8005340:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8005344:	0e3b      	lsrs	r3, r7, #24
 8005346:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800534a:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 800534e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005352:	fa5f fc84 	uxtb.w	ip, r4
 8005356:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 800535a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800535e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005362:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8005366:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800536a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800536e:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8005372:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005376:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800537a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005382:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005386:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800538a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800538e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8005392:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005396:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800539a:	0aa3      	lsrs	r3, r4, #10
 800539c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80053a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80053a4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80053a8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80053b2:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 80053b6:	4b41      	ldr	r3, [pc, #260]	@ (80054bc <D80_GENERIC+0x260>)
 80053b8:	9901      	ldr	r1, [sp, #4]
 80053ba:	fb2b 1303 	smlad	r3, fp, r3, r1
 80053be:	4940      	ldr	r1, [pc, #256]	@ (80054c0 <D80_GENERIC+0x264>)
 80053c0:	fb28 3301 	smlad	r3, r8, r1, r3
 80053c4:	493f      	ldr	r1, [pc, #252]	@ (80054c4 <D80_GENERIC+0x268>)
 80053c6:	fb2e 3301 	smlad	r3, lr, r1, r3
 80053ca:	493f      	ldr	r1, [pc, #252]	@ (80054c8 <D80_GENERIC+0x26c>)
 80053cc:	fb27 3301 	smlad	r3, r7, r1, r3
 80053d0:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80053d4:	fb2c 3404 	smlad	r4, ip, r4, r3
 80053d8:	4b3c      	ldr	r3, [pc, #240]	@ (80054cc <D80_GENERIC+0x270>)
 80053da:	9902      	ldr	r1, [sp, #8]
 80053dc:	fb2b 1303 	smlad	r3, fp, r3, r1
 80053e0:	493b      	ldr	r1, [pc, #236]	@ (80054d0 <D80_GENERIC+0x274>)
 80053e2:	fb28 3301 	smlad	r3, r8, r1, r3
 80053e6:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 80053ea:	fb2e 3101 	smlad	r1, lr, r1, r3
 80053ee:	4b39      	ldr	r3, [pc, #228]	@ (80054d4 <D80_GENERIC+0x278>)
 80053f0:	fb27 1103 	smlad	r1, r7, r3, r1
 80053f4:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <D80_GENERIC+0x27c>)
 80053f6:	fb2c 1303 	smlad	r3, ip, r3, r1
 80053fa:	2101      	movs	r1, #1
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	fb2b fb01 	smuad	fp, fp, r1
 8005402:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <D80_GENERIC+0x280>)
 8005404:	fb28 b803 	smlad	r8, r8, r3, fp
 8005408:	4d35      	ldr	r5, [pc, #212]	@ (80054e0 <D80_GENERIC+0x284>)
 800540a:	fb2e 8e05 	smlad	lr, lr, r5, r8
 800540e:	4d35      	ldr	r5, [pc, #212]	@ (80054e4 <D80_GENERIC+0x288>)
 8005410:	fb27 e705 	smlad	r7, r7, r5, lr
 8005414:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <D80_GENERIC+0x28c>)
 8005416:	fb2c 7303 	smlad	r3, ip, r3, r7
 800541a:	6a11      	ldr	r1, [r2, #32]
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8005422:	b181      	cbz	r1, 8005446 <D80_GENERIC+0x1ea>
 8005424:	9c05      	ldr	r4, [sp, #20]
 8005426:	9d06      	ldr	r5, [sp, #24]
 8005428:	441c      	add	r4, r3
 800542a:	1b64      	subs	r4, r4, r5
 800542c:	fba4 ab01 	umull	sl, fp, r4, r1
 8005430:	17e7      	asrs	r7, r4, #31
 8005432:	fb01 bb07 	mla	fp, r1, r7, fp
 8005436:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 800543a:	f14b 0500 	adc.w	r5, fp, #0
 800543e:	0069      	lsls	r1, r5, #1
 8005440:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8005444:	460b      	mov	r3, r1
 8005446:	9e04      	ldr	r6, [sp, #16]
 8005448:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800544a:	9f07      	ldr	r7, [sp, #28]
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005452:	2500      	movs	r5, #0
 8005454:	fb06 f101 	mul.w	r1, r6, r1
 8005458:	fbc7 4503 	smlal	r4, r5, r7, r3
 800545c:	9c08      	ldr	r4, [sp, #32]
 800545e:	10ab      	asrs	r3, r5, #2
 8005460:	f303 030f 	ssat	r3, #16, r3
 8005464:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8005468:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800546a:	1c71      	adds	r1, r6, #1
 800546c:	428b      	cmp	r3, r1
 800546e:	9104      	str	r1, [sp, #16]
 8005470:	dd12      	ble.n	8005498 <D80_GENERIC+0x23c>
 8005472:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8005476:	f1be 0f01 	cmp.w	lr, #1
 800547a:	f47f af0b 	bne.w	8005294 <D80_GENERIC+0x38>
 800547e:	6801      	ldr	r1, [r0, #0]
 8005480:	6847      	ldr	r7, [r0, #4]
 8005482:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005484:	6884      	ldr	r4, [r0, #8]
 8005486:	069b      	lsls	r3, r3, #26
 8005488:	f100 000a 	add.w	r0, r0, #10
 800548c:	f57f af3a 	bpl.w	8005304 <D80_GENERIC+0xa8>
 8005490:	ba49      	rev16	r1, r1
 8005492:	ba7f      	rev16	r7, r7
 8005494:	ba64      	rev16	r4, r4
 8005496:	e735      	b.n	8005304 <D80_GENERIC+0xa8>
 8005498:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800549c:	9b02      	ldr	r3, [sp, #8]
 800549e:	6093      	str	r3, [r2, #8]
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	60d3      	str	r3, [r2, #12]
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	6113      	str	r3, [r2, #16]
 80054a8:	9b06      	ldr	r3, [sp, #24]
 80054aa:	6153      	str	r3, [r2, #20]
 80054ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ae:	f8c2 b01c 	str.w	fp, [r2, #28]
 80054b2:	2000      	movs	r0, #0
 80054b4:	6193      	str	r3, [r2, #24]
 80054b6:	b00b      	add	sp, #44	@ 0x2c
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	002d0024 	.word	0x002d0024
 80054c0:	001c0015 	.word	0x001c0015
 80054c4:	000f000a 	.word	0x000f000a
 80054c8:	00060003 	.word	0x00060003
 80054cc:	0037003f 	.word	0x0037003f
 80054d0:	00450049 	.word	0x00450049
 80054d4:	00490045 	.word	0x00490045
 80054d8:	003f0037 	.word	0x003f0037
 80054dc:	00030006 	.word	0x00030006
 80054e0:	000a000f 	.word	0x000a000f
 80054e4:	0015001c 	.word	0x0015001c
 80054e8:	0024002d 	.word	0x0024002d
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <D128_GENERIC>:
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	b091      	sub	sp, #68	@ 0x44
 80054f6:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80054f8:	9004      	str	r0, [sp, #16]
 80054fa:	6910      	ldr	r0, [r2, #16]
 80054fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80054fe:	6950      	ldr	r0, [r2, #20]
 8005500:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005502:	6990      	ldr	r0, [r2, #24]
 8005504:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005506:	69d0      	ldr	r0, [r2, #28]
 8005508:	9002      	str	r0, [sp, #8]
 800550a:	6890      	ldr	r0, [r2, #8]
 800550c:	9003      	str	r0, [sp, #12]
 800550e:	68d0      	ldr	r0, [r2, #12]
 8005510:	9001      	str	r0, [sp, #4]
 8005512:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8005514:	9200      	str	r2, [sp, #0]
 8005516:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8196 	beq.w	800584c <D128_GENERIC+0x35c>
 8005520:	2300      	movs	r3, #0
 8005522:	6a12      	ldr	r2, [r2, #32]
 8005524:	920e      	str	r2, [sp, #56]	@ 0x38
 8005526:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 80058c8 <D128_GENERIC+0x3d8>
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	e177      	b.n	800581e <D128_GENERIC+0x32e>
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	9d04      	ldr	r5, [sp, #16]
 8005532:	b214      	sxth	r4, r2
 8005534:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8005538:	4250      	negs	r0, r2
 800553a:	eb05 010a 	add.w	r1, r5, sl
 800553e:	00a6      	lsls	r6, r4, #2
 8005540:	eb01 0800 	add.w	r8, r1, r0
 8005544:	eb06 0e04 	add.w	lr, r6, r4
 8005548:	eb08 070e 	add.w	r7, r8, lr
 800554c:	183b      	adds	r3, r7, r0
 800554e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005552:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8005556:	9608      	str	r6, [sp, #32]
 8005558:	eb0c 0604 	add.w	r6, ip, r4
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	1833      	adds	r3, r6, r0
 8005560:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8005564:	9306      	str	r3, [sp, #24]
 8005566:	f818 a00e 	ldrb.w	sl, [r8, lr]
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	f815 e002 	ldrb.w	lr, [r5, r2]
 8005570:	782d      	ldrb	r5, [r5, #0]
 8005572:	5c3a      	ldrb	r2, [r7, r0]
 8005574:	9507      	str	r5, [sp, #28]
 8005576:	9d06      	ldr	r5, [sp, #24]
 8005578:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800557c:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8005586:	5c33      	ldrb	r3, [r6, r0]
 8005588:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800558c:	5c09      	ldrb	r1, [r1, r0]
 800558e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005592:	0412      	lsls	r2, r2, #16
 8005594:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005598:	eb06 0a04 	add.w	sl, r6, r4
 800559c:	5d36      	ldrb	r6, [r6, r4]
 800559e:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 80055a2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80055a6:	042d      	lsls	r5, r5, #16
 80055a8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80055ac:	0409      	lsls	r1, r1, #16
 80055ae:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80055b2:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80055bc:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80055c0:	eb0a 0e00 	add.w	lr, sl, r0
 80055c4:	9d07      	ldr	r5, [sp, #28]
 80055c6:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 80055ca:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80055ce:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80055d2:	9f08      	ldr	r7, [sp, #32]
 80055d4:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 80055d8:	4429      	add	r1, r5
 80055da:	9d04      	ldr	r5, [sp, #16]
 80055dc:	4438      	add	r0, r7
 80055de:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	442a      	add	r2, r5
 80055e6:	eb06 0a0b 	add.w	sl, r6, fp
 80055ea:	1918      	adds	r0, r3, r4
 80055ec:	b2cb      	uxtb	r3, r1
 80055ee:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80055f2:	9e02      	ldr	r6, [sp, #8]
 80055f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80055f8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80055fc:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005600:	441e      	add	r6, r3
 8005602:	0e09      	lsrs	r1, r1, #24
 8005604:	4633      	mov	r3, r6
 8005606:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800560a:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800560e:	b2d4      	uxtb	r4, r2
 8005610:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005614:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005618:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800561c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005620:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005624:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005628:	0e12      	lsrs	r2, r2, #24
 800562a:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800562e:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8005632:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005636:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800563a:	9702      	str	r7, [sp, #8]
 800563c:	b2c2      	uxtb	r2, r0
 800563e:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005642:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 8005646:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800564a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800564e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005652:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 8005656:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800565a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800565e:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005662:	0e00      	lsrs	r0, r0, #24
 8005664:	fa5f f68a 	uxtb.w	r6, sl
 8005668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566c:	9308      	str	r3, [sp, #32]
 800566e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005672:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005676:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800567a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800567e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005682:	9509      	str	r5, [sp, #36]	@ 0x24
 8005684:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005688:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800568c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005690:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005694:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005698:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800569c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80056a0:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80056a4:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80056a8:	9306      	str	r3, [sp, #24]
 80056aa:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80056b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80056bc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80056c0:	9b06      	ldr	r3, [sp, #24]
 80056c2:	9506      	str	r5, [sp, #24]
 80056c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80056c6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80056ca:	f8cd e008 	str.w	lr, [sp, #8]
 80056ce:	46ae      	mov	lr, r5
 80056d0:	9d08      	ldr	r5, [sp, #32]
 80056d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80056d6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80056da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80056de:	9d02      	ldr	r5, [sp, #8]
 80056e0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80056e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80056e8:	9f07      	ldr	r7, [sp, #28]
 80056ea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80056ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80056f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80056f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056fa:	9d06      	ldr	r5, [sp, #24]
 80056fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005700:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005704:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005708:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800570c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005710:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8005714:	0abe      	lsrs	r6, r7, #10
 8005716:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800571a:	9602      	str	r6, [sp, #8]
 800571c:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005720:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005724:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8005728:	4e52      	ldr	r6, [pc, #328]	@ (8005874 <D128_GENERIC+0x384>)
 800572a:	9f01      	ldr	r7, [sp, #4]
 800572c:	fb2e 7606 	smlad	r6, lr, r6, r7
 8005730:	4f51      	ldr	r7, [pc, #324]	@ (8005878 <D128_GENERIC+0x388>)
 8005732:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005736:	4f51      	ldr	r7, [pc, #324]	@ (800587c <D128_GENERIC+0x38c>)
 8005738:	fb21 6607 	smlad	r6, r1, r7, r6
 800573c:	4f50      	ldr	r7, [pc, #320]	@ (8005880 <D128_GENERIC+0x390>)
 800573e:	fb24 6607 	smlad	r6, r4, r7, r6
 8005742:	4f50      	ldr	r7, [pc, #320]	@ (8005884 <D128_GENERIC+0x394>)
 8005744:	fb22 6607 	smlad	r6, r2, r7, r6
 8005748:	4f4f      	ldr	r7, [pc, #316]	@ (8005888 <D128_GENERIC+0x398>)
 800574a:	fb20 6607 	smlad	r6, r0, r7, r6
 800574e:	4f4f      	ldr	r7, [pc, #316]	@ (800588c <D128_GENERIC+0x39c>)
 8005750:	fb23 6607 	smlad	r6, r3, r7, r6
 8005754:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8005758:	fb25 6807 	smlad	r8, r5, r7, r6
 800575c:	4f4c      	ldr	r7, [pc, #304]	@ (8005890 <D128_GENERIC+0x3a0>)
 800575e:	9e03      	ldr	r6, [sp, #12]
 8005760:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8005764:	4e4b      	ldr	r6, [pc, #300]	@ (8005894 <D128_GENERIC+0x3a4>)
 8005766:	fb2a cc06 	smlad	ip, sl, r6, ip
 800576a:	4f4b      	ldr	r7, [pc, #300]	@ (8005898 <D128_GENERIC+0x3a8>)
 800576c:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005770:	4f4a      	ldr	r7, [pc, #296]	@ (800589c <D128_GENERIC+0x3ac>)
 8005772:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005776:	4f4a      	ldr	r7, [pc, #296]	@ (80058a0 <D128_GENERIC+0x3b0>)
 8005778:	fb22 cc07 	smlad	ip, r2, r7, ip
 800577c:	4f49      	ldr	r7, [pc, #292]	@ (80058a4 <D128_GENERIC+0x3b4>)
 800577e:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005782:	4f49      	ldr	r7, [pc, #292]	@ (80058a8 <D128_GENERIC+0x3b8>)
 8005784:	fb23 c707 	smlad	r7, r3, r7, ip
 8005788:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80058cc <D128_GENERIC+0x3dc>
 800578c:	fb25 760c 	smlad	r6, r5, ip, r7
 8005790:	f04f 0b01 	mov.w	fp, #1
 8005794:	9601      	str	r6, [sp, #4]
 8005796:	fb2e fb0b 	smuad	fp, lr, fp
 800579a:	4f44      	ldr	r7, [pc, #272]	@ (80058ac <D128_GENERIC+0x3bc>)
 800579c:	fb2a ba07 	smlad	sl, sl, r7, fp
 80057a0:	4f43      	ldr	r7, [pc, #268]	@ (80058b0 <D128_GENERIC+0x3c0>)
 80057a2:	fb21 aa07 	smlad	sl, r1, r7, sl
 80057a6:	4f43      	ldr	r7, [pc, #268]	@ (80058b4 <D128_GENERIC+0x3c4>)
 80057a8:	fb24 aa07 	smlad	sl, r4, r7, sl
 80057ac:	4f42      	ldr	r7, [pc, #264]	@ (80058b8 <D128_GENERIC+0x3c8>)
 80057ae:	fb22 a707 	smlad	r7, r2, r7, sl
 80057b2:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <D128_GENERIC+0x3cc>)
 80057b4:	fb20 7702 	smlad	r7, r0, r2, r7
 80057b8:	4a41      	ldr	r2, [pc, #260]	@ (80058c0 <D128_GENERIC+0x3d0>)
 80057ba:	fb23 7702 	smlad	r7, r3, r2, r7
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <D128_GENERIC+0x3d4>)
 80057c0:	fb25 7303 	smlad	r3, r5, r3, r7
 80057c4:	9303      	str	r3, [sp, #12]
 80057c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057c8:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 80057cc:	b183      	cbz	r3, 80057f0 <D128_GENERIC+0x300>
 80057ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057d2:	4432      	add	r2, r6
 80057d4:	1a52      	subs	r2, r2, r1
 80057d6:	fba2 4503 	umull	r4, r5, r2, r3
 80057da:	17d1      	asrs	r1, r2, #31
 80057dc:	fb03 5501 	mla	r5, r3, r1, r5
 80057e0:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 80057e4:	f145 0300 	adc.w	r3, r5, #0
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 80057ee:	461e      	mov	r6, r3
 80057f0:	9800      	ldr	r0, [sp, #0]
 80057f2:	9c05      	ldr	r4, [sp, #20]
 80057f4:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80057f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80057f8:	01f6      	lsls	r6, r6, #7
 80057fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057fe:	2300      	movs	r3, #0
 8005800:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005804:	fb04 f101 	mul.w	r1, r4, r1
 8005808:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800580a:	109b      	asrs	r3, r3, #2
 800580c:	f303 030f 	ssat	r3, #16, r3
 8005810:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005814:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005816:	1c62      	adds	r2, r4, #1
 8005818:	4293      	cmp	r3, r2
 800581a:	9205      	str	r2, [sp, #20]
 800581c:	dd16      	ble.n	800584c <D128_GENERIC+0x35c>
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8005822:	2a01      	cmp	r2, #1
 8005824:	f47f ae83 	bne.w	800552e <D128_GENERIC+0x3e>
 8005828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582a:	9c04      	ldr	r4, [sp, #16]
 800582c:	069b      	lsls	r3, r3, #26
 800582e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005832:	68a0      	ldr	r0, [r4, #8]
 8005834:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8005838:	f104 0410 	add.w	r4, r4, #16
 800583c:	d517      	bpl.n	800586e <D128_GENERIC+0x37e>
 800583e:	ba49      	rev16	r1, r1
 8005840:	ba52      	rev16	r2, r2
 8005842:	ba40      	rev16	r0, r0
 8005844:	fa9a fa9a 	rev16.w	sl, sl
 8005848:	9404      	str	r4, [sp, #16]
 800584a:	e6cf      	b.n	80055ec <D128_GENERIC+0xfc>
 800584c:	9b00      	ldr	r3, [sp, #0]
 800584e:	9903      	ldr	r1, [sp, #12]
 8005850:	6099      	str	r1, [r3, #8]
 8005852:	9901      	ldr	r1, [sp, #4]
 8005854:	60d9      	str	r1, [r3, #12]
 8005856:	9902      	ldr	r1, [sp, #8]
 8005858:	61d9      	str	r1, [r3, #28]
 800585a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800585c:	6119      	str	r1, [r3, #16]
 800585e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005862:	6159      	str	r1, [r3, #20]
 8005864:	2000      	movs	r0, #0
 8005866:	619a      	str	r2, [r3, #24]
 8005868:	b011      	add	sp, #68	@ 0x44
 800586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586e:	9404      	str	r4, [sp, #16]
 8005870:	e6bc      	b.n	80055ec <D128_GENERIC+0xfc>
 8005872:	bf00      	nop
 8005874:	00780069 	.word	0x00780069
 8005878:	005b004e 	.word	0x005b004e
 800587c:	00420037 	.word	0x00420037
 8005880:	002d0024 	.word	0x002d0024
 8005884:	001c0015 	.word	0x001c0015
 8005888:	000f000a 	.word	0x000f000a
 800588c:	00060003 	.word	0x00060003
 8005890:	00880096 	.word	0x00880096
 8005894:	00a200ac 	.word	0x00a200ac
 8005898:	00b400ba 	.word	0x00b400ba
 800589c:	00be00c0 	.word	0x00be00c0
 80058a0:	00c000be 	.word	0x00c000be
 80058a4:	00ba00b4 	.word	0x00ba00b4
 80058a8:	00ac00a2 	.word	0x00ac00a2
 80058ac:	00030006 	.word	0x00030006
 80058b0:	000a000f 	.word	0x000a000f
 80058b4:	0015001c 	.word	0x0015001c
 80058b8:	0024002d 	.word	0x0024002d
 80058bc:	00370042 	.word	0x00370042
 80058c0:	004e005b 	.word	0x004e005b
 80058c4:	00690078 	.word	0x00690078
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	00960088 	.word	0x00960088

080058d0 <D16_1CH_HTONS_VOL_HP>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80058d8:	b085      	sub	sp, #20
 80058da:	4681      	mov	r9, r0
 80058dc:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80058de:	6993      	ldr	r3, [r2, #24]
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80058e6:	69d3      	ldr	r3, [r2, #28]
 80058e8:	9402      	str	r4, [sp, #8]
 80058ea:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 80058ee:	f8d2 c020 	ldr.w	ip, [r2, #32]
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d057      	beq.n	80059a6 <D16_1CH_HTONS_VOL_HP+0xd6>
 80058f6:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 80058fa:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 80059b4 <D16_1CH_HTONS_VOL_HP+0xe4>
 80058fe:	f1a1 0802 	sub.w	r8, r1, #2
 8005902:	4639      	mov	r1, r7
 8005904:	465f      	mov	r7, fp
 8005906:	46d3      	mov	fp, sl
 8005908:	46ca      	mov	sl, r9
 800590a:	4699      	mov	r9, r3
 800590c:	4633      	mov	r3, r6
 800590e:	4616      	mov	r6, r2
 8005910:	f85a 2b02 	ldr.w	r2, [sl], #2
 8005914:	ba52      	rev16	r2, r2
 8005916:	b2d4      	uxtb	r4, r2
 8005918:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800591c:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8005920:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8005924:	4491      	add	r9, r2
 8005926:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 800592a:	f3c0 0209 	ubfx	r2, r0, #0, #10
 800592e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005932:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8005936:	ea4f 2990 	mov.w	r9, r0, lsr #10
 800593a:	481c      	ldr	r0, [pc, #112]	@ (80059ac <D16_1CH_HTONS_VOL_HP+0xdc>)
 800593c:	fb22 5400 	smlad	r4, r2, r0, r5
 8005940:	481b      	ldr	r0, [pc, #108]	@ (80059b0 <D16_1CH_HTONS_VOL_HP+0xe0>)
 8005942:	fb22 f500 	smuad	r5, r2, r0
 8005946:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 800594a:	18e2      	adds	r2, r4, r3
 800594c:	1a52      	subs	r2, r2, r1
 800594e:	17d1      	asrs	r1, r2, #31
 8005950:	fba2 230c 	umull	r2, r3, r2, ip
 8005954:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8005958:	fb0c 3301 	mla	r3, ip, r1, r3
 800595c:	f143 0100 	adc.w	r1, r3, #0
 8005960:	e9cd 0100 	strd	r0, r1, [sp]
 8005964:	044a      	lsls	r2, r1, #17
 8005966:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800596a:	2100      	movs	r1, #0
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	fbcb 0102 	smlal	r0, r1, fp, r2
 8005972:	45ba      	cmp	sl, r7
 8005974:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8005978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800597c:	f302 020f 	ssat	r2, #16, r2
 8005980:	4621      	mov	r1, r4
 8005982:	f828 2f02 	strh.w	r2, [r8, #2]!
 8005986:	d1c3      	bne.n	8005910 <D16_1CH_HTONS_VOL_HP+0x40>
 8005988:	4632      	mov	r2, r6
 800598a:	461e      	mov	r6, r3
 800598c:	464b      	mov	r3, r9
 800598e:	9902      	ldr	r1, [sp, #8]
 8005990:	61d3      	str	r3, [r2, #28]
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	6095      	str	r5, [r2, #8]
 8005996:	2000      	movs	r0, #0
 8005998:	60d1      	str	r1, [r2, #12]
 800599a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800599e:	6193      	str	r3, [r2, #24]
 80059a0:	b005      	add	sp, #20
 80059a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a6:	463c      	mov	r4, r7
 80059a8:	e7f1      	b.n	800598e <D16_1CH_HTONS_VOL_HP+0xbe>
 80059aa:	bf00      	nop
 80059ac:	00030001 	.word	0x00030001
 80059b0:	00010003 	.word	0x00010003
 80059b4:	2000000c 	.word	0x2000000c

080059b8 <D24_1CH_HTONS_VOL_HP>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	4696      	mov	lr, r2
 80059be:	b089      	sub	sp, #36	@ 0x24
 80059c0:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 80059c4:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80059c6:	f8de 3018 	ldr.w	r3, [lr, #24]
 80059ca:	9703      	str	r7, [sp, #12]
 80059cc:	f8de 7020 	ldr.w	r7, [lr, #32]
 80059d0:	9306      	str	r3, [sp, #24]
 80059d2:	9205      	str	r2, [sp, #20]
 80059d4:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 80059d8:	f8de 601c 	ldr.w	r6, [lr, #28]
 80059dc:	9704      	str	r7, [sp, #16]
 80059de:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	f000 8081 	beq.w	8005aea <D24_1CH_HTONS_VOL_HP+0x132>
 80059e8:	f1a1 0b02 	sub.w	fp, r1, #2
 80059ec:	2700      	movs	r7, #0
 80059ee:	46d9      	mov	r9, fp
 80059f0:	f8cd e01c 	str.w	lr, [sp, #28]
 80059f4:	46d3      	mov	fp, sl
 80059f6:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8005af8 <D24_1CH_HTONS_VOL_HP+0x140>
 80059fa:	46a8      	mov	r8, r5
 80059fc:	46ba      	mov	sl, r7
 80059fe:	469e      	mov	lr, r3
 8005a00:	e052      	b.n	8005aa8 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005a02:	7842      	ldrb	r2, [r0, #1]
 8005a04:	3002      	adds	r0, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	b2d9      	uxtb	r1, r3
 8005a0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005a0e:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8005a12:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005a1c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005a20:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8005a24:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005a28:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005a2c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005a30:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005a34:	4a2e      	ldr	r2, [pc, #184]	@ (8005af0 <D24_1CH_HTONS_VOL_HP+0x138>)
 8005a36:	fb23 b102 	smlad	r1, r3, r2, fp
 8005a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8005af4 <D24_1CH_HTONS_VOL_HP+0x13c>)
 8005a3c:	fb23 eb02 	smlad	fp, r3, r2, lr
 8005a40:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8005a44:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8005a48:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	fb23 f702 	smuad	r7, r3, r2
 8005a52:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8005a56:	eb01 0208 	add.w	r2, r1, r8
 8005a5a:	1b12      	subs	r2, r2, r4
 8005a5c:	17d4      	asrs	r4, r2, #31
 8005a5e:	4613      	mov	r3, r2
 8005a60:	e9cd 3400 	strd	r3, r4, [sp]
 8005a64:	9c04      	ldr	r4, [sp, #16]
 8005a66:	9d01      	ldr	r5, [sp, #4]
 8005a68:	fba2 2304 	umull	r2, r3, r2, r4
 8005a6c:	fb04 3305 	mla	r3, r4, r5, r3
 8005a70:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8005a74:	f143 0500 	adc.w	r5, r3, #0
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	e9cd 4500 	strd	r4, r5, [sp]
 8005a7e:	03ea      	lsls	r2, r5, #15
 8005a80:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005a84:	2500      	movs	r5, #0
 8005a86:	fbc3 4502 	smlal	r4, r5, r3, r2
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005a90:	10ab      	asrs	r3, r5, #2
 8005a92:	f303 030f 	ssat	r3, #16, r3
 8005a96:	f829 3f02 	strh.w	r3, [r9, #2]!
 8005a9a:	9b05      	ldr	r3, [sp, #20]
 8005a9c:	f10a 0a01 	add.w	sl, sl, #1
 8005aa0:	459a      	cmp	sl, r3
 8005aa2:	44be      	add	lr, r7
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	d00e      	beq.n	8005ac6 <D24_1CH_HTONS_VOL_HP+0x10e>
 8005aa8:	7801      	ldrb	r1, [r0, #0]
 8005aaa:	78c2      	ldrb	r2, [r0, #3]
 8005aac:	020b      	lsls	r3, r1, #8
 8005aae:	f01a 0f01 	tst.w	sl, #1
 8005ab2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005ab6:	d0a4      	beq.n	8005a02 <D24_1CH_HTONS_VOL_HP+0x4a>
 8005ab8:	7885      	ldrb	r5, [r0, #2]
 8005aba:	0212      	lsls	r2, r2, #8
 8005abc:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3004      	adds	r0, #4
 8005ac4:	e7a0      	b.n	8005a08 <D24_1CH_HTONS_VOL_HP+0x50>
 8005ac6:	4673      	mov	r3, lr
 8005ac8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8005acc:	46da      	mov	sl, fp
 8005ace:	4645      	mov	r5, r8
 8005ad0:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8005ad4:	9b06      	ldr	r3, [sp, #24]
 8005ad6:	f8ce 601c 	str.w	r6, [lr, #28]
 8005ada:	2000      	movs	r0, #0
 8005adc:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8005ae0:	f8ce 3018 	str.w	r3, [lr, #24]
 8005ae4:	b009      	add	sp, #36	@ 0x24
 8005ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	4621      	mov	r1, r4
 8005aec:	e7f0      	b.n	8005ad0 <D24_1CH_HTONS_VOL_HP+0x118>
 8005aee:	bf00      	nop
 8005af0:	00030001 	.word	0x00030001
 8005af4:	00060007 	.word	0x00060007
 8005af8:	2000000c 	.word	0x2000000c

08005afc <D32_1CH_HTONS_VOL_HP>:
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	4682      	mov	sl, r0
 8005b02:	b087      	sub	sp, #28
 8005b04:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8005b06:	6993      	ldr	r3, [r2, #24]
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8005b0e:	69d5      	ldr	r5, [r2, #28]
 8005b10:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8005b12:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8005b16:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d070      	beq.n	8005c00 <D32_1CH_HTONS_VOL_HP+0x104>
 8005b1e:	468e      	mov	lr, r1
 8005b20:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8005c14 <D32_1CH_HTONS_VOL_HP+0x118>
 8005b24:	9205      	str	r2, [sp, #20]
 8005b26:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8005b2a:	46d3      	mov	fp, sl
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	46ca      	mov	sl, r9
 8005b30:	9103      	str	r1, [sp, #12]
 8005b32:	4627      	mov	r7, r4
 8005b34:	4699      	mov	r9, r3
 8005b36:	f85b 1b04 	ldr.w	r1, [fp], #4
 8005b3a:	ba49      	rev16	r1, r1
 8005b3c:	b2ca      	uxtb	r2, r1
 8005b3e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005b42:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005b46:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005b4a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005b4e:	0e09      	lsrs	r1, r1, #24
 8005b50:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8005b54:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8005b58:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8005b5c:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005b60:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005b64:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8005b68:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b6c:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8005b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b74:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b7c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8005b80:	4a20      	ldr	r2, [pc, #128]	@ (8005c04 <D32_1CH_HTONS_VOL_HP+0x108>)
 8005b82:	fb23 8802 	smlad	r8, r3, r2, r8
 8005b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b8a:	fb24 8102 	smlad	r1, r4, r2, r8
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8005b90:	fb23 9802 	smlad	r8, r3, r2, r9
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <D32_1CH_HTONS_VOL_HP+0x110>)
 8005b96:	fb24 8802 	smlad	r8, r4, r2, r8
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	fb23 f302 	smuad	r3, r3, r2
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <D32_1CH_HTONS_VOL_HP+0x114>)
 8005ba2:	fb24 3902 	smlad	r9, r4, r2, r3
 8005ba6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8005baa:	19a2      	adds	r2, r4, r6
 8005bac:	1a12      	subs	r2, r2, r0
 8005bae:	17d1      	asrs	r1, r2, #31
 8005bb0:	fba2 230a 	umull	r2, r3, r2, sl
 8005bb4:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8005bb8:	fb0a 3301 	mla	r3, sl, r1, r3
 8005bbc:	f143 0100 	adc.w	r1, r3, #0
 8005bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bc4:	038a      	lsls	r2, r1, #14
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005bcc:	2100      	movs	r1, #0
 8005bce:	fbc7 0102 	smlal	r0, r1, r7, r2
 8005bd2:	108a      	asrs	r2, r1, #2
 8005bd4:	005e      	lsls	r6, r3, #1
 8005bd6:	f302 020f 	ssat	r2, #16, r2
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	f82e 2b02 	strh.w	r2, [lr], #2
 8005be0:	459e      	cmp	lr, r3
 8005be2:	4620      	mov	r0, r4
 8005be4:	d1a7      	bne.n	8005b36 <D32_1CH_HTONS_VOL_HP+0x3a>
 8005be6:	9a05      	ldr	r2, [sp, #20]
 8005be8:	464b      	mov	r3, r9
 8005bea:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8005bee:	9b04      	ldr	r3, [sp, #16]
 8005bf0:	61d5      	str	r5, [r2, #28]
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8005bf8:	6193      	str	r3, [r2, #24]
 8005bfa:	b007      	add	sp, #28
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	463c      	mov	r4, r7
 8005c02:	e7f2      	b.n	8005bea <D32_1CH_HTONS_VOL_HP+0xee>
 8005c04:	00060003 	.word	0x00060003
 8005c08:	000a000c 	.word	0x000a000c
 8005c0c:	000c000a 	.word	0x000c000a
 8005c10:	00030006 	.word	0x00030006
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <D48_1CH_HTONS_VOL_HP>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8005c20:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005c22:	6993      	ldr	r3, [r2, #24]
 8005c24:	9702      	str	r7, [sp, #8]
 8005c26:	6a17      	ldr	r7, [r2, #32]
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 8005c2e:	69d6      	ldr	r6, [r2, #28]
 8005c30:	9705      	str	r7, [sp, #20]
 8005c32:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	f000 8093 	beq.w	8005d62 <D48_1CH_HTONS_VOL_HP+0x14a>
 8005c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c40:	46ba      	mov	sl, r7
 8005c42:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005c46:	3902      	subs	r1, #2
 8005c48:	4f47      	ldr	r7, [pc, #284]	@ (8005d68 <D48_1CH_HTONS_VOL_HP+0x150>)
 8005c4a:	9503      	str	r5, [sp, #12]
 8005c4c:	9101      	str	r1, [sp, #4]
 8005c4e:	469e      	mov	lr, r3
 8005c50:	9205      	str	r2, [sp, #20]
 8005c52:	e9d0 3500 	ldrd	r3, r5, [r0]
 8005c56:	3006      	adds	r0, #6
 8005c58:	ba5b      	rev16	r3, r3
 8005c5a:	ba6d      	rev16	r5, r5
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005c62:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005c66:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005c6a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005c6e:	0e1b      	lsrs	r3, r3, #24
 8005c70:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8005c74:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8005c78:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005c7c:	fa5f fb85 	uxtb.w	fp, r5
 8005c80:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8005c84:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8005c88:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005c8c:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8005c90:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8005c94:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8005c98:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005c9c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8005ca0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca8:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8005cac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005cb0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005cb4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005cb8:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8005cbc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005cc0:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8005cc4:	4b29      	ldr	r3, [pc, #164]	@ (8005d6c <D48_1CH_HTONS_VOL_HP+0x154>)
 8005cc6:	fb22 c103 	smlad	r1, r2, r3, ip
 8005cca:	4b29      	ldr	r3, [pc, #164]	@ (8005d70 <D48_1CH_HTONS_VOL_HP+0x158>)
 8005ccc:	fb28 1103 	smlad	r1, r8, r3, r1
 8005cd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005cd4:	fb25 1103 	smlad	r1, r5, r3, r1
 8005cd8:	4b26      	ldr	r3, [pc, #152]	@ (8005d74 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005cda:	fb22 ec03 	smlad	ip, r2, r3, lr
 8005cde:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8005ce2:	fb28 cc03 	smlad	ip, r8, r3, ip
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005ce8:	fb25 cc03 	smlad	ip, r5, r3, ip
 8005cec:	f04f 0e01 	mov.w	lr, #1
 8005cf0:	fb22 f20e 	smuad	r2, r2, lr
 8005cf4:	4b21      	ldr	r3, [pc, #132]	@ (8005d7c <D48_1CH_HTONS_VOL_HP+0x164>)
 8005cf6:	fb28 2803 	smlad	r8, r8, r3, r2
 8005cfa:	4b21      	ldr	r3, [pc, #132]	@ (8005d80 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005cfc:	fb25 8e03 	smlad	lr, r5, r3, r8
 8005d00:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8005d04:	190a      	adds	r2, r1, r4
 8005d06:	eba2 0209 	sub.w	r2, r2, r9
 8005d0a:	17d5      	asrs	r5, r2, #31
 8005d0c:	fba2 230a 	umull	r2, r3, r2, sl
 8005d10:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8005d14:	fb0a 3305 	mla	r3, sl, r5, r3
 8005d18:	f143 0500 	adc.w	r5, r3, #0
 8005d1c:	9b02      	ldr	r3, [sp, #8]
 8005d1e:	032a      	lsls	r2, r5, #12
 8005d20:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005d24:	f04f 0900 	mov.w	r9, #0
 8005d28:	fbc3 8902 	smlal	r8, r9, r3, r2
 8005d2c:	9a01      	ldr	r2, [sp, #4]
 8005d2e:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8005d32:	f303 030f 	ssat	r3, #16, r3
 8005d36:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	4283      	cmp	r3, r0
 8005d40:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8005d44:	4689      	mov	r9, r1
 8005d46:	d184      	bne.n	8005c52 <D48_1CH_HTONS_VOL_HP+0x3a>
 8005d48:	9a05      	ldr	r2, [sp, #20]
 8005d4a:	4673      	mov	r3, lr
 8005d4c:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8005d50:	9b04      	ldr	r3, [sp, #16]
 8005d52:	61d6      	str	r6, [r2, #28]
 8005d54:	2000      	movs	r0, #0
 8005d56:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8005d5a:	6193      	str	r3, [r2, #24]
 8005d5c:	b007      	add	sp, #28
 8005d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d62:	4649      	mov	r1, r9
 8005d64:	e7f2      	b.n	8005d4c <D48_1CH_HTONS_VOL_HP+0x134>
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c
 8005d6c:	000f000a 	.word	0x000f000a
 8005d70:	00060003 	.word	0x00060003
 8005d74:	00150019 	.word	0x00150019
 8005d78:	00190015 	.word	0x00190015
 8005d7c:	00030006 	.word	0x00030006
 8005d80:	000a000f 	.word	0x000a000f

08005d84 <D64_1CH_HTONS_VOL_HP>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	6913      	ldr	r3, [r2, #16]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8005d92:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8005d94:	9601      	str	r6, [sp, #4]
 8005d96:	4681      	mov	r9, r0
 8005d98:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8005d9a:	6a16      	ldr	r6, [r2, #32]
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8005da2:	69d3      	ldr	r3, [r2, #28]
 8005da4:	9602      	str	r6, [sp, #8]
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f000 809d 	beq.w	8005ee6 <D64_1CH_HTONS_VOL_HP+0x162>
 8005dac:	468e      	mov	lr, r1
 8005dae:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8005f20 <D64_1CH_HTONS_VOL_HP+0x19c>
 8005db2:	9205      	str	r2, [sp, #20]
 8005db4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8005db8:	9103      	str	r1, [sp, #12]
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f859 3b08 	ldr.w	r3, [r9], #8
 8005dc2:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8005dc6:	ba5b      	rev16	r3, r3
 8005dc8:	ba76      	rev16	r6, r6
 8005dca:	b2dc      	uxtb	r4, r3
 8005dcc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8005dd0:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8005dd4:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8005dd8:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	eb01 0b07 	add.w	fp, r1, r7
 8005de2:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8005de6:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8005dea:	b2f1      	uxtb	r1, r6
 8005dec:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8005df0:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8005df4:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8005df8:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8005dfc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005e00:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8005e04:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8005e08:	0e36      	lsrs	r6, r6, #24
 8005e0a:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8005e0e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005e12:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8005e16:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005e1a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8005e1e:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8005e22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005e26:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005e2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005e36:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8005e3a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005e3e:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8005e42:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005e46:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8005e4a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005e4e:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8005e52:	4b2b      	ldr	r3, [pc, #172]	@ (8005f00 <D64_1CH_HTONS_VOL_HP+0x17c>)
 8005e54:	0ab1      	lsrs	r1, r6, #10
 8005e56:	fb2b 8803 	smlad	r8, fp, r3, r8
 8005e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f04 <D64_1CH_HTONS_VOL_HP+0x180>)
 8005e5c:	fb2a 8803 	smlad	r8, sl, r3, r8
 8005e60:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <D64_1CH_HTONS_VOL_HP+0x184>)
 8005e62:	fb27 8803 	smlad	r8, r7, r3, r8
 8005e66:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8005e6a:	fb20 8604 	smlad	r6, r0, r4, r8
 8005e6e:	4b27      	ldr	r3, [pc, #156]	@ (8005f0c <D64_1CH_HTONS_VOL_HP+0x188>)
 8005e70:	fb2b 5803 	smlad	r8, fp, r3, r5
 8005e74:	fb20 8813 	smladx	r8, r0, r3, r8
 8005e78:	4b25      	ldr	r3, [pc, #148]	@ (8005f10 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8005e7a:	fb2a 8803 	smlad	r8, sl, r3, r8
 8005e7e:	fb27 8813 	smladx	r8, r7, r3, r8
 8005e82:	2401      	movs	r4, #1
 8005e84:	fb2b fb04 	smuad	fp, fp, r4
 8005e88:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <D64_1CH_HTONS_VOL_HP+0x190>)
 8005e8a:	fb2a ba03 	smlad	sl, sl, r3, fp
 8005e8e:	4b22      	ldr	r3, [pc, #136]	@ (8005f18 <D64_1CH_HTONS_VOL_HP+0x194>)
 8005e90:	fb27 a703 	smlad	r7, r7, r3, sl
 8005e94:	4b21      	ldr	r3, [pc, #132]	@ (8005f1c <D64_1CH_HTONS_VOL_HP+0x198>)
 8005e96:	fb20 7503 	smlad	r5, r0, r3, r7
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	9802      	ldr	r0, [sp, #8]
 8005e9e:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8005ea2:	4423      	add	r3, r4
 8005ea4:	1a9a      	subs	r2, r3, r2
 8005ea6:	17d7      	asrs	r7, r2, #31
 8005ea8:	fba2 2300 	umull	r2, r3, r2, r0
 8005eac:	fb00 3307 	mla	r3, r0, r7, r3
 8005eb0:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8005eb4:	f143 0b00 	adc.w	fp, r3, #0
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8005ebe:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8005ec2:	2700      	movs	r7, #0
 8005ec4:	fbc3 6702 	smlal	r6, r7, r3, r2
 8005ec8:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8005ecc:	10ba      	asrs	r2, r7, #2
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	f302 020f 	ssat	r2, #16, r2
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	f82e 2b02 	strh.w	r2, [lr], #2
 8005eda:	459e      	cmp	lr, r3
 8005edc:	4622      	mov	r2, r4
 8005ede:	f47f af6e 	bne.w	8005dbe <D64_1CH_HTONS_VOL_HP+0x3a>
 8005ee2:	9a05      	ldr	r2, [sp, #20]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	61d3      	str	r3, [r2, #28]
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	6193      	str	r3, [r2, #24]
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8005ef8:	b007      	add	sp, #28
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	bf00      	nop
 8005f00:	001c0015 	.word	0x001c0015
 8005f04:	000f000a 	.word	0x000f000a
 8005f08:	00060003 	.word	0x00060003
 8005f0c:	0024002a 	.word	0x0024002a
 8005f10:	002e0030 	.word	0x002e0030
 8005f14:	00030006 	.word	0x00030006
 8005f18:	000a000f 	.word	0x000a000f
 8005f1c:	0015001c 	.word	0x0015001c
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <D80_1CH_HTONS_VOL_HP>:
 8005f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	4615      	mov	r5, r2
 8005f2a:	b089      	sub	sp, #36	@ 0x24
 8005f2c:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8005f30:	692b      	ldr	r3, [r5, #16]
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8005f38:	9400      	str	r4, [sp, #0]
 8005f3a:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005f3c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8005f3e:	9403      	str	r4, [sp, #12]
 8005f40:	6a2c      	ldr	r4, [r5, #32]
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	9404      	str	r4, [sp, #16]
 8005f46:	69eb      	ldr	r3, [r5, #28]
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	f000 80d3 	beq.w	80060f4 <D80_1CH_HTONS_VOL_HP+0x1d0>
 8005f4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005f52:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	4c67      	ldr	r4, [pc, #412]	@ (80060f8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8005f5a:	9507      	str	r5, [sp, #28]
 8005f5c:	1e8a      	subs	r2, r1, #2
 8005f5e:	9202      	str	r2, [sp, #8]
 8005f60:	469b      	mov	fp, r3
 8005f62:	6807      	ldr	r7, [r0, #0]
 8005f64:	6842      	ldr	r2, [r0, #4]
 8005f66:	6883      	ldr	r3, [r0, #8]
 8005f68:	300a      	adds	r0, #10
 8005f6a:	ba7f      	rev16	r7, r7
 8005f6c:	ba52      	rev16	r2, r2
 8005f6e:	ba5b      	rev16	r3, r3
 8005f70:	b2fd      	uxtb	r5, r7
 8005f72:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8005f76:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8005f7a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8005f7e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8005f82:	44f3      	add	fp, lr
 8005f84:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8005f88:	0e3f      	lsrs	r7, r7, #24
 8005f8a:	fa5f fe82 	uxtb.w	lr, r2
 8005f8e:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8005f92:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8005f96:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8005f9a:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8005f9e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8005fa2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8005fa6:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8005faa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8005fae:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8005fb2:	0e12      	lsrs	r2, r2, #24
 8005fb4:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8005fb8:	fa5f fe83 	uxtb.w	lr, r3
 8005fbc:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8005fc0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fc4:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8005fc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005fcc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005fd0:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8005fd4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005fd8:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8005fdc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8005fe0:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005fe4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005fe8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005fec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005ff0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005ff4:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8005ff8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005ffc:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8006000:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006004:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006008:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800600c:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8006010:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8006014:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8006018:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 800601c:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8006020:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8006022:	9a00      	ldr	r2, [sp, #0]
 8006024:	fb21 2303 	smlad	r3, r1, r3, r2
 8006028:	4a35      	ldr	r2, [pc, #212]	@ (8006100 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800602a:	fb27 3302 	smlad	r3, r7, r2, r3
 800602e:	4a35      	ldr	r2, [pc, #212]	@ (8006104 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006030:	fb25 3302 	smlad	r3, r5, r2, r3
 8006034:	4a34      	ldr	r2, [pc, #208]	@ (8006108 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006036:	fb28 3302 	smlad	r3, r8, r2, r3
 800603a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800603e:	fb2e 3302 	smlad	r3, lr, r2, r3
 8006042:	4a32      	ldr	r2, [pc, #200]	@ (800610c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8006044:	fb21 cc02 	smlad	ip, r1, r2, ip
 8006048:	4a31      	ldr	r2, [pc, #196]	@ (8006110 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800604a:	fb27 cc02 	smlad	ip, r7, r2, ip
 800604e:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8006052:	fb25 c909 	smlad	r9, r5, r9, ip
 8006056:	4a2f      	ldr	r2, [pc, #188]	@ (8006114 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8006058:	fb28 9902 	smlad	r9, r8, r2, r9
 800605c:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800605e:	fb2e 9202 	smlad	r2, lr, r2, r9
 8006062:	f04f 0a01 	mov.w	sl, #1
 8006066:	9200      	str	r2, [sp, #0]
 8006068:	fb21 fa0a 	smuad	sl, r1, sl
 800606c:	4a2b      	ldr	r2, [pc, #172]	@ (800611c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800606e:	fb27 a702 	smlad	r7, r7, r2, sl
 8006072:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006074:	fb25 7702 	smlad	r7, r5, r2, r7
 8006078:	4a2a      	ldr	r2, [pc, #168]	@ (8006124 <D80_1CH_HTONS_VOL_HP+0x200>)
 800607a:	fb28 7202 	smlad	r2, r8, r2, r7
 800607e:	4d2a      	ldr	r5, [pc, #168]	@ (8006128 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006080:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8006084:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	9903      	ldr	r1, [sp, #12]
 800608c:	4413      	add	r3, r2
 800608e:	1b9e      	subs	r6, r3, r6
 8006090:	9b04      	ldr	r3, [sp, #16]
 8006092:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8006096:	fba6 5603 	umull	r5, r6, r6, r3
 800609a:	fb03 6309 	mla	r3, r3, r9, r6
 800609e:	462e      	mov	r6, r5
 80060a0:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 80060a4:	f143 0700 	adc.w	r7, r3, #0
 80060a8:	02bb      	lsls	r3, r7, #10
 80060aa:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80060ae:	f04f 0900 	mov.w	r9, #0
 80060b2:	fbc1 8903 	smlal	r8, r9, r1, r3
 80060b6:	9902      	ldr	r1, [sp, #8]
 80060b8:	007b      	lsls	r3, r7, #1
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80060c0:	f303 030f 	ssat	r3, #16, r3
 80060c4:	f821 3f02 	strh.w	r3, [r1, #2]!
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	9102      	str	r1, [sp, #8]
 80060cc:	4283      	cmp	r3, r0
 80060ce:	4616      	mov	r6, r2
 80060d0:	f47f af47 	bne.w	8005f62 <D80_1CH_HTONS_VOL_HP+0x3e>
 80060d4:	9d07      	ldr	r5, [sp, #28]
 80060d6:	465b      	mov	r3, fp
 80060d8:	61eb      	str	r3, [r5, #28]
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	9900      	ldr	r1, [sp, #0]
 80060de:	f8c5 c008 	str.w	ip, [r5, #8]
 80060e2:	e9c5 3204 	strd	r3, r2, [r5, #16]
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	60e9      	str	r1, [r5, #12]
 80060ea:	2000      	movs	r0, #0
 80060ec:	61ab      	str	r3, [r5, #24]
 80060ee:	b009      	add	sp, #36	@ 0x24
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	4632      	mov	r2, r6
 80060f6:	e7ef      	b.n	80060d8 <D80_1CH_HTONS_VOL_HP+0x1b4>
 80060f8:	2000000c 	.word	0x2000000c
 80060fc:	002d0024 	.word	0x002d0024
 8006100:	001c0015 	.word	0x001c0015
 8006104:	000f000a 	.word	0x000f000a
 8006108:	00060003 	.word	0x00060003
 800610c:	0037003f 	.word	0x0037003f
 8006110:	00450049 	.word	0x00450049
 8006114:	00490045 	.word	0x00490045
 8006118:	003f0037 	.word	0x003f0037
 800611c:	00030006 	.word	0x00030006
 8006120:	000a000f 	.word	0x000a000f
 8006124:	0015001c 	.word	0x0015001c
 8006128:	0024002d 	.word	0x0024002d

0800612c <D128_1CH_HTONS_VOL_HP>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	b093      	sub	sp, #76	@ 0x4c
 8006132:	6914      	ldr	r4, [r2, #16]
 8006134:	9404      	str	r4, [sp, #16]
 8006136:	6954      	ldr	r4, [r2, #20]
 8006138:	9406      	str	r4, [sp, #24]
 800613a:	6994      	ldr	r4, [r2, #24]
 800613c:	9410      	str	r4, [sp, #64]	@ 0x40
 800613e:	6894      	ldr	r4, [r2, #8]
 8006140:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8006142:	9403      	str	r4, [sp, #12]
 8006144:	68d4      	ldr	r4, [r2, #12]
 8006146:	9211      	str	r2, [sp, #68]	@ 0x44
 8006148:	69d6      	ldr	r6, [r2, #28]
 800614a:	9402      	str	r4, [sp, #8]
 800614c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800614e:	6a12      	ldr	r2, [r2, #32]
 8006150:	940d      	str	r4, [sp, #52]	@ 0x34
 8006152:	920e      	str	r2, [sp, #56]	@ 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 814a 	beq.w	80063ee <D128_1CH_HTONS_VOL_HP+0x2c2>
 800615a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800615e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006160:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 800642c <D128_1CH_HTONS_VOL_HP+0x300>
 8006164:	9107      	str	r1, [sp, #28]
 8006166:	f100 0310 	add.w	r3, r0, #16
 800616a:	469b      	mov	fp, r3
 800616c:	9605      	str	r6, [sp, #20]
 800616e:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8006172:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8006176:	ba49      	rev16	r1, r1
 8006178:	ba52      	rev16	r2, r2
 800617a:	ba5b      	rev16	r3, r3
 800617c:	fa90 fa90 	rev16.w	sl, r0
 8006180:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006184:	b2cc      	uxtb	r4, r1
 8006186:	9e05      	ldr	r6, [sp, #20]
 8006188:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800618c:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006190:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006194:	0e09      	lsrs	r1, r1, #24
 8006196:	4426      	add	r6, r4
 8006198:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800619c:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80061a0:	b2d0      	uxtb	r0, r2
 80061a2:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80061a6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80061aa:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 80061ae:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80061b2:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 80061b6:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80061ba:	0e12      	lsrs	r2, r2, #24
 80061bc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80061c0:	9401      	str	r4, [sp, #4]
 80061c2:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 80061c6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80061ca:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80061ce:	9705      	str	r7, [sp, #20]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 80061d6:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 80061da:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80061de:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80061e2:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 80061e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061ea:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80061ee:	0e1b      	lsrs	r3, r3, #24
 80061f0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80061f4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80061f8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80061fc:	fa5f f38a 	uxtb.w	r3, sl
 8006200:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006204:	960a      	str	r6, [sp, #40]	@ 0x28
 8006206:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800620a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800620e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006212:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006216:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006218:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800621c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006220:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006224:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8006228:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800622c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006230:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006234:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006238:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800623c:	9308      	str	r3, [sp, #32]
 800623e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006242:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006246:	920c      	str	r2, [sp, #48]	@ 0x30
 8006248:	9b01      	ldr	r3, [sp, #4]
 800624a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800624c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006250:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006254:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8006258:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800625c:	9b05      	ldr	r3, [sp, #20]
 800625e:	f8cd 9014 	str.w	r9, [sp, #20]
 8006262:	4691      	mov	r9, r2
 8006264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006266:	f8cd a004 	str.w	sl, [sp, #4]
 800626a:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 800626e:	9a01      	ldr	r2, [sp, #4]
 8006270:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006274:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8006278:	9b08      	ldr	r3, [sp, #32]
 800627a:	9a05      	ldr	r2, [sp, #20]
 800627c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006284:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006286:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800628a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800628e:	9201      	str	r2, [sp, #4]
 8006290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006292:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006296:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800629a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800629e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80062a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80062a6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80062aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80062ae:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80062b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b6:	0a92      	lsrs	r2, r2, #10
 80062b8:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 80062bc:	9205      	str	r2, [sp, #20]
 80062be:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80062c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80062c6:	4d4b      	ldr	r5, [pc, #300]	@ (80063f4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80062c8:	9a02      	ldr	r2, [sp, #8]
 80062ca:	fb29 2505 	smlad	r5, r9, r5, r2
 80062ce:	4a4a      	ldr	r2, [pc, #296]	@ (80063f8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80062d0:	fb2a 5502 	smlad	r5, sl, r2, r5
 80062d4:	4a49      	ldr	r2, [pc, #292]	@ (80063fc <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80062d6:	fb21 5502 	smlad	r5, r1, r2, r5
 80062da:	4a49      	ldr	r2, [pc, #292]	@ (8006400 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80062dc:	fb24 5502 	smlad	r5, r4, r2, r5
 80062e0:	4a48      	ldr	r2, [pc, #288]	@ (8006404 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80062e2:	9e01      	ldr	r6, [sp, #4]
 80062e4:	fb26 5502 	smlad	r5, r6, r2, r5
 80062e8:	4a47      	ldr	r2, [pc, #284]	@ (8006408 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80062ea:	fb20 5502 	smlad	r5, r0, r2, r5
 80062ee:	4a47      	ldr	r2, [pc, #284]	@ (800640c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80062f0:	fb23 5502 	smlad	r5, r3, r2, r5
 80062f4:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 80062f8:	fb27 520c 	smlad	r2, r7, ip, r5
 80062fc:	4616      	mov	r6, r2
 80062fe:	9d03      	ldr	r5, [sp, #12]
 8006300:	4a43      	ldr	r2, [pc, #268]	@ (8006410 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006302:	fb29 5c02 	smlad	ip, r9, r2, r5
 8006306:	4a43      	ldr	r2, [pc, #268]	@ (8006414 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8006308:	fb2a ce02 	smlad	lr, sl, r2, ip
 800630c:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8006430 <D128_1CH_HTONS_VOL_HP+0x304>
 8006310:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8006314:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 8006434 <D128_1CH_HTONS_VOL_HP+0x308>
 8006318:	fb24 cc0e 	smlad	ip, r4, lr, ip
 800631c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8006438 <D128_1CH_HTONS_VOL_HP+0x30c>
 8006320:	9d01      	ldr	r5, [sp, #4]
 8006322:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8006326:	f8df c114 	ldr.w	ip, [pc, #276]	@ 800643c <D128_1CH_HTONS_VOL_HP+0x310>
 800632a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800632e:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8006440 <D128_1CH_HTONS_VOL_HP+0x314>
 8006332:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8006336:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8006444 <D128_1CH_HTONS_VOL_HP+0x318>
 800633a:	fb27 c20e 	smlad	r2, r7, lr, ip
 800633e:	f04f 0c01 	mov.w	ip, #1
 8006342:	9202      	str	r2, [sp, #8]
 8006344:	fb29 fc0c 	smuad	ip, r9, ip
 8006348:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8006448 <D128_1CH_HTONS_VOL_HP+0x31c>
 800634c:	fb2a ca09 	smlad	sl, sl, r9, ip
 8006350:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 800644c <D128_1CH_HTONS_VOL_HP+0x320>
 8006354:	fb21 a909 	smlad	r9, r1, r9, sl
 8006358:	492f      	ldr	r1, [pc, #188]	@ (8006418 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800635a:	fb24 9901 	smlad	r9, r4, r1, r9
 800635e:	492f      	ldr	r1, [pc, #188]	@ (800641c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8006360:	fb25 9901 	smlad	r9, r5, r1, r9
 8006364:	492e      	ldr	r1, [pc, #184]	@ (8006420 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8006366:	fb20 9901 	smlad	r9, r0, r1, r9
 800636a:	492e      	ldr	r1, [pc, #184]	@ (8006424 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800636c:	fb23 9301 	smlad	r3, r3, r1, r9
 8006370:	482d      	ldr	r0, [pc, #180]	@ (8006428 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8006372:	fb27 3300 	smlad	r3, r7, r0, r3
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	9b04      	ldr	r3, [sp, #16]
 800637a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800637c:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8006380:	442b      	add	r3, r5
 8006382:	461a      	mov	r2, r3
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	9506      	str	r5, [sp, #24]
 8006388:	1ad2      	subs	r2, r2, r3
 800638a:	17d1      	asrs	r1, r2, #31
 800638c:	fba2 2304 	umull	r2, r3, r2, r4
 8006390:	fb04 3301 	mla	r3, r4, r1, r3
 8006394:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8006398:	f143 0a00 	adc.w	sl, r3, #0
 800639c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800639e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80063a2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80063a6:	2100      	movs	r1, #0
 80063a8:	fbc3 0102 	smlal	r0, r1, r3, r2
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	108a      	asrs	r2, r1, #2
 80063b0:	f302 020f 	ssat	r2, #16, r2
 80063b4:	f823 2b02 	strh.w	r2, [r3], #2
 80063b8:	ea4f 024a 	mov.w	r2, sl, lsl #1
 80063bc:	9204      	str	r2, [sp, #16]
 80063be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f10b 0b10 	add.w	fp, fp, #16
 80063c8:	f47f aed1 	bne.w	800616e <D128_1CH_HTONS_VOL_HP+0x42>
 80063cc:	9e05      	ldr	r6, [sp, #20]
 80063ce:	4629      	mov	r1, r5
 80063d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063d2:	9803      	ldr	r0, [sp, #12]
 80063d4:	6098      	str	r0, [r3, #8]
 80063d6:	9802      	ldr	r0, [sp, #8]
 80063d8:	60d8      	str	r0, [r3, #12]
 80063da:	9804      	ldr	r0, [sp, #16]
 80063dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80063de:	61de      	str	r6, [r3, #28]
 80063e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80063e4:	2000      	movs	r0, #0
 80063e6:	619a      	str	r2, [r3, #24]
 80063e8:	b013      	add	sp, #76	@ 0x4c
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	9906      	ldr	r1, [sp, #24]
 80063f0:	e7ee      	b.n	80063d0 <D128_1CH_HTONS_VOL_HP+0x2a4>
 80063f2:	bf00      	nop
 80063f4:	00780069 	.word	0x00780069
 80063f8:	005b004e 	.word	0x005b004e
 80063fc:	00420037 	.word	0x00420037
 8006400:	002d0024 	.word	0x002d0024
 8006404:	001c0015 	.word	0x001c0015
 8006408:	000f000a 	.word	0x000f000a
 800640c:	00060003 	.word	0x00060003
 8006410:	00880096 	.word	0x00880096
 8006414:	00a200ac 	.word	0x00a200ac
 8006418:	0015001c 	.word	0x0015001c
 800641c:	0024002d 	.word	0x0024002d
 8006420:	00370042 	.word	0x00370042
 8006424:	004e005b 	.word	0x004e005b
 8006428:	00690078 	.word	0x00690078
 800642c:	2000000c 	.word	0x2000000c
 8006430:	00b400ba 	.word	0x00b400ba
 8006434:	00be00c0 	.word	0x00be00c0
 8006438:	00c000be 	.word	0x00c000be
 800643c:	00ba00b4 	.word	0x00ba00b4
 8006440:	00ac00a2 	.word	0x00ac00a2
 8006444:	00960088 	.word	0x00960088
 8006448:	00030006 	.word	0x00030006
 800644c:	000a000f 	.word	0x000a000f

08006450 <PDM_Filter_Init>:
 8006450:	4a59      	ldr	r2, [pc, #356]	@ (80065b8 <PDM_Filter_Init+0x168>)
 8006452:	495a      	ldr	r1, [pc, #360]	@ (80065bc <PDM_Filter_Init+0x16c>)
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	680b      	ldr	r3, [r1, #0]
 8006460:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8006464:	4013      	ands	r3, r2
 8006466:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800646a:	42ab      	cmp	r3, r5
 800646c:	4604      	mov	r4, r0
 800646e:	d044      	beq.n	80064fa <PDM_Filter_Init+0xaa>
 8006470:	680b      	ldr	r3, [r1, #0]
 8006472:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8006476:	401a      	ands	r2, r3
 8006478:	428a      	cmp	r2, r1
 800647a:	d03e      	beq.n	80064fa <PDM_Filter_Init+0xaa>
 800647c:	4b50      	ldr	r3, [pc, #320]	@ (80065c0 <PDM_Filter_Init+0x170>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	2900      	cmp	r1, #0
 8006486:	d1fc      	bne.n	8006482 <PDM_Filter_Init+0x32>
 8006488:	4b4e      	ldr	r3, [pc, #312]	@ (80065c4 <PDM_Filter_Init+0x174>)
 800648a:	4a4f      	ldr	r2, [pc, #316]	@ (80065c8 <PDM_Filter_Init+0x178>)
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b4e      	ldr	r3, [pc, #312]	@ (80065cc <PDM_Filter_Init+0x17c>)
 8006492:	429a      	cmp	r2, r3
 8006494:	f104 000c 	add.w	r0, r4, #12
 8006498:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800649c:	d047      	beq.n	800652e <PDM_Filter_Init+0xde>
 800649e:	f000 f9c7 	bl	8006830 <memset>
 80064a2:	2300      	movs	r3, #0
 80064a4:	6463      	str	r3, [r4, #68]	@ 0x44
 80064a6:	8820      	ldrh	r0, [r4, #0]
 80064a8:	8963      	ldrh	r3, [r4, #10]
 80064aa:	8922      	ldrh	r2, [r4, #8]
 80064ac:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80064ae:	2801      	cmp	r0, #1
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	61a3      	str	r3, [r4, #24]
 80064b6:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80064ba:	60e3      	str	r3, [r4, #12]
 80064bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80064be:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80064c2:	6423      	str	r3, [r4, #64]	@ 0x40
 80064c4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80064c6:	d93a      	bls.n	800653e <PDM_Filter_Init+0xee>
 80064c8:	2003      	movs	r0, #3
 80064ca:	2302      	movs	r3, #2
 80064cc:	8862      	ldrh	r2, [r4, #2]
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	d932      	bls.n	8006538 <PDM_Filter_Init+0xe8>
 80064d2:	2140      	movs	r1, #64	@ 0x40
 80064d4:	2300      	movs	r3, #0
 80064d6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80064d8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80064dc:	6862      	ldr	r2, [r4, #4]
 80064de:	bf04      	itt	eq
 80064e0:	6421      	streq	r1, [r4, #64]	@ 0x40
 80064e2:	460b      	moveq	r3, r1
 80064e4:	b11a      	cbz	r2, 80064ee <PDM_Filter_Init+0x9e>
 80064e6:	f043 0310 	orr.w	r3, r3, #16
 80064ea:	6423      	str	r3, [r4, #64]	@ 0x40
 80064ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80064ee:	2200      	movs	r2, #0
 80064f0:	8722      	strh	r2, [r4, #56]	@ 0x38
 80064f2:	b908      	cbnz	r0, 80064f8 <PDM_Filter_Init+0xa8>
 80064f4:	3380      	adds	r3, #128	@ 0x80
 80064f6:	6423      	str	r3, [r4, #64]	@ 0x40
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fa:	4b35      	ldr	r3, [pc, #212]	@ (80065d0 <PDM_Filter_Init+0x180>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1bc      	bne.n	800647c <PDM_Filter_Init+0x2c>
 8006502:	4a34      	ldr	r2, [pc, #208]	@ (80065d4 <PDM_Filter_Init+0x184>)
 8006504:	6813      	ldr	r3, [r2, #0]
 8006506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800650e:	d006      	beq.n	800651e <PDM_Filter_Init+0xce>
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	f240 4283 	movw	r2, #1155	@ 0x483
 8006516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651a:	4293      	cmp	r3, r2
 800651c:	d1ae      	bne.n	800647c <PDM_Filter_Init+0x2c>
 800651e:	4b2e      	ldr	r3, [pc, #184]	@ (80065d8 <PDM_Filter_Init+0x188>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	2900      	cmp	r1, #0
 8006528:	d1fc      	bne.n	8006524 <PDM_Filter_Init+0xd4>
 800652a:	4b2c      	ldr	r3, [pc, #176]	@ (80065dc <PDM_Filter_Init+0x18c>)
 800652c:	e7ad      	b.n	800648a <PDM_Filter_Init+0x3a>
 800652e:	f000 f97f 	bl	8006830 <memset>
 8006532:	4b26      	ldr	r3, [pc, #152]	@ (80065cc <PDM_Filter_Init+0x17c>)
 8006534:	6463      	str	r3, [r4, #68]	@ 0x44
 8006536:	e7b6      	b.n	80064a6 <PDM_Filter_Init+0x56>
 8006538:	d038      	beq.n	80065ac <PDM_Filter_Init+0x15c>
 800653a:	4618      	mov	r0, r3
 800653c:	e7c9      	b.n	80064d2 <PDM_Filter_Init+0x82>
 800653e:	4d28      	ldr	r5, [pc, #160]	@ (80065e0 <PDM_Filter_Init+0x190>)
 8006540:	782a      	ldrb	r2, [r5, #0]
 8006542:	d01a      	beq.n	800657a <PDM_Filter_Init+0x12a>
 8006544:	2a01      	cmp	r2, #1
 8006546:	d001      	beq.n	800654c <PDM_Filter_Init+0xfc>
 8006548:	2001      	movs	r0, #1
 800654a:	e7bf      	b.n	80064cc <PDM_Filter_Init+0x7c>
 800654c:	4925      	ldr	r1, [pc, #148]	@ (80065e4 <PDM_Filter_Init+0x194>)
 800654e:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 80065ec <PDM_Filter_Init+0x19c>
 8006552:	4f25      	ldr	r7, [pc, #148]	@ (80065e8 <PDM_Filter_Init+0x198>)
 8006554:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8006558:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800655c:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8006560:	ea02 0007 	and.w	r0, r2, r7
 8006564:	4303      	orrs	r3, r0
 8006566:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800656a:	4413      	add	r3, r2
 800656c:	428e      	cmp	r6, r1
 800656e:	600b      	str	r3, [r1, #0]
 8006570:	d1f2      	bne.n	8006558 <PDM_Filter_Init+0x108>
 8006572:	2300      	movs	r3, #0
 8006574:	702b      	strb	r3, [r5, #0]
 8006576:	2001      	movs	r0, #1
 8006578:	e7a8      	b.n	80064cc <PDM_Filter_Init+0x7c>
 800657a:	2a00      	cmp	r2, #0
 800657c:	d1a6      	bne.n	80064cc <PDM_Filter_Init+0x7c>
 800657e:	4919      	ldr	r1, [pc, #100]	@ (80065e4 <PDM_Filter_Init+0x194>)
 8006580:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80065ec <PDM_Filter_Init+0x19c>
 8006584:	4f18      	ldr	r7, [pc, #96]	@ (80065e8 <PDM_Filter_Init+0x198>)
 8006586:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800658a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800658e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8006592:	ea02 0007 	and.w	r0, r2, r7
 8006596:	4303      	orrs	r3, r0
 8006598:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800659c:	4413      	add	r3, r2
 800659e:	428e      	cmp	r6, r1
 80065a0:	600b      	str	r3, [r1, #0]
 80065a2:	d1f2      	bne.n	800658a <PDM_Filter_Init+0x13a>
 80065a4:	2001      	movs	r0, #1
 80065a6:	7028      	strb	r0, [r5, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	e78f      	b.n	80064cc <PDM_Filter_Init+0x7c>
 80065ac:	2220      	movs	r2, #32
 80065ae:	4618      	mov	r0, r3
 80065b0:	6422      	str	r2, [r4, #64]	@ 0x40
 80065b2:	4613      	mov	r3, r2
 80065b4:	2160      	movs	r1, #96	@ 0x60
 80065b6:	e78e      	b.n	80064d6 <PDM_Filter_Init+0x86>
 80065b8:	e0002000 	.word	0xe0002000
 80065bc:	e000ed00 	.word	0xe000ed00
 80065c0:	40023008 	.word	0x40023008
 80065c4:	40023000 	.word	0x40023000
 80065c8:	f407a5c2 	.word	0xf407a5c2
 80065cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80065d0:	e0042000 	.word	0xe0042000
 80065d4:	5c001000 	.word	0x5c001000
 80065d8:	58024c08 	.word	0x58024c08
 80065dc:	58024c00 	.word	0x58024c00
 80065e0:	20000afa 	.word	0x20000afa
 80065e4:	20000008 	.word	0x20000008
 80065e8:	000ffc00 	.word	0x000ffc00
 80065ec:	3ff00000 	.word	0x3ff00000

080065f0 <PDM_Filter_setConfig>:
 80065f0:	4b6d      	ldr	r3, [pc, #436]	@ (80067a8 <PDM_Filter_setConfig+0x1b8>)
 80065f2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d12f      	bne.n	8006658 <PDM_Filter_setConfig+0x68>
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	880e      	ldrh	r6, [r1, #0]
 80065fc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80065fe:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8006602:	ed2d 8b02 	vpush	{d8}
 8006606:	4604      	mov	r4, r0
 8006608:	1e72      	subs	r2, r6, #1
 800660a:	460d      	mov	r5, r1
 800660c:	2a06      	cmp	r2, #6
 800660e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006612:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8006616:	6421      	str	r1, [r4, #64]	@ 0x40
 8006618:	b083      	sub	sp, #12
 800661a:	d904      	bls.n	8006626 <PDM_Filter_setConfig+0x36>
 800661c:	42b8      	cmp	r0, r7
 800661e:	f000 80bb 	beq.w	8006798 <PDM_Filter_setConfig+0x1a8>
 8006622:	2008      	movs	r0, #8
 8006624:	e01d      	b.n	8006662 <PDM_Filter_setConfig+0x72>
 8006626:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8006628:	42b2      	cmp	r2, r6
 800662a:	d070      	beq.n	800670e <PDM_Filter_setConfig+0x11e>
 800662c:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	4333      	orrs	r3, r6
 8006636:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800663a:	6423      	str	r3, [r4, #64]	@ 0x40
 800663c:	2a70      	cmp	r2, #112	@ 0x70
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	f103 33ff 	add.w	r3, r3, #4294967295
 8006646:	d067      	beq.n	8006718 <PDM_Filter_setConfig+0x128>
 8006648:	2b06      	cmp	r3, #6
 800664a:	d809      	bhi.n	8006660 <PDM_Filter_setConfig+0x70>
 800664c:	e8df f003 	tbb	[pc, r3]
 8006650:	89868380 	.word	0x89868380
 8006654:	8f8c      	.short	0x8f8c
 8006656:	7d          	.byte	0x7d
 8006657:	00          	.byte	0x00
 8006658:	2004      	movs	r0, #4
 800665a:	4770      	bx	lr
 800665c:	4b53      	ldr	r3, [pc, #332]	@ (80067ac <PDM_Filter_setConfig+0x1bc>)
 800665e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006660:	2000      	movs	r0, #0
 8006662:	f117 0f0c 	cmn.w	r7, #12
 8006666:	da0a      	bge.n	800667e <PDM_Filter_setConfig+0x8e>
 8006668:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 800666c:	3040      	adds	r0, #64	@ 0x40
 800666e:	80ab      	strh	r3, [r5, #4]
 8006670:	886b      	ldrh	r3, [r5, #2]
 8006672:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006674:	8626      	strh	r6, [r4, #48]	@ 0x30
 8006676:	b003      	add	sp, #12
 8006678:	ecbd 8b02 	vpop	{d8}
 800667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667e:	2f33      	cmp	r7, #51	@ 0x33
 8006680:	dc41      	bgt.n	8006706 <PDM_Filter_setConfig+0x116>
 8006682:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	3b01      	subs	r3, #1
 800668a:	2b06      	cmp	r3, #6
 800668c:	d858      	bhi.n	8006740 <PDM_Filter_setConfig+0x150>
 800668e:	4948      	ldr	r1, [pc, #288]	@ (80067b0 <PDM_Filter_setConfig+0x1c0>)
 8006690:	4a48      	ldr	r2, [pc, #288]	@ (80067b4 <PDM_Filter_setConfig+0x1c4>)
 8006692:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80067b8 <PDM_Filter_setConfig+0x1c8>
 8006696:	9001      	str	r0, [sp, #4]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4419      	add	r1, r3
 800669c:	edd1 7a00 	vldr	s15, [r1]
 80066a0:	4413      	add	r3, r2
 80066a2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80066a6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80066aa:	ed93 8a00 	vldr	s16, [r3]
 80066ae:	f000 f8ff 	bl	80068b0 <powf>
 80066b2:	9801      	ldr	r0, [sp, #4]
 80066b4:	eef0 8a40 	vmov.f32	s17, s0
 80066b8:	ee07 7a10 	vmov	s14, r7
 80066bc:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80067bc <PDM_Filter_setConfig+0x1cc>
 80066c0:	9001      	str	r0, [sp, #4]
 80066c2:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 80066c6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80066ca:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80066ce:	f000 f8ef 	bl	80068b0 <powf>
 80066d2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80066d6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80066da:	f000 f94b 	bl	8006974 <roundf>
 80066de:	9801      	ldr	r0, [sp, #4]
 80066e0:	886b      	ldrh	r3, [r5, #2]
 80066e2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80066e4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80066e8:	8727      	strh	r7, [r4, #56]	@ 0x38
 80066ea:	8626      	strh	r6, [r4, #48]	@ 0x30
 80066ec:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d1c0      	bne.n	8006676 <PDM_Filter_setConfig+0x86>
 80066f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066f6:	2000      	movs	r0, #0
 80066f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80066fe:	b003      	add	sp, #12
 8006700:	ecbd 8b02 	vpop	{d8}
 8006704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006706:	2333      	movs	r3, #51	@ 0x33
 8006708:	3040      	adds	r0, #64	@ 0x40
 800670a:	80ab      	strh	r3, [r5, #4]
 800670c:	e7b0      	b.n	8006670 <PDM_Filter_setConfig+0x80>
 800670e:	42b8      	cmp	r0, r7
 8006710:	d1a6      	bne.n	8006660 <PDM_Filter_setConfig+0x70>
 8006712:	886b      	ldrh	r3, [r5, #2]
 8006714:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006716:	e7ed      	b.n	80066f4 <PDM_Filter_setConfig+0x104>
 8006718:	2b06      	cmp	r3, #6
 800671a:	d8a1      	bhi.n	8006660 <PDM_Filter_setConfig+0x70>
 800671c:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <PDM_Filter_setConfig+0x134>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006793 	.word	0x08006793
 8006728:	0800678d 	.word	0x0800678d
 800672c:	08006781 	.word	0x08006781
 8006730:	0800677b 	.word	0x0800677b
 8006734:	0800665d 	.word	0x0800665d
 8006738:	08006775 	.word	0x08006775
 800673c:	08006787 	.word	0x08006787
 8006740:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 80067c0 <PDM_Filter_setConfig+0x1d0>
 8006744:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 80067c4 <PDM_Filter_setConfig+0x1d4>
 8006748:	e7b6      	b.n	80066b8 <PDM_Filter_setConfig+0xc8>
 800674a:	4b1f      	ldr	r3, [pc, #124]	@ (80067c8 <PDM_Filter_setConfig+0x1d8>)
 800674c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800674e:	e787      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006750:	4b1e      	ldr	r3, [pc, #120]	@ (80067cc <PDM_Filter_setConfig+0x1dc>)
 8006752:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006754:	e784      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006756:	4b1e      	ldr	r3, [pc, #120]	@ (80067d0 <PDM_Filter_setConfig+0x1e0>)
 8006758:	64a3      	str	r3, [r4, #72]	@ 0x48
 800675a:	e781      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 800675c:	4b1d      	ldr	r3, [pc, #116]	@ (80067d4 <PDM_Filter_setConfig+0x1e4>)
 800675e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006760:	e77e      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006762:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <PDM_Filter_setConfig+0x1e8>)
 8006764:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006766:	e77b      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006768:	4b1c      	ldr	r3, [pc, #112]	@ (80067dc <PDM_Filter_setConfig+0x1ec>)
 800676a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800676c:	e778      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 800676e:	4b1c      	ldr	r3, [pc, #112]	@ (80067e0 <PDM_Filter_setConfig+0x1f0>)
 8006770:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006772:	e775      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006774:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <PDM_Filter_setConfig+0x1f4>)
 8006776:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006778:	e772      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 800677a:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <PDM_Filter_setConfig+0x1f8>)
 800677c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800677e:	e76f      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006780:	4b1a      	ldr	r3, [pc, #104]	@ (80067ec <PDM_Filter_setConfig+0x1fc>)
 8006782:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006784:	e76c      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006786:	4b1a      	ldr	r3, [pc, #104]	@ (80067f0 <PDM_Filter_setConfig+0x200>)
 8006788:	64a3      	str	r3, [r4, #72]	@ 0x48
 800678a:	e769      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 800678c:	4b19      	ldr	r3, [pc, #100]	@ (80067f4 <PDM_Filter_setConfig+0x204>)
 800678e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006790:	e766      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006792:	4b19      	ldr	r3, [pc, #100]	@ (80067f8 <PDM_Filter_setConfig+0x208>)
 8006794:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006796:	e763      	b.n	8006660 <PDM_Filter_setConfig+0x70>
 8006798:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800679a:	42b3      	cmp	r3, r6
 800679c:	f47f af41 	bne.w	8006622 <PDM_Filter_setConfig+0x32>
 80067a0:	886b      	ldrh	r3, [r5, #2]
 80067a2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80067a4:	2008      	movs	r0, #8
 80067a6:	e766      	b.n	8006676 <PDM_Filter_setConfig+0x86>
 80067a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80067ac:	080058d1 	.word	0x080058d1
 80067b0:	080070c4 	.word	0x080070c4
 80067b4:	080070e0 	.word	0x080070e0
 80067b8:	42000000 	.word	0x42000000
 80067bc:	3d4ccccd 	.word	0x3d4ccccd
 80067c0:	4f800000 	.word	0x4f800000
 80067c4:	00000000 	.word	0x00000000
 80067c8:	08004cd1 	.word	0x08004cd1
 80067cc:	08004e59 	.word	0x08004e59
 80067d0:	08005041 	.word	0x08005041
 80067d4:	0800525d 	.word	0x0800525d
 80067d8:	080054f1 	.word	0x080054f1
 80067dc:	08004a31 	.word	0x08004a31
 80067e0:	08004b49 	.word	0x08004b49
 80067e4:	080059b9 	.word	0x080059b9
 80067e8:	0800612d 	.word	0x0800612d
 80067ec:	08005f25 	.word	0x08005f25
 80067f0:	08005afd 	.word	0x08005afd
 80067f4:	08005d85 	.word	0x08005d85
 80067f8:	08005c19 	.word	0x08005c19

080067fc <PDM_Filter>:
 80067fc:	b410      	push	{r4}
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <PDM_Filter+0x30>)
 8006800:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8006802:	429c      	cmp	r4, r3
 8006804:	d107      	bne.n	8006816 <PDM_Filter+0x1a>
 8006806:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006808:	05dc      	lsls	r4, r3, #23
 800680a:	d508      	bpl.n	800681e <PDM_Filter+0x22>
 800680c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800680e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006812:	320c      	adds	r2, #12
 8006814:	4718      	bx	r3
 8006816:	2004      	movs	r0, #4
 8006818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006822:	bf14      	ite	ne
 8006824:	2020      	movne	r0, #32
 8006826:	2030      	moveq	r0, #48	@ 0x30
 8006828:	e7f6      	b.n	8006818 <PDM_Filter+0x1c>
 800682a:	bf00      	nop
 800682c:	b5e8b5cd 	.word	0xb5e8b5cd

08006830 <memset>:
 8006830:	4402      	add	r2, r0
 8006832:	4603      	mov	r3, r0
 8006834:	4293      	cmp	r3, r2
 8006836:	d100      	bne.n	800683a <memset+0xa>
 8006838:	4770      	bx	lr
 800683a:	f803 1b01 	strb.w	r1, [r3], #1
 800683e:	e7f9      	b.n	8006834 <memset+0x4>

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	@ (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000040c 	.word	0x2000040c

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	@ (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	@ (8006890 <__libc_init_array+0x44>)
 8006860:	f000 fc14 	bl	800708c <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	0800711c 	.word	0x0800711c
 8006888:	0800711c 	.word	0x0800711c
 800688c:	0800711c 	.word	0x0800711c
 8006890:	08007120 	.word	0x08007120

08006894 <memcpy>:
 8006894:	440a      	add	r2, r1
 8006896:	4291      	cmp	r1, r2
 8006898:	f100 33ff 	add.w	r3, r0, #4294967295
 800689c:	d100      	bne.n	80068a0 <memcpy+0xc>
 800689e:	4770      	bx	lr
 80068a0:	b510      	push	{r4, lr}
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068aa:	4291      	cmp	r1, r2
 80068ac:	d1f9      	bne.n	80068a2 <memcpy+0xe>
 80068ae:	bd10      	pop	{r4, pc}

080068b0 <powf>:
 80068b0:	b508      	push	{r3, lr}
 80068b2:	ed2d 8b04 	vpush	{d8-d9}
 80068b6:	eeb0 8a60 	vmov.f32	s16, s1
 80068ba:	eeb0 9a40 	vmov.f32	s18, s0
 80068be:	f000 f87d 	bl	80069bc <__ieee754_powf>
 80068c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	eef0 8a40 	vmov.f32	s17, s0
 80068ce:	d63e      	bvs.n	800694e <powf+0x9e>
 80068d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80068d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d8:	d112      	bne.n	8006900 <powf+0x50>
 80068da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	d039      	beq.n	8006958 <powf+0xa8>
 80068e4:	eeb0 0a48 	vmov.f32	s0, s16
 80068e8:	f000 f839 	bl	800695e <finitef>
 80068ec:	b378      	cbz	r0, 800694e <powf+0x9e>
 80068ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80068f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f6:	d52a      	bpl.n	800694e <powf+0x9e>
 80068f8:	f7ff ffa2 	bl	8006840 <__errno>
 80068fc:	2322      	movs	r3, #34	@ 0x22
 80068fe:	e014      	b.n	800692a <powf+0x7a>
 8006900:	f000 f82d 	bl	800695e <finitef>
 8006904:	b998      	cbnz	r0, 800692e <powf+0x7e>
 8006906:	eeb0 0a49 	vmov.f32	s0, s18
 800690a:	f000 f828 	bl	800695e <finitef>
 800690e:	b170      	cbz	r0, 800692e <powf+0x7e>
 8006910:	eeb0 0a48 	vmov.f32	s0, s16
 8006914:	f000 f823 	bl	800695e <finitef>
 8006918:	b148      	cbz	r0, 800692e <powf+0x7e>
 800691a:	eef4 8a68 	vcmp.f32	s17, s17
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	d7e9      	bvc.n	80068f8 <powf+0x48>
 8006924:	f7ff ff8c 	bl	8006840 <__errno>
 8006928:	2321      	movs	r3, #33	@ 0x21
 800692a:	6003      	str	r3, [r0, #0]
 800692c:	e00f      	b.n	800694e <powf+0x9e>
 800692e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006936:	d10a      	bne.n	800694e <powf+0x9e>
 8006938:	eeb0 0a49 	vmov.f32	s0, s18
 800693c:	f000 f80f 	bl	800695e <finitef>
 8006940:	b128      	cbz	r0, 800694e <powf+0x9e>
 8006942:	eeb0 0a48 	vmov.f32	s0, s16
 8006946:	f000 f80a 	bl	800695e <finitef>
 800694a:	2800      	cmp	r0, #0
 800694c:	d1d4      	bne.n	80068f8 <powf+0x48>
 800694e:	eeb0 0a68 	vmov.f32	s0, s17
 8006952:	ecbd 8b04 	vpop	{d8-d9}
 8006956:	bd08      	pop	{r3, pc}
 8006958:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800695c:	e7f7      	b.n	800694e <powf+0x9e>

0800695e <finitef>:
 800695e:	ee10 3a10 	vmov	r3, s0
 8006962:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006966:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800696a:	bfac      	ite	ge
 800696c:	2000      	movge	r0, #0
 800696e:	2001      	movlt	r0, #1
 8006970:	4770      	bx	lr
	...

08006974 <roundf>:
 8006974:	ee10 0a10 	vmov	r0, s0
 8006978:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800697c:	3a7f      	subs	r2, #127	@ 0x7f
 800697e:	2a16      	cmp	r2, #22
 8006980:	dc15      	bgt.n	80069ae <roundf+0x3a>
 8006982:	2a00      	cmp	r2, #0
 8006984:	da08      	bge.n	8006998 <roundf+0x24>
 8006986:	3201      	adds	r2, #1
 8006988:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800698c:	d101      	bne.n	8006992 <roundf+0x1e>
 800698e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8006992:	ee00 3a10 	vmov	s0, r3
 8006996:	4770      	bx	lr
 8006998:	4907      	ldr	r1, [pc, #28]	@ (80069b8 <roundf+0x44>)
 800699a:	4111      	asrs	r1, r2
 800699c:	4201      	tst	r1, r0
 800699e:	d0fa      	beq.n	8006996 <roundf+0x22>
 80069a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80069a4:	4113      	asrs	r3, r2
 80069a6:	4403      	add	r3, r0
 80069a8:	ea23 0301 	bic.w	r3, r3, r1
 80069ac:	e7f1      	b.n	8006992 <roundf+0x1e>
 80069ae:	2a80      	cmp	r2, #128	@ 0x80
 80069b0:	d1f1      	bne.n	8006996 <roundf+0x22>
 80069b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069b6:	4770      	bx	lr
 80069b8:	007fffff 	.word	0x007fffff

080069bc <__ieee754_powf>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	ee10 4a90 	vmov	r4, s1
 80069c4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80069c8:	ed2d 8b02 	vpush	{d8}
 80069cc:	ee10 6a10 	vmov	r6, s0
 80069d0:	eeb0 8a40 	vmov.f32	s16, s0
 80069d4:	eef0 8a60 	vmov.f32	s17, s1
 80069d8:	d10c      	bne.n	80069f4 <__ieee754_powf+0x38>
 80069da:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80069de:	0076      	lsls	r6, r6, #1
 80069e0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80069e4:	f240 829c 	bls.w	8006f20 <__ieee754_powf+0x564>
 80069e8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80069ec:	ecbd 8b02 	vpop	{d8}
 80069f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80069f8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80069fc:	d802      	bhi.n	8006a04 <__ieee754_powf+0x48>
 80069fe:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006a02:	d908      	bls.n	8006a16 <__ieee754_powf+0x5a>
 8006a04:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8006a08:	d1ee      	bne.n	80069e8 <__ieee754_powf+0x2c>
 8006a0a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006a0e:	0064      	lsls	r4, r4, #1
 8006a10:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006a14:	e7e6      	b.n	80069e4 <__ieee754_powf+0x28>
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	da1e      	bge.n	8006a58 <__ieee754_powf+0x9c>
 8006a1a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8006a1e:	d22b      	bcs.n	8006a78 <__ieee754_powf+0xbc>
 8006a20:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006a24:	d332      	bcc.n	8006a8c <__ieee754_powf+0xd0>
 8006a26:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8006a2a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006a2e:	fa49 f503 	asr.w	r5, r9, r3
 8006a32:	fa05 f303 	lsl.w	r3, r5, r3
 8006a36:	454b      	cmp	r3, r9
 8006a38:	d126      	bne.n	8006a88 <__ieee754_powf+0xcc>
 8006a3a:	f005 0501 	and.w	r5, r5, #1
 8006a3e:	f1c5 0502 	rsb	r5, r5, #2
 8006a42:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006a46:	d122      	bne.n	8006a8e <__ieee754_powf+0xd2>
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	f280 826f 	bge.w	8006f2c <__ieee754_powf+0x570>
 8006a4e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006a52:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006a56:	e7c9      	b.n	80069ec <__ieee754_powf+0x30>
 8006a58:	2500      	movs	r5, #0
 8006a5a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006a5e:	d1f0      	bne.n	8006a42 <__ieee754_powf+0x86>
 8006a60:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8006a64:	f000 825c 	beq.w	8006f20 <__ieee754_powf+0x564>
 8006a68:	d908      	bls.n	8006a7c <__ieee754_powf+0xc0>
 8006a6a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8006dcc <__ieee754_powf+0x410>
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	bfa8      	it	ge
 8006a72:	eeb0 0a68 	vmovge.f32	s0, s17
 8006a76:	e7b9      	b.n	80069ec <__ieee754_powf+0x30>
 8006a78:	2502      	movs	r5, #2
 8006a7a:	e7ee      	b.n	8006a5a <__ieee754_powf+0x9e>
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	f280 8252 	bge.w	8006f26 <__ieee754_powf+0x56a>
 8006a82:	eeb1 0a68 	vneg.f32	s0, s17
 8006a86:	e7b1      	b.n	80069ec <__ieee754_powf+0x30>
 8006a88:	2500      	movs	r5, #0
 8006a8a:	e7da      	b.n	8006a42 <__ieee754_powf+0x86>
 8006a8c:	2500      	movs	r5, #0
 8006a8e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8006a92:	d102      	bne.n	8006a9a <__ieee754_powf+0xde>
 8006a94:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006a98:	e7a8      	b.n	80069ec <__ieee754_powf+0x30>
 8006a9a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8006a9e:	d109      	bne.n	8006ab4 <__ieee754_powf+0xf8>
 8006aa0:	2e00      	cmp	r6, #0
 8006aa2:	db07      	blt.n	8006ab4 <__ieee754_powf+0xf8>
 8006aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa8:	ecbd 8b02 	vpop	{d8}
 8006aac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	f000 bae8 	b.w	8007084 <__ieee754_sqrtf>
 8006ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ab8:	f000 fa50 	bl	8006f5c <fabsf>
 8006abc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006ac0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8006ac4:	4647      	mov	r7, r8
 8006ac6:	d002      	beq.n	8006ace <__ieee754_powf+0x112>
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	d117      	bne.n	8006afe <__ieee754_powf+0x142>
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	bfbc      	itt	lt
 8006ad2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8006ad6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	da86      	bge.n	80069ec <__ieee754_powf+0x30>
 8006ade:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8006ae2:	ea58 0805 	orrs.w	r8, r8, r5
 8006ae6:	d104      	bne.n	8006af2 <__ieee754_powf+0x136>
 8006ae8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006aec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006af0:	e77c      	b.n	80069ec <__ieee754_powf+0x30>
 8006af2:	2d01      	cmp	r5, #1
 8006af4:	f47f af7a 	bne.w	80069ec <__ieee754_powf+0x30>
 8006af8:	eeb1 0a40 	vneg.f32	s0, s0
 8006afc:	e776      	b.n	80069ec <__ieee754_powf+0x30>
 8006afe:	0ff0      	lsrs	r0, r6, #31
 8006b00:	3801      	subs	r0, #1
 8006b02:	ea55 0300 	orrs.w	r3, r5, r0
 8006b06:	d104      	bne.n	8006b12 <__ieee754_powf+0x156>
 8006b08:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006b0c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006b10:	e76c      	b.n	80069ec <__ieee754_powf+0x30>
 8006b12:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8006b16:	d973      	bls.n	8006c00 <__ieee754_powf+0x244>
 8006b18:	4bad      	ldr	r3, [pc, #692]	@ (8006dd0 <__ieee754_powf+0x414>)
 8006b1a:	4598      	cmp	r8, r3
 8006b1c:	d808      	bhi.n	8006b30 <__ieee754_powf+0x174>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	da0b      	bge.n	8006b3a <__ieee754_powf+0x17e>
 8006b22:	2000      	movs	r0, #0
 8006b24:	ecbd 8b02 	vpop	{d8}
 8006b28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	f000 baa4 	b.w	8007078 <__math_oflowf>
 8006b30:	4ba8      	ldr	r3, [pc, #672]	@ (8006dd4 <__ieee754_powf+0x418>)
 8006b32:	4598      	cmp	r8, r3
 8006b34:	d908      	bls.n	8006b48 <__ieee754_powf+0x18c>
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	dcf3      	bgt.n	8006b22 <__ieee754_powf+0x166>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	ecbd 8b02 	vpop	{d8}
 8006b40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	f000 ba92 	b.w	800706c <__math_uflowf>
 8006b48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006b4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b50:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8006dd8 <__ieee754_powf+0x41c>
 8006b54:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8006b58:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006b5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006b60:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006b64:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b6c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8006ddc <__ieee754_powf+0x420>
 8006b70:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006b74:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006de0 <__ieee754_powf+0x424>
 8006b78:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b7c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8006de4 <__ieee754_powf+0x428>
 8006b80:	eef0 6a67 	vmov.f32	s13, s15
 8006b84:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006b88:	ee16 3a90 	vmov	r3, s13
 8006b8c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006b90:	f023 030f 	bic.w	r3, r3, #15
 8006b94:	ee06 3a90 	vmov	s13, r3
 8006b98:	eee0 6a47 	vfms.f32	s13, s0, s14
 8006b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ba0:	3d01      	subs	r5, #1
 8006ba2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8006ba6:	4305      	orrs	r5, r0
 8006ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bac:	f024 040f 	bic.w	r4, r4, #15
 8006bb0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8006bb4:	bf18      	it	ne
 8006bb6:	eeb0 8a47 	vmovne.f32	s16, s14
 8006bba:	ee07 4a10 	vmov	s14, r4
 8006bbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006bc2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006bce:	ee07 4a10 	vmov	s14, r4
 8006bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bd6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006bda:	ee17 1a10 	vmov	r1, s14
 8006bde:	2900      	cmp	r1, #0
 8006be0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006be4:	f340 80dd 	ble.w	8006da2 <__ieee754_powf+0x3e6>
 8006be8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006bec:	f240 80ca 	bls.w	8006d84 <__ieee754_powf+0x3c8>
 8006bf0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	bf4c      	ite	mi
 8006bfa:	2001      	movmi	r0, #1
 8006bfc:	2000      	movpl	r0, #0
 8006bfe:	e791      	b.n	8006b24 <__ieee754_powf+0x168>
 8006c00:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006c04:	bf01      	itttt	eq
 8006c06:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8006de8 <__ieee754_powf+0x42c>
 8006c0a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006c0e:	f06f 0317 	mvneq.w	r3, #23
 8006c12:	ee17 7a90 	vmoveq	r7, s15
 8006c16:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8006c1a:	bf18      	it	ne
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	3a7f      	subs	r2, #127	@ 0x7f
 8006c20:	441a      	add	r2, r3
 8006c22:	4b72      	ldr	r3, [pc, #456]	@ (8006dec <__ieee754_powf+0x430>)
 8006c24:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8006c28:	429f      	cmp	r7, r3
 8006c2a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8006c2e:	dd06      	ble.n	8006c3e <__ieee754_powf+0x282>
 8006c30:	4b6f      	ldr	r3, [pc, #444]	@ (8006df0 <__ieee754_powf+0x434>)
 8006c32:	429f      	cmp	r7, r3
 8006c34:	f340 80a4 	ble.w	8006d80 <__ieee754_powf+0x3c4>
 8006c38:	3201      	adds	r2, #1
 8006c3a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8006c3e:	2600      	movs	r6, #0
 8006c40:	4b6c      	ldr	r3, [pc, #432]	@ (8006df4 <__ieee754_powf+0x438>)
 8006c42:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006c46:	ee07 1a10 	vmov	s14, r1
 8006c4a:	edd3 5a00 	vldr	s11, [r3]
 8006c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8006df8 <__ieee754_powf+0x43c>)
 8006c50:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c58:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006c5c:	1049      	asrs	r1, r1, #1
 8006c5e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8006c62:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8006c66:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8006c6a:	ee37 6a65 	vsub.f32	s12, s14, s11
 8006c6e:	ee07 1a90 	vmov	s15, r1
 8006c72:	ee26 5a24 	vmul.f32	s10, s12, s9
 8006c76:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8006c7a:	ee15 7a10 	vmov	r7, s10
 8006c7e:	401f      	ands	r7, r3
 8006c80:	ee06 7a90 	vmov	s13, r7
 8006c84:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8006c88:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006c8c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8006c90:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006c94:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006dfc <__ieee754_powf+0x440>
 8006c98:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006e00 <__ieee754_powf+0x444>
 8006c9c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006ca0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006e04 <__ieee754_powf+0x448>
 8006ca4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006ca8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006dd8 <__ieee754_powf+0x41c>
 8006cac:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006cb0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006e08 <__ieee754_powf+0x44c>
 8006cb4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006cb8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006e0c <__ieee754_powf+0x450>
 8006cbc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006cc0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006cc4:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006cc8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006ccc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006cd0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006cd4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006cd8:	eef0 5a67 	vmov.f32	s11, s15
 8006cdc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006ce0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006ce4:	ee15 1a90 	vmov	r1, s11
 8006ce8:	4019      	ands	r1, r3
 8006cea:	ee05 1a90 	vmov	s11, r1
 8006cee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006cf2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cfa:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006cfe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006d02:	eeb0 6a67 	vmov.f32	s12, s15
 8006d06:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006d0a:	ee16 1a10 	vmov	r1, s12
 8006d0e:	4019      	ands	r1, r3
 8006d10:	ee06 1a10 	vmov	s12, r1
 8006d14:	eeb0 7a46 	vmov.f32	s14, s12
 8006d18:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006d1c:	493c      	ldr	r1, [pc, #240]	@ (8006e10 <__ieee754_powf+0x454>)
 8006d1e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d26:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006e14 <__ieee754_powf+0x458>
 8006d2a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006e18 <__ieee754_powf+0x45c>
 8006d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d32:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006e1c <__ieee754_powf+0x460>
 8006d36:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006d3a:	ed91 7a00 	vldr	s14, [r1]
 8006d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d42:	ee07 2a10 	vmov	s14, r2
 8006d46:	eef0 6a67 	vmov.f32	s13, s15
 8006d4a:	4a35      	ldr	r2, [pc, #212]	@ (8006e20 <__ieee754_powf+0x464>)
 8006d4c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006d50:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8006d54:	ed92 5a00 	vldr	s10, [r2]
 8006d58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006d5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006d60:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006d64:	ee16 2a90 	vmov	r2, s13
 8006d68:	4013      	ands	r3, r2
 8006d6a:	ee06 3a90 	vmov	s13, r3
 8006d6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006d72:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006d76:	eea6 7a65 	vfms.f32	s14, s12, s11
 8006d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d7e:	e70f      	b.n	8006ba0 <__ieee754_powf+0x1e4>
 8006d80:	2601      	movs	r6, #1
 8006d82:	e75d      	b.n	8006c40 <__ieee754_powf+0x284>
 8006d84:	d152      	bne.n	8006e2c <__ieee754_powf+0x470>
 8006d86:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006e24 <__ieee754_powf+0x468>
 8006d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d8e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006d92:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	f73f af29 	bgt.w	8006bf0 <__ieee754_powf+0x234>
 8006d9e:	2386      	movs	r3, #134	@ 0x86
 8006da0:	e048      	b.n	8006e34 <__ieee754_powf+0x478>
 8006da2:	4a21      	ldr	r2, [pc, #132]	@ (8006e28 <__ieee754_powf+0x46c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d907      	bls.n	8006db8 <__ieee754_powf+0x3fc>
 8006da8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	bf4c      	ite	mi
 8006db2:	2001      	movmi	r0, #1
 8006db4:	2000      	movpl	r0, #0
 8006db6:	e6c1      	b.n	8006b3c <__ieee754_powf+0x180>
 8006db8:	d138      	bne.n	8006e2c <__ieee754_powf+0x470>
 8006dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006dbe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	dbea      	blt.n	8006d9e <__ieee754_powf+0x3e2>
 8006dc8:	e7ee      	b.n	8006da8 <__ieee754_powf+0x3ec>
 8006dca:	bf00      	nop
 8006dcc:	00000000 	.word	0x00000000
 8006dd0:	3f7ffff3 	.word	0x3f7ffff3
 8006dd4:	3f800007 	.word	0x3f800007
 8006dd8:	3eaaaaab 	.word	0x3eaaaaab
 8006ddc:	3fb8aa3b 	.word	0x3fb8aa3b
 8006de0:	36eca570 	.word	0x36eca570
 8006de4:	3fb8aa00 	.word	0x3fb8aa00
 8006de8:	4b800000 	.word	0x4b800000
 8006dec:	001cc471 	.word	0x001cc471
 8006df0:	005db3d6 	.word	0x005db3d6
 8006df4:	0800710c 	.word	0x0800710c
 8006df8:	fffff000 	.word	0xfffff000
 8006dfc:	3e6c3255 	.word	0x3e6c3255
 8006e00:	3e53f142 	.word	0x3e53f142
 8006e04:	3e8ba305 	.word	0x3e8ba305
 8006e08:	3edb6db7 	.word	0x3edb6db7
 8006e0c:	3f19999a 	.word	0x3f19999a
 8006e10:	080070fc 	.word	0x080070fc
 8006e14:	3f76384f 	.word	0x3f76384f
 8006e18:	3f763800 	.word	0x3f763800
 8006e1c:	369dc3a0 	.word	0x369dc3a0
 8006e20:	08007104 	.word	0x08007104
 8006e24:	3338aa3c 	.word	0x3338aa3c
 8006e28:	43160000 	.word	0x43160000
 8006e2c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006e30:	d971      	bls.n	8006f16 <__ieee754_powf+0x55a>
 8006e32:	15db      	asrs	r3, r3, #23
 8006e34:	3b7e      	subs	r3, #126	@ 0x7e
 8006e36:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006e3a:	4118      	asrs	r0, r3
 8006e3c:	4408      	add	r0, r1
 8006e3e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006e42:	4a3c      	ldr	r2, [pc, #240]	@ (8006f34 <__ieee754_powf+0x578>)
 8006e44:	3b7f      	subs	r3, #127	@ 0x7f
 8006e46:	411a      	asrs	r2, r3
 8006e48:	4002      	ands	r2, r0
 8006e4a:	ee07 2a10 	vmov	s14, r2
 8006e4e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006e52:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006e56:	f1c3 0317 	rsb	r3, r3, #23
 8006e5a:	4118      	asrs	r0, r3
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e62:	bfb8      	it	lt
 8006e64:	4240      	neglt	r0, r0
 8006e66:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006e6a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006f38 <__ieee754_powf+0x57c>
 8006e6e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8006f3c <__ieee754_powf+0x580>
 8006e72:	ee17 3a10 	vmov	r3, s14
 8006e76:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006e7a:	f023 030f 	bic.w	r3, r3, #15
 8006e7e:	ee07 3a10 	vmov	s14, r3
 8006e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e86:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006e8a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006e8e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8006f40 <__ieee754_powf+0x584>
 8006e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e96:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006e9a:	eef0 6a67 	vmov.f32	s13, s15
 8006e9e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006ea2:	eef0 5a66 	vmov.f32	s11, s13
 8006ea6:	eee7 5a46 	vfms.f32	s11, s14, s12
 8006eaa:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006eae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006eb2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8006f44 <__ieee754_powf+0x588>
 8006eb6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8006f48 <__ieee754_powf+0x58c>
 8006eba:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006ebe:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8006f4c <__ieee754_powf+0x590>
 8006ec2:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006ec6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8006f50 <__ieee754_powf+0x594>
 8006eca:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006ece:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8006f54 <__ieee754_powf+0x598>
 8006ed2:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006ed6:	eeb0 6a66 	vmov.f32	s12, s13
 8006eda:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006ede:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006ee2:	ee66 5a86 	vmul.f32	s11, s13, s12
 8006ee6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006eea:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006eee:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ef6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006efa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006efe:	ee10 3a10 	vmov	r3, s0
 8006f02:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006f06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f0a:	da06      	bge.n	8006f1a <__ieee754_powf+0x55e>
 8006f0c:	f000 f82e 	bl	8006f6c <scalbnf>
 8006f10:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006f14:	e56a      	b.n	80069ec <__ieee754_powf+0x30>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e7a5      	b.n	8006e66 <__ieee754_powf+0x4aa>
 8006f1a:	ee00 3a10 	vmov	s0, r3
 8006f1e:	e7f7      	b.n	8006f10 <__ieee754_powf+0x554>
 8006f20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006f24:	e562      	b.n	80069ec <__ieee754_powf+0x30>
 8006f26:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006f58 <__ieee754_powf+0x59c>
 8006f2a:	e55f      	b.n	80069ec <__ieee754_powf+0x30>
 8006f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f30:	e55c      	b.n	80069ec <__ieee754_powf+0x30>
 8006f32:	bf00      	nop
 8006f34:	ff800000 	.word	0xff800000
 8006f38:	3f317218 	.word	0x3f317218
 8006f3c:	3f317200 	.word	0x3f317200
 8006f40:	35bfbe8c 	.word	0x35bfbe8c
 8006f44:	b5ddea0e 	.word	0xb5ddea0e
 8006f48:	3331bb4c 	.word	0x3331bb4c
 8006f4c:	388ab355 	.word	0x388ab355
 8006f50:	bb360b61 	.word	0xbb360b61
 8006f54:	3e2aaaab 	.word	0x3e2aaaab
 8006f58:	00000000 	.word	0x00000000

08006f5c <fabsf>:
 8006f5c:	ee10 3a10 	vmov	r3, s0
 8006f60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f64:	ee00 3a10 	vmov	s0, r3
 8006f68:	4770      	bx	lr
	...

08006f6c <scalbnf>:
 8006f6c:	ee10 3a10 	vmov	r3, s0
 8006f70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006f74:	d02b      	beq.n	8006fce <scalbnf+0x62>
 8006f76:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006f7a:	d302      	bcc.n	8006f82 <scalbnf+0x16>
 8006f7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f80:	4770      	bx	lr
 8006f82:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006f86:	d123      	bne.n	8006fd0 <scalbnf+0x64>
 8006f88:	4b24      	ldr	r3, [pc, #144]	@ (800701c <scalbnf+0xb0>)
 8006f8a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007020 <scalbnf+0xb4>
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006f94:	db17      	blt.n	8006fc6 <scalbnf+0x5a>
 8006f96:	ee10 3a10 	vmov	r3, s0
 8006f9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006f9e:	3a19      	subs	r2, #25
 8006fa0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006fa4:	4288      	cmp	r0, r1
 8006fa6:	dd15      	ble.n	8006fd4 <scalbnf+0x68>
 8006fa8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007024 <scalbnf+0xb8>
 8006fac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007028 <scalbnf+0xbc>
 8006fb0:	ee10 3a10 	vmov	r3, s0
 8006fb4:	eeb0 7a67 	vmov.f32	s14, s15
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfb8      	it	lt
 8006fbc:	eef0 7a66 	vmovlt.f32	s15, s13
 8006fc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006fc4:	4770      	bx	lr
 8006fc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800702c <scalbnf+0xc0>
 8006fca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006fce:	4770      	bx	lr
 8006fd0:	0dd2      	lsrs	r2, r2, #23
 8006fd2:	e7e5      	b.n	8006fa0 <scalbnf+0x34>
 8006fd4:	4410      	add	r0, r2
 8006fd6:	28fe      	cmp	r0, #254	@ 0xfe
 8006fd8:	dce6      	bgt.n	8006fa8 <scalbnf+0x3c>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	dd06      	ble.n	8006fec <scalbnf+0x80>
 8006fde:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fe2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006fe6:	ee00 3a10 	vmov	s0, r3
 8006fea:	4770      	bx	lr
 8006fec:	f110 0f16 	cmn.w	r0, #22
 8006ff0:	da09      	bge.n	8007006 <scalbnf+0x9a>
 8006ff2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800702c <scalbnf+0xc0>
 8006ff6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007030 <scalbnf+0xc4>
 8006ffa:	ee10 3a10 	vmov	r3, s0
 8006ffe:	eeb0 7a67 	vmov.f32	s14, s15
 8007002:	2b00      	cmp	r3, #0
 8007004:	e7d9      	b.n	8006fba <scalbnf+0x4e>
 8007006:	3019      	adds	r0, #25
 8007008:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800700c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007010:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007034 <scalbnf+0xc8>
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	e7d7      	b.n	8006fca <scalbnf+0x5e>
 800701a:	bf00      	nop
 800701c:	ffff3cb0 	.word	0xffff3cb0
 8007020:	4c000000 	.word	0x4c000000
 8007024:	7149f2ca 	.word	0x7149f2ca
 8007028:	f149f2ca 	.word	0xf149f2ca
 800702c:	0da24260 	.word	0x0da24260
 8007030:	8da24260 	.word	0x8da24260
 8007034:	33000000 	.word	0x33000000

08007038 <with_errnof>:
 8007038:	b510      	push	{r4, lr}
 800703a:	ed2d 8b02 	vpush	{d8}
 800703e:	eeb0 8a40 	vmov.f32	s16, s0
 8007042:	4604      	mov	r4, r0
 8007044:	f7ff fbfc 	bl	8006840 <__errno>
 8007048:	eeb0 0a48 	vmov.f32	s0, s16
 800704c:	ecbd 8b02 	vpop	{d8}
 8007050:	6004      	str	r4, [r0, #0]
 8007052:	bd10      	pop	{r4, pc}

08007054 <xflowf>:
 8007054:	b130      	cbz	r0, 8007064 <xflowf+0x10>
 8007056:	eef1 7a40 	vneg.f32	s15, s0
 800705a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800705e:	2022      	movs	r0, #34	@ 0x22
 8007060:	f7ff bfea 	b.w	8007038 <with_errnof>
 8007064:	eef0 7a40 	vmov.f32	s15, s0
 8007068:	e7f7      	b.n	800705a <xflowf+0x6>
	...

0800706c <__math_uflowf>:
 800706c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007074 <__math_uflowf+0x8>
 8007070:	f7ff bff0 	b.w	8007054 <xflowf>
 8007074:	10000000 	.word	0x10000000

08007078 <__math_oflowf>:
 8007078:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007080 <__math_oflowf+0x8>
 800707c:	f7ff bfea 	b.w	8007054 <xflowf>
 8007080:	70000000 	.word	0x70000000

08007084 <__ieee754_sqrtf>:
 8007084:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007088:	4770      	bx	lr
	...

0800708c <_init>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr

08007098 <_fini>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr
